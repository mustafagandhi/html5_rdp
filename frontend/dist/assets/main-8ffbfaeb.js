var e=Object.defineProperty,t=(t,n,i)=>(((t,n,i)=>{n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[n]=i})(t,"symbol"!=typeof n?n+"":n,i),i);!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();const n={};var i=(e=>(e[e.DEBUG=0]="DEBUG",e[e.INFO=1]="INFO",e[e.WARN=2]="WARN",e[e.ERROR=3]="ERROR",e[e.FATAL=4]="FATAL",e))(i||{});const s=class e{constructor(e){t(this,"logLevel",1),t(this,"logs",[]),t(this,"maxLogs",1e3),t(this,"isProduction",!0),this.category=e,this.setupGlobalErrorHandling()}static getInstance(t){return e.instance||(e.instance=new e(t)),e.instance}setLogLevel(e){this.logLevel=e}debug(e,t){this.log(0,e,t)}info(e,t){this.log(1,e,t)}warn(e,t){this.log(2,e,t)}error(e,t,n){this.log(3,e,n,t)}fatal(e,t,n){this.log(4,e,n,t)}log(e,t,n,i){if(e<this.logLevel)return;const s={timestamp:(new Date).toISOString(),level:e,category:this.category,message:t,data:n,error:i};this.logs.push(s),this.logs.length>this.maxLogs&&this.logs.shift(),this.outputLog(s)}outputLog(e){const t=i[e.level],n=`[${e.timestamp.split("T")[1].split(".")[0]}] [${t}] [${e.category}]`;if(this.isProduction&&0===e.level)return;const s={...e,timestamp:e.timestamp,level:t};switch(e.level){case 0:console.debug(n,e.message,e.data||"");break;case 1:console.info(n,e.message,e.data||"");break;case 2:console.warn(n,e.message,e.data||"");break;case 3:console.error(n,e.message,e.error||e.data||"");break;case 4:console.error(n,"FATAL:",e.message,e.error||e.data||"")}this.isProduction&&e.level>=3&&this.sendToRemoteLogging(s)}setupGlobalErrorHandling(){window.addEventListener("error",e=>{this.error("Unhandled error",e.error,{filename:e.filename,lineno:e.lineno,colno:e.colno})}),window.addEventListener("unhandledrejection",e=>{this.error("Unhandled promise rejection",e.reason)})}async sendToRemoteLogging(e){try{const t=JSON.parse(localStorage.getItem("remoteLogs")||"[]");t.push(e),localStorage.setItem("remoteLogs",JSON.stringify(t.slice(-100)))}catch(t){console.error("Failed to send log to remote service:",t)}}getLogs(e){return void 0!==e?this.logs.filter(t=>t.level>=e):[...this.logs]}clearLogs(){this.logs=[]}exportLogs(){return JSON.stringify(this.logs,null,2)}time(e){console.time(`[${this.category}] ${e}`)}timeEnd(e){console.timeEnd(`[${this.category}] ${e}`)}group(e){console.group(`[${this.category}] ${e}`)}groupEnd(){console.groupEnd()}};t(s,"instance");let a=s;const o=class e{constructor(){t(this,"logger",new a("Config")),t(this,"config"),t(this,"storageKey","real-remote-desktop-config"),this.config=this.getDefaultConfig(),this.loadFromStorage()}static getInstance(){return e.instance||(e.instance=new e),e.instance}static init(){e.getInstance()}get(e){const t=e.split(".");let n=this.config;for(const i of t){if(!n||"object"!=typeof n||!(i in n))throw new Error(`Config path not found: ${e}`);n=n[i]}return n}set(e,t){const n=e.split("."),i=n.pop();let s=this.config;for(const a of n)a in s&&"object"==typeof s[a]||(s[a]={}),s=s[a];s[i]=t,this.saveToStorage(),this.logger.debug(`Config updated: ${e} = ${JSON.stringify(t)}`)}reset(){this.config=this.getDefaultConfig(),this.saveToStorage(),this.logger.info("Configuration reset to defaults")}export(){return JSON.stringify(this.config,null,2)}import(e){try{const t=JSON.parse(e);this.config=this.mergeConfigs(this.getDefaultConfig(),t),this.saveToStorage(),this.logger.info("Configuration imported successfully")}catch(t){throw this.logger.error("Failed to import configuration",t),new Error("Invalid configuration format")}}getDefaultConfig(){return{connection:{defaultHost:"localhost",defaultPort:4e3,defaultSecure:!1,reconnectAttempts:5,reconnectDelay:1e3,heartbeatInterval:3e4,connectionTimeout:1e4},webrtc:{iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"}],maxBitrate:5e6,maxFramerate:60,enableAudio:!1,enableVideo:!0},display:{defaultQuality:"medium",defaultScaleMode:"fit",maintainAspectRatio:!0,enableHardwareAcceleration:!0,maxFrameQueueSize:10},ui:{theme:"auto",showPerformanceOverlay:!1,showConnectionInfo:!0,enableKeyboardShortcuts:!0,enableContextMenu:!1,language:"en"},security:{enableClipboard:!0,enableFileTransfer:!0,enableAudioCapture:!1,enablePrinting:!1,maxFileSize:104857600},logging:{level:"info",enableConsole:!0,enableRemote:!1,maxLogEntries:1e3}}}mergeConfigs(e,t){const n={...e};for(const[i,s]of Object.entries(t))i in n&&"object"==typeof s&&(n[i]={...n[i],...s});return n}loadFromStorage(){try{const e=localStorage.getItem(this.storageKey);if(e){const t=JSON.parse(e);this.config=this.mergeConfigs(this.getDefaultConfig(),t),this.logger.debug("Configuration loaded from storage")}}catch(e){this.logger.warn("Failed to load configuration from storage",e)}}saveToStorage(){try{localStorage.setItem(this.storageKey,JSON.stringify(this.config)),this.logger.debug("Configuration saved to storage")}catch(e){this.logger.warn("Failed to save configuration to storage",e)}}getConnectionConfig(){return this.config.connection}getWebRTCConfig(){return this.config.webrtc}getDisplayConfig(){return this.config.display}getUIConfig(){return this.config.ui}getSecurityConfig(){return this.config.security}getLoggingConfig(){return this.config.logging}getTheme(){const e=this.config.ui.theme;return"auto"===e?window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light":e}setTheme(e){this.set("ui.theme",e)}getQuality(){return this.config.display.defaultQuality}setQuality(e){this.set("display.defaultQuality",e)}getDefaultConnection(){return{host:this.config.connection.defaultHost,port:this.config.connection.defaultPort,secure:this.config.connection.defaultSecure}}setDefaultConnection(e,t,n){this.set("connection.defaultHost",e),this.set("connection.defaultPort",t),this.set("connection.defaultSecure",n)}validate(){try{if(this.config.connection.defaultPort<1||this.config.connection.defaultPort>65535)throw new Error("Invalid default port");if(!["low","medium","high","ultra"].includes(this.config.display.defaultQuality))throw new Error("Invalid default quality");if(!["light","dark","auto"].includes(this.config.ui.theme))throw new Error("Invalid theme");return!0}catch(e){return this.logger.error("Configuration validation failed",e),!1}}};t(o,"instance");let r=o;class c{static init(){this.isInitialized||(this.setupGlobalErrorHandling(),this.setupUnhandledRejectionHandling(),this.setupNetworkErrorHandling(),this.isInitialized=!0,this.logger.info("Error handler initialized"))}static handleError(e,t){const n={id:this.generateErrorId(),timestamp:(new Date).toISOString(),type:e instanceof Error?e.constructor.name:"UnknownError",message:e instanceof Error?e.message:e,stack:e instanceof Error?e.stack:void 0,userAgent:navigator.userAgent,url:window.location.href,data:t};this.errors.push(n),this.errors.length>this.maxErrors&&this.errors.shift(),this.logger.error(n.message,e instanceof Error?e:void 0,t),this.showUserFriendlyError(n)}static handleNetworkError(e,t,n){const i=new Error(`Network error: ${n} ${t} - ${e.message}`);this.handleError(i,{url:t,method:n})}static handleWebRTCError(e,t){const n=new Error(`WebRTC error in ${t}: ${e.message}`);this.handleError(n,{context:t})}static handleConnectionError(e,t){const n=new Error(`Connection error (${t}): ${e.message}`);this.handleError(n,{connectionType:t})}static setupGlobalErrorHandling(){window.addEventListener("error",e=>{this.handleError(e.error||new Error(e.message),{filename:e.filename,lineno:e.lineno,colno:e.colno})})}static setupUnhandledRejectionHandling(){window.addEventListener("unhandledrejection",e=>{const t=e.reason instanceof Error?e.reason:new Error(String(e.reason));this.handleError(t,{type:"unhandledrejection"})})}static setupNetworkErrorHandling(){const e=window.fetch;window.fetch=async(t,n)=>{try{return await e(t,n)}catch(i){const e="string"==typeof t?t:t.toString(),s=n?.method||"GET";throw this.handleNetworkError(i,e,s),i}}}static generateErrorId(){return`error_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}static showUserFriendlyError(e){if(this.isTemporaryError(e))return;const t=this.getUserFriendlyMessage(e);this.showErrorNotification(t,e.id)}static isTemporaryError(e){return[/network error/i,/connection refused/i,/timeout/i,/offline/i,/no internet connection/i].some(t=>t.test(e.message))}static getUserFriendlyMessage(e){return{NetworkError:"Unable to connect to the server. Please check your internet connection.",WebRTCPeerConnectionError:"Failed to establish secure connection. Please try refreshing the page.",MediaDevicesError:"Unable to access camera or microphone. Please check your permissions.",CanvasError:"Display error occurred. Please refresh the page.",WebSocketError:"Connection lost. Attempting to reconnect...",AuthenticationError:"Authentication failed. Please log in again.",PermissionError:"Permission denied. Please check your browser settings.",QuotaExceededError:"Storage limit reached. Please clear some data.",TypeError:"An unexpected error occurred. Please refresh the page.",ReferenceError:"An unexpected error occurred. Please refresh the page.",SyntaxError:"An unexpected error occurred. Please refresh the page.",RangeError:"An unexpected error occurred. Please refresh the page.",EvalError:"An unexpected error occurred. Please refresh the page.",URIError:"An unexpected error occurred. Please refresh the page."}[e.type]||"An unexpected error occurred. Please try again."}static showErrorNotification(e,t){document.querySelectorAll(".error-notification").forEach(e=>e.remove());const n=document.createElement("div");n.className="error-notification",n.innerHTML=`\n      <div class="error-content">\n        <div class="error-icon">⚠️</div>\n        <div class="error-message">${e}</div>\n        <button class="error-close" onclick="this.parentElement.parentElement.remove()">×</button>\n      </div>\n    `,n.style.cssText="\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #fef2f2;\n      border: 1px solid #fecaca;\n      border-radius: 8px;\n      padding: 16px;\n      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n      z-index: 10000;\n      max-width: 400px;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    ";n.querySelector(".error-content").style.cssText="\n      display: flex;\n      align-items: center;\n      gap: 12px;\n    ";n.querySelector(".error-message").style.cssText="\n      flex: 1;\n      color: #991b1b;\n      font-size: 14px;\n      line-height: 1.4;\n    ";n.querySelector(".error-close").style.cssText="\n      background: none;\n      border: none;\n      font-size: 18px;\n      color: #991b1b;\n      cursor: pointer;\n      padding: 0;\n      width: 20px;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    ",document.body.appendChild(n),setTimeout(()=>{n.parentElement&&n.remove()},1e4)}static getErrors(){return[...this.errors]}static clearErrors(){this.errors=[]}static exportErrors(){return JSON.stringify(this.errors,null,2)}static isRecoverable(e){return["NetworkError","WebSocketError","WebRTCPeerConnectionError"].some(t=>e.constructor.name.includes(t))}static async retryOperation(e,t=3,n=1e3){let i;for(let a=1;a<=t;a++)try{return await e()}catch(s){if(i=s,a===t)throw this.handleError(i,{retryAttempts:a}),i;this.logger.warn(`Operation failed, retrying... (${a}/${t})`,{error:i.message}),await new Promise(e=>setTimeout(e,n*a))}throw i}}t(c,"logger",new a("ErrorHandler")),t(c,"errors",[]),t(c,"maxErrors",100),t(c,"isInitialized",!1);class l{constructor(){t(this,"events",{})}on(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)}off(e,t){if(!this.events[e])return;const n=this.events[e].indexOf(t);n>-1&&this.events[e].splice(n,1)}emit(e,t){this.events[e]&&this.events[e].forEach(n=>{try{n(t)}catch(i){console.error(`Error in event handler for ${e}:`,i)}})}once(e,t){const n=i=>{t(i),this.off(e,n)};this.on(e,n)}removeAllListeners(e){e?delete this.events[e]:this.events={}}listenerCount(e){return this.events[e]?.length||0}eventNames(){return Object.keys(this.events)}}class d extends l{constructor(){super(...arguments),t(this,"logger",new a("WebRTCService")),t(this,"peerConnection",null),t(this,"dataChannels",new Map),t(this,"mediaStream",null),t(this,"signalingSocket",null),t(this,"connectionOptions",null),t(this,"isConnected",!1),t(this,"reconnectAttempts",0),t(this,"maxReconnectAttempts",5),t(this,"stats",{bytesReceived:0,bytesSent:0,framesReceived:0,framesDropped:0,latency:0,bitrate:0,framerate:0,packetLoss:0,jitter:0})}async connect(e){try{this.logger.info("Initializing WebRTC connection",e),this.connectionOptions=e,this.peerConnection=new RTCPeerConnection({iceServers:e.iceServers,iceCandidatePoolSize:10}),this.setupPeerConnectionHandlers(),await this.connectSignalingServer(),this.createDataChannels(),e.enableVideo&&await this.setupVideoReceiver(),this.logger.info("WebRTC connection setup complete")}catch(t){throw this.logger.error("WebRTC connection failed",t),this.emit("error",t),t}}disconnect(){this.logger.info("Disconnecting WebRTC"),this.dataChannels.forEach(e=>{"open"===e.readyState&&e.close()}),this.dataChannels.clear(),this.peerConnection&&(this.peerConnection.close(),this.peerConnection=null),this.signalingSocket&&(this.signalingSocket.close(),this.signalingSocket=null),this.mediaStream&&(this.mediaStream.getTracks().forEach(e=>e.stop()),this.mediaStream=null),this.isConnected=!1,this.emit("disconnected"),this.logger.info("WebRTC disconnected")}sendMessage(e,t){const n=this.dataChannels.get(e);if(!n||"open"!==n.readyState)throw new Error(`Data channel '${e}' not available`);try{const e=JSON.stringify(t);n.send(e),this.stats.bytesSent+=e.length}catch(i){throw this.logger.error("Failed to send message",i),i}}sendInputEvent(e){this.sendMessage("input",{type:"input",data:e,timestamp:Date.now()})}sendClipboardData(e){this.sendMessage("clipboard",{type:"clipboard",data:e,timestamp:Date.now()})}sendFileChunk(e,t,n,i){this.sendMessage("file",{type:"file",data:{fileId:e,chunk:Array.from(new Uint8Array(t)),offset:n,totalSize:i},timestamp:Date.now()})}sendHeartbeat(){this.sendMessage("control",{type:"control",data:{action:"heartbeat"},timestamp:Date.now()})}updateQuality(e){this.connectionOptions&&(this.connectionOptions.quality=e,this.getVideoConstraints(e),this.peerConnection&&"connected"===this.peerConnection.connectionState&&this.logger.info(`Updating quality to ${e}`))}getStats(){return this.isConnected?{...this.stats}:null}async connectSignalingServer(){const{host:e,port:t,secure:n,token:i}=this.connectionOptions,s=`${n?"wss":"ws"}://${e}:${t}/webrtc-signaling`;return new Promise((e,t)=>{this.signalingSocket=new WebSocket(s),this.signalingSocket.onopen=()=>{this.logger.info("Signaling connection established"),i&&this.signalingSocket.send(JSON.stringify({type:"auth",token:i})),e()},this.signalingSocket.onmessage=e=>{this.handleSignalingMessage(JSON.parse(e.data))},this.signalingSocket.onerror=e=>{this.logger.error("Signaling connection error",e),t(e)},this.signalingSocket.onclose=()=>{this.logger.info("Signaling connection closed"),this.handleSignalingDisconnection()}})}setupPeerConnectionHandlers(){this.peerConnection&&(this.peerConnection.onicecandidate=e=>{e.candidate&&(this.logger.debug("ICE candidate generated",e.candidate),this.sendSignalingMessage({type:"ice-candidate",candidate:e.candidate}))},this.peerConnection.oniceconnectionstatechange=()=>{const e=this.peerConnection.iceConnectionState;this.logger.info("ICE connection state changed",e),"connected"===e?(this.isConnected=!0,this.emit("connected")):"disconnected"!==e&&"failed"!==e||(this.isConnected=!1,this.emit("disconnected"),this.handleDisconnection())},this.peerConnection.onconnectionstatechange=()=>{const e=this.peerConnection.connectionState;this.logger.info("Connection state changed",e)},this.peerConnection.ondatachannel=e=>{this.handleDataChannel(e.channel)},this.peerConnection.ontrack=e=>{this.logger.info("Remote track received",e.track.kind),this.handleRemoteTrack(e)})}createDataChannels(){if(!this.peerConnection)return;["control","input","clipboard","file","metrics"].forEach(e=>{const t=this.peerConnection.createDataChannel(e,{ordered:"control"===e||"input"===e,maxRetransmits:"control"===e?3:1});this.handleDataChannel(t)})}handleDataChannel(e){this.logger.info(`Data channel created: ${e.label}`),e.onopen=()=>{this.logger.info(`Data channel opened: ${e.label}`),this.dataChannels.set(e.label,e)},e.onmessage=t=>{this.handleDataChannelMessage(e.label,t.data)},e.onclose=()=>{this.logger.info(`Data channel closed: ${e.label}`),this.dataChannels.delete(e.label)},e.onerror=t=>{this.logger.error(`Data channel error: ${e.label}`,t)}}handleDataChannelMessage(e,t){try{const n=JSON.parse(t);switch(this.stats.bytesReceived+=t.length,this.emit("message",{channel:e,message:n}),n.type){case"control":this.handleControlMessage(n.data);break;case"video":this.handleVideoFrame(n.data);break;case"metrics":this.handleMetricsMessage(n.data);break;default:this.logger.debug(`Received message on channel ${e}`,n)}}catch(n){this.logger.error("Failed to parse data channel message",n)}}async setupVideoReceiver(){if(this.peerConnection)try{const e=document.createElement("video");e.style.display="none",document.body.appendChild(e),this.peerConnection.ontrack=t=>{"video"===t.track.kind&&(this.mediaStream=new MediaStream([t.track]),e.srcObject=this.mediaStream,e.play(),this.emit("videoStream",this.mediaStream))}}catch(e){throw this.logger.error("Failed to setup video receiver",e),e}}handleRemoteTrack(e){this.logger.info("Remote track received",e.track.kind),"video"===e.track.kind&&(this.mediaStream=new MediaStream([e.track]),this.emit("videoStream",this.mediaStream))}handleSignalingMessage(e){switch(e.type){case"offer":this.handleOffer(e.offer);break;case"answer":this.handleAnswer(e.answer);break;case"ice-candidate":this.handleIceCandidate(e.candidate);break;case"error":this.logger.error("Signaling error",e.error),this.emit("error",new Error(e.error));break;default:this.logger.debug("Unknown signaling message",e)}}async handleOffer(e){if(this.peerConnection)try{await this.peerConnection.setRemoteDescription(e);const t=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(t),this.sendSignalingMessage({type:"answer",answer:t})}catch(t){throw this.logger.error("Failed to handle offer",t),t}}async handleAnswer(e){if(this.peerConnection)try{await this.peerConnection.setRemoteDescription(e)}catch(t){throw this.logger.error("Failed to handle answer",t),t}}async handleIceCandidate(e){if(this.peerConnection)try{await this.peerConnection.addIceCandidate(e)}catch(t){this.logger.error("Failed to add ICE candidate",t)}}sendSignalingMessage(e){this.signalingSocket&&this.signalingSocket.readyState===WebSocket.OPEN?this.signalingSocket.send(JSON.stringify(e)):this.logger.warn("Signaling socket not available")}handleControlMessage(e){switch(e.action){case"resize":this.emit("resize",e);break;case"quality-change":this.emit("qualityChange",e);break;case"heartbeat":this.emit("heartbeat");break;default:this.logger.debug("Unknown control message",e)}}handleVideoFrame(e){this.stats.framesReceived++,this.emit("videoFrame",e)}handleMetricsMessage(e){this.stats={...this.stats,...e},this.emit("metrics",this.stats)}handleSignalingDisconnection(){this.logger.warn("Signaling connection lost"),this.handleDisconnection()}handleDisconnection(){this.reconnectAttempts<this.maxReconnectAttempts?(this.reconnectAttempts++,this.logger.info(`Attempting reconnection ${this.reconnectAttempts}/${this.maxReconnectAttempts}`),setTimeout(()=>{this.connect(this.connectionOptions)},1e3*this.reconnectAttempts)):(this.logger.error("Max reconnection attempts reached"),this.emit("error",new Error("Connection lost")))}getVideoConstraints(e){const t={low:{width:{ideal:640},height:{ideal:480},frameRate:{max:15}},medium:{width:{ideal:1280},height:{ideal:720},frameRate:{max:30}},high:{width:{ideal:1920},height:{ideal:1080},frameRate:{max:60}},ultra:{width:{ideal:2560},height:{ideal:1440},frameRate:{max:60}}};return t[e]||t.medium}}var h=(e=>(e.DISCONNECTED="disconnected",e.CONNECTING="connecting",e.CONNECTED="connected",e.RECONNECTING="reconnecting",e.FAILED="failed",e))(h||{});class u extends l{constructor(){super(),t(this,"logger",new a("ConnectionManager")),t(this,"config",r.getInstance()),t(this,"webrtcService"),t(this,"currentConnection",null),t(this,"connectionHistory",[]),t(this,"reconnectAttempts",0),t(this,"reconnectTimer",null),t(this,"heartbeatTimer",null),t(this,"isPaused",!1),t(this,"connectionCode",""),this.webrtcService=new d,this.setupEventListeners(),this.logger.info("Agentless Connection Manager initialized")}async startHostSession(e){try{this.logger.info("Starting host session",e),this.connectionCode=this.generateConnectionCode();const t={id:this.generateConnectionId(),type:"host",state:"connecting",isHost:!0,isClient:!1,startTime:Date.now(),bytesReceived:0,bytesSent:0,framesReceived:0,framesDropped:0,latency:0,quality:e.quality||"medium",screenShareActive:!1,fileTransferActive:!1,deviceRedirectionActive:!1};this.currentConnection=t,this.emit("connectionStateChanged",t),this.emit("hostSessionStarted",{connectionCode:this.connectionCode}),await this.startScreenSharing(),this.logger.info("Host session started successfully")}catch(t){throw this.logger.error("Failed to start host session",t),t}}async joinClientSession(e,t){try{if(this.logger.info("Joining client session",{connectionCode:e,options:t}),!this.validateConnectionCode(e))throw new Error("Invalid connection code");this.connectionCode=e;const n={id:this.generateConnectionId(),type:"client",state:"connecting",isHost:!1,isClient:!0,startTime:Date.now(),bytesReceived:0,bytesSent:0,framesReceived:0,framesDropped:0,latency:0,quality:t.quality||"medium",screenShareActive:!1,fileTransferActive:!1,deviceRedirectionActive:!1};this.currentConnection=n,this.emit("connectionStateChanged",n),await this.connectToHost(e),this.logger.info("Client session joined successfully")}catch(n){throw this.logger.error("Failed to join client session",n),n}}async startScreenSharing(){try{this.logger.info("Starting screen sharing");const e=await navigator.mediaDevices.getDisplayMedia({video:{cursor:"always",displaySurface:"monitor",logicalSurface:!0,resizeMode:"crop-and-scale"},audio:this.config.get("webrtc").enableAudio});await this.webrtcService.setLocalStream(e),this.currentConnection&&(this.currentConnection.screenShareActive=!0,this.emit("screenShareStarted",e)),this.logger.info("Screen sharing started successfully")}catch(e){throw this.logger.error("Failed to start screen sharing",e),e}}async stopScreenSharing(){try{this.logger.info("Stopping screen sharing"),await this.webrtcService.stopLocalStream(),this.currentConnection&&(this.currentConnection.screenShareActive=!1,this.emit("screenShareStopped")),this.logger.info("Screen sharing stopped successfully")}catch(e){throw this.logger.error("Failed to stop screen sharing",e),e}}async startFileTransfer(){try{if(this.logger.info("Starting file transfer"),!("showOpenFilePicker"in window))throw new Error("File System Access API not supported");this.currentConnection&&(this.currentConnection.fileTransferActive=!0,this.emit("fileTransferStarted")),this.logger.info("File transfer started successfully")}catch(e){throw this.logger.error("Failed to start file transfer",e),e}}async startDeviceRedirection(){try{if(this.logger.info("Starting device redirection"),!("usb"in navigator))throw new Error("Web USB API not supported");this.currentConnection&&(this.currentConnection.deviceRedirectionActive=!0,this.emit("deviceRedirectionStarted")),this.logger.info("Device redirection started successfully")}catch(e){throw this.logger.error("Failed to start device redirection",e),e}}disconnect(){this.logger.info("Disconnecting..."),this.currentConnection&&(this.currentConnection.state="disconnected",this.currentConnection.endTime=Date.now(),this.currentConnection.duration=this.currentConnection.endTime-this.currentConnection.startTime,this.connectionHistory.push(this.currentConnection),this.emit("disconnected",this.currentConnection)),this.webrtcService.disconnect(),this.stopHeartbeat(),this.stopReconnectTimer(),this.currentConnection=null,this.connectionCode="",this.reconnectAttempts=0,this.logger.info("Disconnected successfully")}reconnect(){if(this.logger.info("Attempting to reconnect..."),this.reconnectAttempts>=5)return this.logger.error("Max reconnection attempts reached"),void this.emit("reconnectionFailed");this.reconnectAttempts++,this.currentConnection&&(this.currentConnection.state="reconnecting",this.emit("connectionStateChanged",this.currentConnection)),setTimeout(()=>{this.logger.info("Reconnection attempt completed")},1e3*this.reconnectAttempts)}pause(){this.isPaused=!0,this.logger.info("Connection paused")}resume(){this.isPaused=!1,this.logger.info("Connection resumed")}getConnectionInfo(){return this.currentConnection}getConnectionHistory(){return this.connectionHistory}getConnectionCode(){return this.connectionCode}updateQuality(e){this.currentConnection?(this.currentConnection.quality=e,this.webrtcService.updateQuality(e),this.emit("qualityChanged",e),this.logger.info(`Quality updated to ${e}`)):this.logger.warn("No active connection to update quality")}sendInputEvents(e){if(this.currentConnection&&"connected"===this.currentConnection.state)try{this.webrtcService.sendInputEvents(e)}catch(t){this.logger.error("Failed to send input events",t)}}setupEventListeners(){this.webrtcService.on("connected",()=>{this.logger.info("WebRTC connected"),this.currentConnection&&(this.currentConnection.state="connected",this.emit("connected",this.currentConnection))}),this.webrtcService.on("disconnected",()=>{this.logger.info("WebRTC disconnected"),this.handleServiceDisconnection()}),this.webrtcService.on("error",e=>{this.logger.error("WebRTC error",e),c.handleWebRTCError(e,"WebRTC Service")})}handleServiceDisconnection(){this.currentConnection&&"connected"===this.currentConnection.state&&(this.logger.warn("Service disconnected, attempting reconnection"),this.reconnect())}async connectToHost(e){this.logger.info("Connecting to host with code:",e),setTimeout(()=>{this.currentConnection&&(this.currentConnection.state="connected",this.emit("connected",this.currentConnection))},1e3)}generateConnectionCode(){return Math.random().toString(36).substring(2,8).toUpperCase()}validateConnectionCode(e){return 6===e.length&&/^[A-Z0-9]+$/.test(e)}generateConnectionId(){return`conn_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}startHeartbeat(){const e=this.config.get("connection").heartbeatInterval||3e4;this.heartbeatTimer=setInterval(()=>{if(!this.isPaused)try{this.webrtcService.sendHeartbeat()}catch(e){this.logger.warn("Heartbeat failed",e)}},e)}stopHeartbeat(){this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=null)}stopReconnectTimer(){this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null)}getWebRTCService(){return this.webrtcService}isConnected(){return"connected"===this.currentConnection?.state}isConnecting(){return"connecting"===this.currentConnection?.state}isReconnecting(){return"reconnecting"===this.currentConnection?.state}isHost(){return this.currentConnection?.isHost||!1}isClient(){return this.currentConnection?.isClient||!1}}class g extends l{constructor(){super(...arguments),t(this,"logger",new a("CanvasRenderer")),t(this,"config",r.getInstance()),t(this,"canvas",null),t(this,"ctx",null),t(this,"animationFrameId",null),t(this,"frameQueue",[]),t(this,"maxQueueSize",10),t(this,"isRendering",!1),t(this,"stats",{fps:0,frameCount:0,lastFrameTime:0,averageFrameTime:0,droppedFrames:0,totalFrames:0}),t(this,"frameTimes",[]),t(this,"maxFrameTimes",60),t(this,"scaleMode","fit"),t(this,"maintainAspectRatio",!0)}initialize(e){if(this.canvas=e,this.ctx=e.getContext("2d",{alpha:!1,desynchronized:!0,willReadFrequently:!1}),!this.ctx)throw new Error("Failed to get canvas context");this.setupCanvas(),this.startRenderLoop(),this.logger.info("Canvas renderer initialized")}destroy(){this.stopRenderLoop(),this.frameQueue=[],this.canvas=null,this.ctx=null,this.logger.info("Canvas renderer destroyed")}addFrame(e){if(this.frameQueue.push(e),this.frameQueue.length>this.maxQueueSize){this.frameQueue.shift()&&this.stats.droppedFrames++}this.stats.totalFrames++}setScaleMode(e){this.scaleMode=e,this.logger.info(`Scale mode changed to ${e}`)}setMaintainAspectRatio(e){this.maintainAspectRatio=e}getStats(){return{...this.stats}}setupCanvas(){this.canvas&&(this.resizeCanvas(),window.addEventListener("resize",()=>{this.resizeCanvas()}),document.addEventListener("fullscreenchange",()=>{this.resizeCanvas()}))}resizeCanvas(){if(!this.canvas)return;const e=this.canvas.parentElement;if(!e)return;const t=e.getBoundingClientRect();this.canvas.width=t.width,this.canvas.height=t.height,this.logger.debug("Canvas resized",{width:this.canvas.width,height:this.canvas.height})}startRenderLoop(){this.isRendering||(this.isRendering=!0,this.renderLoop())}stopRenderLoop(){this.isRendering=!1,this.animationFrameId&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null)}renderLoop(){if(!this.isRendering)return;const e=performance.now();this.processFrameQueue(),this.updateStats(e),this.animationFrameId=requestAnimationFrame(()=>{this.renderLoop()})}processFrameQueue(){if(!this.ctx||!this.canvas||0===this.frameQueue.length)return;const e=this.frameQueue.shift();if(e)try{this.renderFrame(e),this.stats.frameCount++,this.emit("frameReceived")}catch(t){this.logger.error("Failed to render frame",t),this.stats.droppedFrames++}}async renderFrame(e){if(!this.ctx||!this.canvas)return;let t=null;if(e.data instanceof ImageData?t=e.data:e.data instanceof ArrayBuffer?t=await this.createImageFromArrayBuffer(e.data,e.width,e.height):e.data instanceof Blob&&(t=await this.createImageFromBlob(e.data)),!t)throw new Error("Failed to create image from frame data");this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const{x:n,y:i,width:s,height:a}=this.calculateScaledDimensions(t.width,t.height,this.canvas.width,this.canvas.height);if(t instanceof ImageData){const e=document.createElement("canvas");e.width=t.width,e.height=t.height;e.getContext("2d").putImageData(t,0,0),this.ctx.drawImage(e,n,i,s,a)}else this.ctx.drawImage(t,n,i,s,a)}async createImageFromArrayBuffer(e,t,n){const i=new Blob([e],{type:"image/png"});return createImageBitmap(i)}async createImageFromBlob(e){return createImageBitmap(e)}calculateScaledDimensions(e,t,n,i){const s=e/t,a=n/i;let o=0,r=0,c=n,l=i;switch(this.scaleMode){case"fit":this.maintainAspectRatio&&(s>a?(c=n,l=n/s,r=(i-l)/2):(l=i,c=i*s,o=(n-c)/2));break;case"fill":this.maintainAspectRatio&&(s>a?(l=i,c=i*s,o=(n-c)/2):(c=n,l=n/s,r=(i-l)/2))}return{x:o,y:r,width:c,height:l}}updateStats(e){const t=performance.now()-e;this.frameTimes.push(t),this.frameTimes.length>this.maxFrameTimes&&this.frameTimes.shift();const n=this.frameTimes.reduce((e,t)=>e+t,0);this.stats.averageFrameTime=n/this.frameTimes.length,this.stats.fps=1e3/this.stats.averageFrameTime,this.stats.lastFrameTime=t}setQuality(e){for(this.maxQueueSize={low:5,medium:10,high:15,ultra:20}[e];this.frameQueue.length>this.maxQueueSize;)this.frameQueue.shift(),this.stats.droppedFrames++;this.logger.info(`Quality set to ${e}, queue size: ${this.maxQueueSize}`)}clearCanvas(){this.ctx&&this.canvas&&(this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.frameQueue=[],this.stats.frameCount=0)}takeScreenshot(){return this.canvas?this.canvas.toDataURL("image/png"):""}}class p extends l{constructor(e){super(),t(this,"logger",new a("InputHandler")),t(this,"config",r.getInstance()),t(this,"connectionManager"),t(this,"canvas",null),t(this,"isEnabled",!0),t(this,"isCapturing",!1),t(this,"mousePosition",{x:0,y:0}),t(this,"pressedKeys",new Set),t(this,"pressedButtons",new Set),t(this,"inputQueue",[]),t(this,"maxQueueSize",100),t(this,"processingInterval",null),this.connectionManager=e,this.setupInputProcessing(),this.logger.info("Input handler initialized")}enable(){this.isEnabled=!0,this.logger.info("Input handler enabled")}disable(){this.isEnabled=!1,this.logger.info("Input handler disabled")}attachToCanvas(e){this.canvas=e,this.setupEventListeners(),this.logger.info("Input handler attached to canvas")}detachFromCanvas(){this.removeEventListeners(),this.canvas=null,this.logger.info("Input handler detached from canvas")}startCapture(){this.isCapturing=!0,this.logger.info("Input capture started")}stopCapture(){this.isCapturing=!1,this.logger.info("Input capture stopped")}setupEventListeners(){this.canvas&&(this.canvas.addEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.addEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.addEventListener("click",this.handleClick.bind(this)),this.canvas.addEventListener("dblclick",this.handleDoubleClick.bind(this)),this.canvas.addEventListener("contextmenu",this.handleContextMenu.bind(this)),this.canvas.addEventListener("keydown",this.handleKeyDown.bind(this)),this.canvas.addEventListener("keyup",this.handleKeyUp.bind(this)),this.canvas.addEventListener("keypress",this.handleKeyPress.bind(this)),this.canvas.addEventListener("touchstart",this.handleTouchStart.bind(this)),this.canvas.addEventListener("touchend",this.handleTouchEnd.bind(this)),this.canvas.addEventListener("touchmove",this.handleTouchMove.bind(this)),this.canvas.addEventListener("wheel",this.handleWheel.bind(this)),this.canvas.addEventListener("focus",this.handleFocus.bind(this)),this.canvas.addEventListener("blur",this.handleBlur.bind(this)),this.logger.info("Event listeners attached"))}removeEventListeners(){this.canvas&&(this.canvas.removeEventListener("mousedown",this.handleMouseDown.bind(this)),this.canvas.removeEventListener("mouseup",this.handleMouseUp.bind(this)),this.canvas.removeEventListener("mousemove",this.handleMouseMove.bind(this)),this.canvas.removeEventListener("click",this.handleClick.bind(this)),this.canvas.removeEventListener("dblclick",this.handleDoubleClick.bind(this)),this.canvas.removeEventListener("contextmenu",this.handleContextMenu.bind(this)),this.canvas.removeEventListener("keydown",this.handleKeyDown.bind(this)),this.canvas.removeEventListener("keyup",this.handleKeyUp.bind(this)),this.canvas.removeEventListener("keypress",this.handleKeyPress.bind(this)),this.canvas.removeEventListener("touchstart",this.handleTouchStart.bind(this)),this.canvas.removeEventListener("touchend",this.handleTouchEnd.bind(this)),this.canvas.removeEventListener("touchmove",this.handleTouchMove.bind(this)),this.canvas.removeEventListener("wheel",this.handleWheel.bind(this)),this.canvas.removeEventListener("focus",this.handleFocus.bind(this)),this.canvas.removeEventListener("blur",this.handleBlur.bind(this)),this.logger.info("Event listeners removed"))}handleMouseDown(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"mousedown",button:e.button,x:this.getRelativeX(e.clientX),y:this.getRelativeY(e.clientY),modifiers:this.getModifiers(e)};this.mousePosition={x:t.x,y:t.y},this.pressedButtons.add(e.button),this.addInputEvent("mouse","mousedown",t)}handleMouseUp(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"mouseup",button:e.button,x:this.getRelativeX(e.clientX),y:this.getRelativeY(e.clientY),modifiers:this.getModifiers(e)};this.mousePosition={x:t.x,y:t.y},this.pressedButtons.delete(e.button),this.addInputEvent("mouse","mouseup",t)}handleMouseMove(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t=this.getRelativeX(e.clientX),n=this.getRelativeY(e.clientY),i=t-this.mousePosition.x,s=n-this.mousePosition.y,a={type:"mousemove",button:e.button,x:t,y:n,deltaX:i,deltaY:s,modifiers:this.getModifiers(e)};this.mousePosition={x:t,y:n},this.addInputEvent("mouse","mousemove",a)}handleClick(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"click",button:e.button,x:this.getRelativeX(e.clientX),y:this.getRelativeY(e.clientY),modifiers:this.getModifiers(e)};this.addInputEvent("mouse","click",t)}handleDoubleClick(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"dblclick",button:e.button,x:this.getRelativeX(e.clientX),y:this.getRelativeY(e.clientY),modifiers:this.getModifiers(e)};this.addInputEvent("mouse","dblclick",t)}handleContextMenu(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"contextmenu",button:e.button,x:this.getRelativeX(e.clientX),y:this.getRelativeY(e.clientY),modifiers:this.getModifiers(e)};this.addInputEvent("mouse","contextmenu",t)}handleKeyDown(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"keydown",key:e.key,keyCode:e.keyCode,code:e.code,modifiers:this.getModifiers(e),repeat:e.repeat};this.pressedKeys.add(e.key),this.addInputEvent("keyboard","keydown",t)}handleKeyUp(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"keyup",key:e.key,keyCode:e.keyCode,code:e.code,modifiers:this.getModifiers(e),repeat:e.repeat};this.pressedKeys.delete(e.key),this.addInputEvent("keyboard","keyup",t)}handleKeyPress(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"keypress",key:e.key,keyCode:e.keyCode,code:e.code,modifiers:this.getModifiers(e),repeat:e.repeat};this.addInputEvent("keyboard","keypress",t)}handleTouchStart(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"touchstart",touches:this.getTouchArray(e.touches),changedTouches:this.getTouchArray(e.changedTouches)};this.addInputEvent("touch","touchstart",t)}handleTouchEnd(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"touchend",touches:this.getTouchArray(e.touches),changedTouches:this.getTouchArray(e.changedTouches)};this.addInputEvent("touch","touchend",t)}handleTouchMove(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"touchmove",touches:this.getTouchArray(e.touches),changedTouches:this.getTouchArray(e.changedTouches)};this.addInputEvent("touch","touchmove",t)}handleWheel(e){if(!this.isEnabled||!this.isCapturing)return;e.preventDefault(),e.stopPropagation();const t={type:"wheel",deltaX:e.deltaX,deltaY:e.deltaY,deltaZ:e.deltaZ,deltaMode:e.deltaMode,x:this.getRelativeX(e.clientX),y:this.getRelativeY(e.clientY),modifiers:this.getModifiers(e)};this.addInputEvent("wheel","wheel",t)}handleFocus(e){this.logger.info("Canvas focused")}handleBlur(e){this.logger.info("Canvas blurred")}getRelativeX(e){if(!this.canvas)return e;const t=this.canvas.getBoundingClientRect();return(e-t.left)/t.width*this.canvas.width}getRelativeY(e){if(!this.canvas)return e;const t=this.canvas.getBoundingClientRect();return(e-t.top)/t.height*this.canvas.height}getModifiers(e){return{ctrl:e.ctrlKey,alt:e.altKey,shift:e.shiftKey,meta:e.metaKey}}getTouchArray(e){const t=[];for(let n=0;n<e.length;n++){const i=e[n];t.push({id:i.identifier,x:this.getRelativeX(i.clientX),y:this.getRelativeY(i.clientY),pressure:i.force||1})}return t}addInputEvent(e,t,n){if(!this.isEnabled||!this.isCapturing)return;const i={type:e,action:t,data:n,timestamp:Date.now()};this.inputQueue.push(i),this.inputQueue.length>this.maxQueueSize&&this.inputQueue.shift(),this.emit("input",i)}setupInputProcessing(){this.processingInterval=setInterval(()=>{this.processInputQueue()},16)}processInputQueue(){if(0===this.inputQueue.length)return;const e=[...this.inputQueue];this.inputQueue=[];try{this.connectionManager.sendInputEvents(e)}catch(t){this.logger.error("Failed to send input events",t)}}getPressedKeys(){return Array.from(this.pressedKeys)}getPressedButtons(){return Array.from(this.pressedButtons)}clearPressedKeys(){this.pressedKeys.clear()}clearPressedButtons(){this.pressedButtons.clear()}destroy(){this.disable(),this.stopCapture(),this.detachFromCanvas(),this.processingInterval&&(clearInterval(this.processingInterval),this.processingInterval=null),this.logger.info("Input handler destroyed")}}class v{constructor(e){t(this,"logger",new a("ConnectionPanel")),t(this,"config",r.getInstance()),t(this,"connectionManager"),t(this,"formData"),t(this,"isConnecting",!1),t(this,"errorMessage",""),this.connectionManager=e,this.formData=this.getDefaultFormData(),this.setupEventListeners()}render(){return`\n      <div class="connection-panel">\n        <div class="connection-header">\n          <h2>Connect to Remote Desktop</h2>\n          <p class="connection-subtitle">Enter the connection details to connect to your remote desktop agent</p>\n        </div>\n        \n        <form class="connection-form" id="connection-form">\n          <div class="form-group">\n            <label for="host">Host Address</label>\n            <input \n              type="text" \n              id="host" \n              name="host" \n              value="${this.formData.host}"\n              placeholder="localhost or IP address"\n              required\n            />\n          </div>\n          \n          <div class="form-group">\n            <label for="port">Port</label>\n            <input \n              type="number" \n              id="port" \n              name="port" \n              value="${this.formData.port}"\n              min="1" \n              max="65535" \n              required\n            />\n          </div>\n          \n          <div class="form-group">\n            <label class="checkbox-label">\n              <input \n                type="checkbox" \n                id="secure" \n                name="secure"\n                ${this.formData.secure?"checked":""}\n              />\n              <span class="checkmark"></span>\n              Use secure connection (WSS/HTTPS)\n            </label>\n          </div>\n          \n          <div class="form-group">\n            <label for="token">Authentication Token (Optional)</label>\n            <input \n              type="password" \n              id="token" \n              name="token" \n              value="${this.formData.token||""}"\n              placeholder="Enter authentication token"\n            />\n          </div>\n          \n          <div class="form-group">\n            <label for="quality">Video Quality</label>\n            <select id="quality" name="quality">\n              <option value="low" ${"low"===this.formData.quality?"selected":""}>Low (480p)</option>\n              <option value="medium" ${"medium"===this.formData.quality?"selected":""}>Medium (720p)</option>\n              <option value="high" ${"high"===this.formData.quality?"selected":""}>High (1080p)</option>\n              <option value="ultra" ${"ultra"===this.formData.quality?"selected":""}>Ultra (4K)</option>\n            </select>\n          </div>\n          \n          <div class="form-group">\n            <label class="checkbox-label">\n              <input \n                type="checkbox" \n                id="enableVideo" \n                name="enableVideo"\n                ${this.formData.enableVideo?"checked":""}\n              />\n              <span class="checkmark"></span>\n              Enable video streaming\n            </label>\n          </div>\n          \n          <div class="form-group">\n            <label class="checkbox-label">\n              <input \n                type="checkbox" \n                id="enableAudio" \n                name="enableAudio"\n                ${this.formData.enableAudio?"checked":""}\n              />\n              <span class="checkmark"></span>\n              Enable audio streaming\n            </label>\n          </div>\n          \n          <div class="form-group">\n            <label class="checkbox-label">\n              <input \n                type="checkbox" \n                id="enableClipboard" \n                name="enableClipboard"\n                ${this.formData.enableClipboard?"checked":""}\n              />\n              <span class="checkmark"></span>\n              Enable clipboard sharing\n            </label>\n          </div>\n          \n          <div class="form-group">\n            <label class="checkbox-label">\n              <input \n                type="checkbox" \n                id="enableFileTransfer" \n                name="enableFileTransfer"\n                ${this.formData.enableFileTransfer?"checked":""}\n              />\n              <span class="checkmark"></span>\n              Enable file transfer\n            </label>\n          </div>\n          \n          ${this.errorMessage?`\n            <div class="error-message">\n              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <circle cx="12" cy="12" r="10"/>\n                <line x1="15" y1="9" x2="9" y2="15"/>\n                <line x1="9" y1="9" x2="15" y2="15"/>\n              </svg>\n              ${this.errorMessage}\n            </div>\n          `:""}\n          \n          <div class="form-actions">\n            <button \n              type="submit" \n              class="btn btn-primary connect-btn"\n              ${this.isConnecting?"disabled":""}\n            >\n              ${this.isConnecting?'\n                <div class="spinner"></div>\n                Connecting...\n              ':'\n                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                  <path d="M5 12h14"/>\n                  <path d="m12 5 7 7-7 7"/>\n                </svg>\n                Connect\n              '}\n            </button>\n            \n            <button type="button" class="btn btn-secondary" id="quick-connect-btn">\n              Quick Connect\n            </button>\n          </div>\n        </form>\n        \n        <div class="connection-help">\n          <h3>Quick Start</h3>\n          <ol>\n            <li>Ensure the Real Remote Desktop Agent is running on your target machine</li>\n            <li>Enter the host address (usually localhost or the machine's IP)</li>\n            <li>Use the default port 8080 unless you've configured a different port</li>\n            <li>Click "Connect" to establish the connection</li>\n          </ol>\n          \n          <div class="help-tips">\n            <h4>Tips:</h4>\n            <ul>\n              <li>Use "Quick Connect" to connect with default settings</li>\n              <li>Enable secure connection for encrypted communication</li>\n              <li>Lower quality settings work better on slower connections</li>\n              <li>Clipboard and file transfer require agent support</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    `}getDefaultFormData(){const e=this.config.getDefaultConnection();return{host:e.host,port:e.port,secure:e.secure,token:"",quality:this.config.getQuality(),enableAudio:this.config.get("webrtc").enableAudio,enableVideo:this.config.get("webrtc").enableVideo,enableClipboard:this.config.get("security").enableClipboard,enableFileTransfer:this.config.get("security").enableFileTransfer}}setupEventListeners(){document.addEventListener("submit",e=>{e.target&&"connection-form"===e.target.id&&(e.preventDefault(),this.handleFormSubmit())}),document.addEventListener("click",e=>{e.target&&"quick-connect-btn"===e.target.id&&this.handleQuickConnect()}),document.addEventListener("change",e=>{e.target&&e.target.closest("#connection-form")&&this.handleFormChange(e.target)})}handleFormSubmit(){if(this.isConnecting)return;if(this.errorMessage="",!this.validateForm())return;this.isConnecting=!0,this.updateUI();const e={host:this.formData.host,port:this.formData.port,secure:this.formData.secure,token:this.formData.token||void 0,quality:this.formData.quality,enableAudio:this.formData.enableAudio,enableVideo:this.formData.enableVideo,enableClipboard:this.formData.enableClipboard,enableFileTransfer:this.formData.enableFileTransfer};this.connectionManager.connect(e).then(()=>{this.logger.info("Connection established successfully"),this.saveFormData()}).catch(e=>{this.logger.error("Connection failed",e),this.errorMessage=this.getErrorMessage(e),this.isConnecting=!1,this.updateUI()})}handleQuickConnect(){this.isConnecting=!0,this.updateUI(),this.connectionManager.connect({host:"localhost",port:8080,secure:!1,quality:"medium",enableAudio:!1,enableVideo:!0,enableClipboard:!0,enableFileTransfer:!0}).then(()=>{this.logger.info("Quick connect successful")}).catch(e=>{this.logger.error("Quick connect failed",e),this.errorMessage=this.getErrorMessage(e),this.isConnecting=!1,this.updateUI()})}handleFormChange(e){const t=e.name,n="checkbox"===e.type?e.checked:e.value;switch(t){case"host":this.formData.host=n;break;case"port":this.formData.port=parseInt(n,10);break;case"secure":this.formData.secure=n;break;case"token":this.formData.token=n;break;case"quality":this.formData.quality=n;break;case"enableVideo":this.formData.enableVideo=n;break;case"enableAudio":this.formData.enableAudio=n;break;case"enableClipboard":this.formData.enableClipboard=n;break;case"enableFileTransfer":this.formData.enableFileTransfer=n}}validateForm(){if(!this.formData.host||""===this.formData.host.trim())return this.errorMessage="Host address is required",this.updateUI(),!1;if(this.formData.port<1||this.formData.port>65535)return this.errorMessage="Port must be between 1 and 65535",this.updateUI(),!1;return!!/^([a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$|^localhost$|^(\d{1,3}\.){3}\d{1,3}$/.test(this.formData.host)||(this.errorMessage="Invalid host address format",this.updateUI(),!1)}getErrorMessage(e){return"string"==typeof e?e:e instanceof Error||e&&e.message?e.message:"Connection failed. Please check your settings and try again."}saveFormData(){this.config.setDefaultConnection(this.formData.host,this.formData.port,this.formData.secure),this.config.setQuality(this.formData.quality),this.config.set("webrtc.enableAudio",this.formData.enableAudio),this.config.set("webrtc.enableVideo",this.formData.enableVideo),this.config.set("security.enableClipboard",this.formData.enableClipboard),this.config.set("security.enableFileTransfer",this.formData.enableFileTransfer)}updateUI(){const e=document.getElementById("connection-form");if(e){const t=e.querySelector("#host"),n=e.querySelector("#port"),i=e.querySelector("#secure"),s=e.querySelector("#token"),a=e.querySelector("#quality"),o=e.querySelector("#enableVideo"),r=e.querySelector("#enableAudio"),c=e.querySelector("#enableClipboard"),l=e.querySelector("#enableFileTransfer");t&&(t.value=this.formData.host),n&&(n.value=this.formData.port.toString()),i&&(i.checked=this.formData.secure),s&&(s.value=this.formData.token||""),a&&(a.value=this.formData.quality),o&&(o.checked=this.formData.enableVideo),r&&(r.checked=this.formData.enableAudio),c&&(c.checked=this.formData.enableClipboard),l&&(l.checked=this.formData.enableFileTransfer);const d=e.querySelector(".connect-btn");d&&(d.disabled=this.isConnecting,d.innerHTML=this.isConnecting?'\n          <div class="spinner"></div>\n          Connecting...\n        ':'\n          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n            <path d="M5 12h14"/>\n            <path d="m12 5 7 7-7 7"/>\n          </svg>\n          Connect\n        ')}const t=document.querySelector(".error-message");t&&(this.errorMessage?(t.innerHTML=`\n          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n            <circle cx="12" cy="12" r="10"/>\n            <line x1="15" y1="9" x2="9" y2="15"/>\n            <line x1="9" y1="9" x2="15" y2="15"/>\n          </svg>\n          ${this.errorMessage}\n        `,t.style.display="block"):t.style.display="none")}setFormData(e){this.formData={...this.formData,...e},this.updateUI()}getFormData(){return{...this.formData}}reset(){this.formData=this.getDefaultFormData(),this.errorMessage="",this.isConnecting=!1,this.updateUI()}setError(e){this.errorMessage=e,this.updateUI()}clearError(){this.errorMessage="",this.updateUI()}}class m{constructor(e){t(this,"logger",new a("PerformanceOverlay")),t(this,"connectionManager"),t(this,"stats",{fps:0,latency:0,bitrate:0,packetLoss:0,jitter:0,frameDrops:0,bytesReceived:0,bytesSent:0,cpuUsage:0,memoryUsage:0,resolution:"Unknown",quality:"Unknown"}),t(this,"isVisible",!1),t(this,"updateInterval",null),t(this,"frameCount",0),t(this,"lastFrameTime",0),this.connectionManager=e||new u,this.setupEventListeners()}render(){return`\n      <div class="performance-overlay" id="performance-overlay">\n        <div class="performance-header">\n          <h3>Performance Monitor</h3>\n          <button class="btn btn-icon close-btn" id="close-performance-overlay">\n            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n              <line x1="18" y1="6" x2="6" y2="18"/>\n              <line x1="6" y1="6" x2="18" y2="18"/>\n            </svg>\n          </button>\n        </div>\n        \n        <div class="performance-content">\n          <div class="performance-grid">\n            <div class="performance-card">\n              <div class="card-header">\n                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                  <polyline points="22,12 18,12 15,21 9,3 6,12 2,12"/>\n                </svg>\n                <span>Frame Rate</span>\n              </div>\n              <div class="card-value" id="fps-value">${this.stats.fps.toFixed(1)} FPS</div>\n              <div class="card-bar">\n                <div class="bar-fill" style="width: ${Math.min(this.stats.fps/60*100,100)}%"></div>\n              </div>\n            </div>\n            \n            <div class="performance-card">\n              <div class="card-header">\n                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                  <circle cx="12" cy="12" r="10"/>\n                  <polyline points="12,6 12,12 16,14"/>\n                </svg>\n                <span>Latency</span>\n              </div>\n              <div class="card-value" id="latency-value">${this.stats.latency}ms</div>\n              <div class="card-bar">\n                <div class="bar-fill ${this.getLatencyColor()}" style="width: ${Math.min(this.stats.latency/100*100,100)}%"></div>\n              </div>\n            </div>\n            \n            <div class="performance-card">\n              <div class="card-header">\n                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>\n                  <polyline points="14,2 14,8 20,8"/>\n                  <line x1="16" y1="13" x2="8" y2="13"/>\n                  <line x1="16" y1="17" x2="8" y2="17"/>\n                  <polyline points="10,9 9,9 8,9"/>\n                </svg>\n                <span>Bitrate</span>\n              </div>\n              <div class="card-value" id="bitrate-value">${this.formatBitrate(this.stats.bitrate)}</div>\n              <div class="card-bar">\n                <div class="bar-fill" style="width: ${Math.min(this.stats.bitrate/5e6*100,100)}%"></div>\n              </div>\n            </div>\n            \n            <div class="performance-card">\n              <div class="card-header">\n                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                  <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>\n                  <line x1="12" y1="9" x2="12" y2="13"/>\n                  <line x1="12" y1="17" x2="12.01" y2="17"/>\n                </svg>\n                <span>Packet Loss</span>\n              </div>\n              <div class="card-value" id="packet-loss-value">${this.stats.packetLoss.toFixed(2)}%</div>\n              <div class="card-bar">\n                <div class="bar-fill ${this.getPacketLossColor()}" style="width: ${Math.min(this.stats.packetLoss,100)}%"></div>\n              </div>\n            </div>\n            \n            <div class="performance-card">\n              <div class="card-header">\n                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                  <path d="M22 12h-4l-3 9L9 3l-3 9H2"/>\n                </svg>\n                <span>Jitter</span>\n              </div>\n              <div class="card-value" id="jitter-value">${this.stats.jitter.toFixed(1)}ms</div>\n              <div class="card-bar">\n                <div class="bar-fill ${this.getJitterColor()}" style="width: ${Math.min(this.stats.jitter/50*100,100)}%"></div>\n              </div>\n            </div>\n            \n            <div class="performance-card">\n              <div class="card-header">\n                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>\n                  <circle cx="8.5" cy="8.5" r="1.5"/>\n                  <polyline points="21,15 16,10 5,21"/>\n                </svg>\n                <span>Frame Drops</span>\n              </div>\n              <div class="card-value" id="frame-drops-value">${this.stats.frameDrops}</div>\n              <div class="card-bar">\n                <div class="bar-fill ${this.getFrameDropsColor()}" style="width: ${Math.min(this.stats.frameDrops/10*100,100)}%"></div>\n              </div>\n            </div>\n          </div>\n          \n          <div class="performance-details">\n            <div class="detail-row">\n              <span class="detail-label">Resolution:</span>\n              <span class="detail-value" id="resolution-value">${this.stats.resolution}</span>\n            </div>\n            <div class="detail-row">\n              <span class="detail-label">Quality:</span>\n              <span class="detail-value" id="quality-value">${this.stats.quality}</span>\n            </div>\n            <div class="detail-row">\n              <span class="detail-label">Data Received:</span>\n              <span class="detail-value" id="bytes-received-value">${this.formatBytes(this.stats.bytesReceived)}</span>\n            </div>\n            <div class="detail-row">\n              <span class="detail-label">Data Sent:</span>\n              <span class="detail-value" id="bytes-sent-value">${this.formatBytes(this.stats.bytesSent)}</span>\n            </div>\n            <div class="detail-row">\n              <span class="detail-label">CPU Usage:</span>\n              <span class="detail-value" id="cpu-usage-value">${this.stats.cpuUsage.toFixed(1)}%</span>\n            </div>\n            <div class="detail-row">\n              <span class="detail-label">Memory Usage:</span>\n              <span class="detail-value" id="memory-usage-value">${this.formatBytes(this.stats.memoryUsage)}</span>\n            </div>\n          </div>\n          \n          <div class="performance-actions">\n            <button class="btn btn-sm btn-primary" id="export-stats-btn">\n              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>\n                <polyline points="7,10 12,15 17,10"/>\n                <line x1="12" y1="15" x2="12" y2="3"/>\n              </svg>\n              Export Stats\n            </button>\n            <button class="btn btn-sm btn-secondary" id="reset-stats-btn">\n              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <polyline points="1,4 1,10 7,10"/>\n                <path d="M3.51,15a9,9,0,1,0,2.13-9.36L1,10"/>\n              </svg>\n              Reset Stats\n            </button>\n          </div>\n        </div>\n      </div>\n    `}show(){this.isVisible=!0,this.startUpdates(),this.logger.info("Performance overlay shown")}hide(){this.isVisible=!1,this.stopUpdates(),this.logger.info("Performance overlay hidden")}updateFrameRate(){const e=performance.now();if(this.frameCount++,this.lastFrameTime>0){const t=e-this.lastFrameTime;t>=1e3&&(this.stats.fps=1e3*this.frameCount/t,this.frameCount=0,this.lastFrameTime=e,this.updateUI())}else this.lastFrameTime=e}updateStats(e){this.stats={...this.stats,...e},this.updateUI()}setupEventListeners(){document.addEventListener("click",e=>{e.target&&"close-performance-overlay"===e.target.id&&this.hide()}),document.addEventListener("click",e=>{e.target&&"export-stats-btn"===e.target.id&&this.exportStats()}),document.addEventListener("click",e=>{e.target&&"reset-stats-btn"===e.target.id&&this.resetStats()})}startUpdates(){this.updateInterval&&clearInterval(this.updateInterval),this.updateInterval=setInterval(()=>{this.updateFromConnectionManager()},1e3)}stopUpdates(){this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=null)}updateFromConnectionManager(){try{const e=this.connectionManager.getConnectionInfo();e&&(this.stats.latency=e.latency,this.stats.bytesReceived=e.bytesReceived,this.stats.bytesSent=e.bytesSent,this.stats.framesReceived=e.framesReceived,this.stats.framesDropped=e.framesDropped);const t=this.connectionManager.getWebRTCService().getStats();t&&(this.stats.bitrate=t.bitrate,this.stats.packetLoss=t.packetLoss,this.stats.jitter=t.jitter),this.updateSystemStats(),this.updateUI()}catch(e){this.logger.error("Failed to update performance stats",e)}}updateSystemStats(){if("memory"in performance){const e=performance.memory;this.stats.memoryUsage=e.usedJSHeapSize}this.stats.cpuUsage=20*Math.random()+5}updateUI(){if(!this.isVisible)return;const e={"fps-value":`${this.stats.fps.toFixed(1)} FPS`,"latency-value":`${this.stats.latency}ms`,"bitrate-value":this.formatBitrate(this.stats.bitrate),"packet-loss-value":`${this.stats.packetLoss.toFixed(2)}%`,"jitter-value":`${this.stats.jitter.toFixed(1)}ms`,"frame-drops-value":this.stats.frameDrops.toString(),"resolution-value":this.stats.resolution,"quality-value":this.stats.quality,"bytes-received-value":this.formatBytes(this.stats.bytesReceived),"bytes-sent-value":this.formatBytes(this.stats.bytesSent),"cpu-usage-value":`${this.stats.cpuUsage.toFixed(1)}%`,"memory-usage-value":this.formatBytes(this.stats.memoryUsage)};for(const[t,n]of Object.entries(e)){const e=document.getElementById(t);e&&(e.textContent=n)}this.updateProgressBars()}updateProgressBars(){const e=document.querySelector("#fps-value")?.parentElement?.querySelector(".bar-fill");e&&(e.style.width=`${Math.min(this.stats.fps/60*100,100)}%`);const t=document.querySelector("#latency-value")?.parentElement?.querySelector(".bar-fill");t&&(t.style.width=`${Math.min(this.stats.latency/100*100,100)}%`,t.className=`bar-fill ${this.getLatencyColor()}`);const n=document.querySelector("#bitrate-value")?.parentElement?.querySelector(".bar-fill");n&&(n.style.width=`${Math.min(this.stats.bitrate/5e6*100,100)}%`);const i=document.querySelector("#packet-loss-value")?.parentElement?.querySelector(".bar-fill");i&&(i.style.width=`${Math.min(this.stats.packetLoss,100)}%`,i.className=`bar-fill ${this.getPacketLossColor()}`);const s=document.querySelector("#jitter-value")?.parentElement?.querySelector(".bar-fill");s&&(s.style.width=`${Math.min(this.stats.jitter/50*100,100)}%`,s.className=`bar-fill ${this.getJitterColor()}`);const a=document.querySelector("#frame-drops-value")?.parentElement?.querySelector(".bar-fill");a&&(a.style.width=`${Math.min(this.stats.frameDrops/10*100,100)}%`,a.className=`bar-fill ${this.getFrameDropsColor()}`)}getLatencyColor(){return this.stats.latency<50?"good":this.stats.latency<100?"warning":"error"}getPacketLossColor(){return this.stats.packetLoss<1?"good":this.stats.packetLoss<5?"warning":"error"}getJitterColor(){return this.stats.jitter<10?"good":this.stats.jitter<25?"warning":"error"}getFrameDropsColor(){return this.stats.frameDrops<5?"good":this.stats.frameDrops<20?"warning":"error"}formatBitrate(e){return e<1e3?`${e} bps`:e<1e6?`${(e/1e3).toFixed(1)} Kbps`:`${(e/1e6).toFixed(1)} Mbps`}formatBytes(e){return e<1024?`${e} B`:e<1048576?`${(e/1024).toFixed(1)} KB`:e<1073741824?`${(e/1048576).toFixed(1)} MB`:`${(e/1073741824).toFixed(1)} GB`}exportStats(){const e={timestamp:(new Date).toISOString(),stats:this.stats,connectionInfo:this.connectionManager.getConnectionInfo()},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),i=document.createElement("a");i.href=n,i.download=`performance-stats-${(new Date).toISOString().slice(0,19).replace(/:/g,"-")}.json`,document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(n),this.logger.info("Performance stats exported")}resetStats(){this.stats={fps:0,latency:0,bitrate:0,packetLoss:0,jitter:0,frameDrops:0,bytesReceived:0,bytesSent:0,cpuUsage:0,memoryUsage:0,resolution:"Unknown",quality:"Unknown"},this.frameCount=0,this.lastFrameTime=0,this.updateUI(),this.logger.info("Performance stats reset")}getStats(){return{...this.stats}}setResolution(e){this.stats.resolution=e,this.updateUI()}setQuality(e){this.stats.quality=e,this.updateUI()}destroy(){this.hide(),this.logger.info("Performance overlay destroyed")}}class f{constructor(){t(this,"logger",new a("SettingsPanel")),t(this,"config",r.getInstance()),t(this,"sections",[]),t(this,"isVisible",!1),t(this,"hasUnsavedChanges",!1),this.initializeSections(),this.setupEventListeners()}render(){return`\n      <div class="settings-panel" id="settings-panel">\n        <div class="settings-header">\n          <h2>Settings</h2>\n          <button class="btn btn-icon close-btn" id="close-settings-btn">\n            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n              <line x1="18" y1="6" x2="6" y2="18"/>\n              <line x1="6" y1="6" x2="18" y2="18"/>\n            </svg>\n          </button>\n        </div>\n        \n        <div class="settings-content">\n          <div class="settings-sidebar">\n            <nav class="settings-nav">\n              ${this.sections.map(e=>`\n                <button class="nav-item" data-section="${e.id}">\n                  <span class="nav-title">${e.title}</span>\n                  <span class="nav-description">${e.description}</span>\n                </button>\n              `).join("")}\n            </nav>\n          </div>\n          \n          <div class="settings-main">\n            ${this.sections.map(e=>`\n              <div class="settings-section" id="section-${e.id}" style="display: ${"connection"===e.id?"block":"none"}">\n                <div class="section-header">\n                  <h3>${e.title}</h3>\n                  <p class="section-description">${e.description}</p>\n                </div>\n                \n                <div class="section-content">\n                  ${e.settings.map(e=>this.renderSetting(e)).join("")}\n                </div>\n              </div>\n            `).join("")}\n          </div>\n        </div>\n        \n        <div class="settings-footer">\n          <div class="footer-actions">\n            <button class="btn btn-secondary" id="reset-settings-btn">\n              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <polyline points="1,4 1,10 7,10"/>\n                <path d="M3.51,15a9,9,0,1,0,2.13-9.36L1,10"/>\n              </svg>\n              Reset to Defaults\n            </button>\n            <button class="btn btn-outline" id="export-settings-btn">\n              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>\n                <polyline points="7,10 12,15 17,10"/>\n                <line x1="12" y1="15" x2="12" y2="3"/>\n              </svg>\n              Export Settings\n            </button>\n            <button class="btn btn-outline" id="import-settings-btn">\n              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>\n                <polyline points="17,8 12,3 7,8"/>\n                <line x1="12" y1="3" x2="12" y2="15"/>\n              </svg>\n              Import Settings\n            </button>\n          </div>\n          \n          <div class="footer-buttons">\n            <button class="btn btn-secondary" id="cancel-settings-btn">Cancel</button>\n            <button class="btn btn-primary" id="save-settings-btn" ${this.hasUnsavedChanges?"":"disabled"}>\n              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n                <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>\n                <polyline points="17,21 17,13 7,13 7,21"/>\n                <polyline points="7,3 7,8 15,8"/>\n              </svg>\n              Save Changes\n            </button>\n          </div>\n        </div>\n        \n        <input type="file" id="import-settings-file" accept=".json" style="display: none;">\n      </div>\n    `}show(){this.isVisible=!0,this.hasUnsavedChanges=!1,this.updateUI(),this.logger.info("Settings panel shown")}hide(){this.isVisible=!1,this.logger.info("Settings panel hidden")}initializeSections(){this.sections=[{id:"connection",title:"Connection",description:"Configure connection settings and defaults",settings:[{id:"defaultHost",type:"text",label:"Default Host",description:"Default host address for connections",value:this.config.get("connection.defaultHost"),placeholder:"localhost"},{id:"defaultPort",type:"number",label:"Default Port",description:"Default port number for connections",value:this.config.get("connection.defaultPort"),min:1,max:65535},{id:"defaultSecure",type:"checkbox",label:"Use Secure Connection by Default",description:"Enable WSS/HTTPS by default",value:this.config.get("connection.defaultSecure")},{id:"reconnectAttempts",type:"number",label:"Reconnection Attempts",description:"Maximum number of reconnection attempts",value:this.config.get("connection.reconnectAttempts"),min:1,max:20},{id:"reconnectDelay",type:"number",label:"Reconnection Delay (ms)",description:"Delay between reconnection attempts",value:this.config.get("connection.reconnectDelay"),min:100,max:1e4,step:100}]},{id:"display",title:"Display",description:"Configure video quality and display settings",settings:[{id:"defaultQuality",type:"select",label:"Default Quality",description:"Default video quality setting",value:this.config.get("display.defaultQuality"),options:[{value:"low",label:"Low (480p)"},{value:"medium",label:"Medium (720p)"},{value:"high",label:"High (1080p)"},{value:"ultra",label:"Ultra (4K)"}]},{id:"defaultScaleMode",type:"select",label:"Default Scale Mode",description:"How the remote desktop should be scaled",value:this.config.get("display.defaultScaleMode"),options:[{value:"fit",label:"Fit to Screen"},{value:"fill",label:"Fill Screen"},{value:"stretch",label:"Stretch"}]},{id:"maintainAspectRatio",type:"checkbox",label:"Maintain Aspect Ratio",description:"Keep the original aspect ratio when scaling",value:this.config.get("display.maintainAspectRatio")},{id:"enableHardwareAcceleration",type:"checkbox",label:"Enable Hardware Acceleration",description:"Use GPU acceleration when available",value:this.config.get("display.enableHardwareAcceleration")},{id:"maxFrameQueueSize",type:"number",label:"Max Frame Queue Size",description:"Maximum number of frames to buffer",value:this.config.get("display.maxFrameQueueSize"),min:1,max:50}]},{id:"webrtc",title:"WebRTC",description:"Configure WebRTC connection settings",settings:[{id:"maxBitrate",type:"number",label:"Maximum Bitrate (bps)",description:"Maximum video bitrate in bits per second",value:this.config.get("webrtc.maxBitrate"),min:1e5,max:1e7,step:1e5},{id:"maxFramerate",type:"number",label:"Maximum Framerate",description:"Maximum video framerate",value:this.config.get("webrtc.maxFramerate"),min:1,max:60},{id:"enableAudio",type:"checkbox",label:"Enable Audio",description:"Enable audio streaming",value:this.config.get("webrtc.enableAudio")},{id:"enableVideo",type:"checkbox",label:"Enable Video",description:"Enable video streaming",value:this.config.get("webrtc.enableVideo")}]},{id:"security",title:"Security",description:"Configure security and privacy settings",settings:[{id:"enableClipboard",type:"checkbox",label:"Enable Clipboard Sharing",description:"Allow clipboard synchronization between client and server",value:this.config.get("security.enableClipboard")},{id:"enableFileTransfer",type:"checkbox",label:"Enable File Transfer",description:"Allow file transfer between client and server",value:this.config.get("security.enableFileTransfer")},{id:"enableAudioCapture",type:"checkbox",label:"Enable Audio Capture",description:"Allow audio capture from the remote system",value:this.config.get("security.enableAudioCapture")},{id:"enablePrinting",type:"checkbox",label:"Enable Printing",description:"Allow printing from the remote session",value:this.config.get("security.enablePrinting")},{id:"maxFileSize",type:"number",label:"Maximum File Size (bytes)",description:"Maximum file size for transfers",value:this.config.get("security.maxFileSize"),min:1024,max:1073741824,step:1024}]},{id:"ui",title:"Interface",description:"Configure user interface settings",settings:[{id:"theme",type:"select",label:"Theme",description:"Application theme",value:this.config.get("ui.theme"),options:[{value:"light",label:"Light"},{value:"dark",label:"Dark"},{value:"auto",label:"Auto (System)"}]},{id:"showPerformanceOverlay",type:"checkbox",label:"Show Performance Overlay",description:"Show performance statistics overlay",value:this.config.get("ui.showPerformanceOverlay")},{id:"showConnectionInfo",type:"checkbox",label:"Show Connection Info",description:"Display connection information in the interface",value:this.config.get("ui.showConnectionInfo")},{id:"enableKeyboardShortcuts",type:"checkbox",label:"Enable Keyboard Shortcuts",description:"Enable keyboard shortcuts for common actions",value:this.config.get("ui.enableKeyboardShortcuts")},{id:"enableContextMenu",type:"checkbox",label:"Enable Context Menu",description:"Show context menu on right-click",value:this.config.get("ui.enableContextMenu")},{id:"language",type:"select",label:"Language",description:"Application language",value:this.config.get("ui.language"),options:[{value:"en",label:"English"},{value:"es",label:"Español"},{value:"fr",label:"Français"},{value:"de",label:"Deutsch"},{value:"ja",label:"日本語"},{value:"zh",label:"中文"}]}]},{id:"logging",title:"Logging",description:"Configure logging and debugging settings",settings:[{id:"level",type:"select",label:"Log Level",description:"Minimum log level to display",value:this.config.get("logging.level"),options:[{value:"debug",label:"Debug"},{value:"info",label:"Info"},{value:"warn",label:"Warning"},{value:"error",label:"Error"}]},{id:"enableConsole",type:"checkbox",label:"Enable Console Logging",description:"Log messages to browser console",value:this.config.get("logging.enableConsole")},{id:"enableRemote",type:"checkbox",label:"Enable Remote Logging",description:"Send logs to remote server",value:this.config.get("logging.enableRemote")},{id:"maxLogEntries",type:"number",label:"Max Log Entries",description:"Maximum number of log entries to keep in memory",value:this.config.get("logging.maxLogEntries"),min:100,max:1e4,step:100}]}]}renderSetting(e){const t=`setting-${e.id}`;switch(e.type){case"text":return`\n          <div class="setting-item">\n            <label for="${t}" class="setting-label">${e.label}</label>\n            <input \n              type="text" \n              id="${t}" \n              value="${e.value}" \n              placeholder="${e.placeholder||""}"\n              class="setting-input"\n              data-setting="${e.id}"\n            />\n            ${e.description?`<p class="setting-description">${e.description}</p>`:""}\n          </div>\n        `;case"number":return`\n          <div class="setting-item">\n            <label for="${t}" class="setting-label">${e.label}</label>\n            <input \n              type="number" \n              id="${t}" \n              value="${e.value}" \n              min="${e.min||""}" \n              max="${e.max||""}" \n              step="${e.step||""}"\n              class="setting-input"\n              data-setting="${e.id}"\n            />\n            ${e.description?`<p class="setting-description">${e.description}</p>`:""}\n          </div>\n        `;case"select":return`\n          <div class="setting-item">\n            <label for="${t}" class="setting-label">${e.label}</label>\n            <select id="${t}" class="setting-input" data-setting="${e.id}">\n              ${e.options?.map(t=>`\n                <option value="${t.value}" ${t.value===e.value?"selected":""}>\n                  ${t.label}\n                </option>\n              `).join("")}\n            </select>\n            ${e.description?`<p class="setting-description">${e.description}</p>`:""}\n          </div>\n        `;case"checkbox":return`\n          <div class="setting-item">\n            <label class="setting-label checkbox-label">\n              <input \n                type="checkbox" \n                id="${t}" \n                ${e.value?"checked":""}\n                class="setting-input"\n                data-setting="${e.id}"\n              />\n              <span class="checkmark"></span>\n              ${e.label}\n            </label>\n            ${e.description?`<p class="setting-description">${e.description}</p>`:""}\n          </div>\n        `;case"textarea":return`\n          <div class="setting-item">\n            <label for="${t}" class="setting-label">${e.label}</label>\n            <textarea \n              id="${t}" \n              placeholder="${e.placeholder||""}"\n              class="setting-input"\n              data-setting="${e.id}"\n            >${e.value}</textarea>\n            ${e.description?`<p class="setting-description">${e.description}</p>`:""}\n          </div>\n        `;default:return""}}setupEventListeners(){document.addEventListener("click",e=>{const t=e.target;t.classList.contains("nav-item")&&this.switchSection(t.dataset.section),"close-settings-btn"!==t.id&&"cancel-settings-btn"!==t.id||this.hide(),"save-settings-btn"===t.id&&this.saveSettings(),"reset-settings-btn"===t.id&&this.resetSettings(),"export-settings-btn"===t.id&&this.exportSettings(),"import-settings-btn"===t.id&&this.importSettings()}),document.addEventListener("change",e=>{const t=e.target;t.classList.contains("setting-input")&&this.handleSettingChange(t)}),document.addEventListener("change",e=>{const t=e.target;"import-settings-file"===t.id&&this.handleFileImport(t)})}switchSection(e){document.querySelectorAll(".settings-section").forEach(e=>{e.style.display="none"});const t=document.getElementById(`section-${e}`);t&&(t.style.display="block"),document.querySelectorAll(".nav-item").forEach(e=>{e.classList.remove("active")});const n=document.querySelector(`[data-section="${e}"]`);n&&n.classList.add("active")}handleSettingChange(e){const t=e.dataset.setting;if(!t)return;let n;n="checkbox"===e.type?e.checked:"number"===e.type?parseFloat(e.value):e.value;for(const i of this.sections){const e=i.settings.find(e=>e.id===t);if(e){e.value=n;break}}this.hasUnsavedChanges=!0,this.updateUI()}saveSettings(){try{for(const e of this.sections)for(const t of e.settings){const n=`${e.id}.${t.id}`;this.config.set(n,t.value)}this.hasUnsavedChanges=!1,this.updateUI(),this.logger.info("Settings saved successfully"),this.showMessage("Settings saved successfully","success")}catch(e){this.logger.error("Failed to save settings",e),this.showMessage("Failed to save settings","error")}}resetSettings(){confirm("Are you sure you want to reset all settings to their default values?")&&(this.config.reset(),this.initializeSections(),this.hasUnsavedChanges=!1,this.updateUI(),this.logger.info("Settings reset to defaults"),this.showMessage("Settings reset to defaults","success"))}exportSettings(){try{const e={version:"1.0.0",timestamp:(new Date).toISOString(),settings:this.config.export()},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),i=document.createElement("a");i.href=n,i.download=`real-remote-desktop-settings-${(new Date).toISOString().slice(0,19).replace(/:/g,"-")}.json`,document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(n),this.logger.info("Settings exported successfully"),this.showMessage("Settings exported successfully","success")}catch(e){this.logger.error("Failed to export settings",e),this.showMessage("Failed to export settings","error")}}importSettings(){const e=document.getElementById("import-settings-file");e&&e.click()}handleFileImport(e){const t=e.files?.[0];if(!t)return;const n=new FileReader;n.onload=e=>{try{const t=JSON.parse(e.target?.result);this.config.import(t.settings),this.initializeSections(),this.hasUnsavedChanges=!1,this.updateUI(),this.logger.info("Settings imported successfully"),this.showMessage("Settings imported successfully","success")}catch(t){this.logger.error("Failed to import settings",t),this.showMessage("Failed to import settings. Invalid file format.","error")}},n.readAsText(t),e.value=""}updateUI(){const e=document.getElementById("save-settings-btn");e&&(e.disabled=!this.hasUnsavedChanges)}showMessage(e,t){const n=document.createElement("div");n.className=`message message-${t}`,n.textContent=e;const i=document.getElementById("settings-panel");i&&(i.appendChild(n),setTimeout(()=>{n.parentNode&&n.parentNode.removeChild(n)},3e3))}getSettings(){const e={};for(const t of this.sections){e[t.id]={};for(const n of t.settings)e[t.id][n.id]=n.value}return e}setSettings(e){for(const[t,n]of Object.entries(e)){const e=this.sections.find(e=>e.id===t);if(e)for(const[t,i]of Object.entries(n)){const n=e.settings.find(e=>e.id===t);n&&(n.value=i)}}this.hasUnsavedChanges=!0,this.updateUI()}destroy(){this.hide(),this.logger.info("Settings panel destroyed")}}class b{constructor(){t(this,"logger",new a("FileTransferPanel")),t(this,"container",null),t(this,"isVisible",!1),this.logger.info("File Transfer Panel initialized")}mount(e){if(this.container=document.querySelector(e),!this.container)throw new Error(`Element not found: ${e}`);this.render(),this.logger.info("File Transfer Panel mounted")}show(){this.isVisible=!0,this.updateUI()}hide(){this.isVisible=!1,this.updateUI()}toggle(){this.isVisible=!this.isVisible,this.updateUI()}render(){this.container&&(this.container.innerHTML=`\n      <div class="file-transfer-panel ${this.isVisible?"visible":""}">\n        <div class="file-transfer-header">\n          <h3>File Transfer</h3>\n          <button class="close-btn" onclick="this.hide()">×</button>\n        </div>\n        \n        <div class="file-transfer-content">\n          <div class="upload-section">\n            <div class="drop-zone" id="drop-zone">\n              <div class="drop-zone-content">\n                <i class="upload-icon">📁</i>\n                <p>Drag and drop files here to upload</p>\n                <p>or click to browse</p>\n                <input type="file" id="file-input" multiple style="display: none;">\n              </div>\n            </div>\n            \n            <div class="upload-list" id="upload-list">\n              <div class="empty-state">No uploads yet</div>\n            </div>\n          </div>\n          \n          <div class="download-section">\n            <div class="download-list" id="download-list">\n              <div class="empty-state">No downloads yet</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `,this.setupEventHandlers())}setupEventHandlers(){const e=document.getElementById("drop-zone"),t=document.getElementById("file-input");e&&(e.addEventListener("click",()=>{t&&t.click()}),e.addEventListener("dragover",t=>{t.preventDefault(),e.classList.add("drag-over")}),e.addEventListener("drop",t=>{t.preventDefault(),e.classList.remove("drag-over");const n=Array.from(t.dataTransfer?.files||[]);this.handleFiles(n)}),e.addEventListener("dragleave",()=>{e.classList.remove("drag-over")})),t&&t.addEventListener("change",e=>{const t=e.target;t.files&&this.handleFiles(Array.from(t.files))})}handleFiles(e){e.forEach(e=>{this.logger.info(`File selected for upload: ${e.name} (${this.formatFileSize(e.size)})`),this.addUploadItem(e)})}addUploadItem(e){const t=document.getElementById("upload-list");if(!t)return;const n=document.createElement("div");n.className="upload-item",n.innerHTML=`\n      <div class="upload-info">\n        <div class="upload-name">${e.name}</div>\n        <div class="upload-size">${this.formatFileSize(e.size)}</div>\n      </div>\n      <div class="upload-progress">\n        <div class="progress-bar">\n          <div class="progress-fill" style="width: 0%"></div>\n        </div>\n        <div class="progress-text">0%</div>\n      </div>\n      <div class="upload-status">\n        <span class="status-badge pending">Pending</span>\n        <button class="action-btn remove" onclick="this.removeUpload(this)">×</button>\n      </div>\n    `,t.appendChild(n),this.simulateUpload(n)}simulateUpload(e){const t=e.querySelector(".progress-fill"),n=e.querySelector(".progress-text"),i=e.querySelector(".status-badge");i.textContent="Uploading",i.className="status-badge uploading";let s=0;const a=setInterval(()=>{s+=10*Math.random(),s>=100&&(s=100,i.textContent="Completed",i.className="status-badge completed",clearInterval(a)),t.style.width=`${s}%`,n.textContent=`${s.toFixed(1)}%`},100)}removeUpload(e){const t=e.closest(".upload-item");t&&t.remove()}formatFileSize(e){if(0===e)return"0 B";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["B","KB","MB","GB","TB"][t]}updateUI(){if(this.container){const e=this.container.querySelector(".file-transfer-panel");e&&e.classList.toggle("visible",this.isVisible)}}}class y{constructor(){t(this,"logger",new a("DeviceRedirectionPanel")),t(this,"container",null),t(this,"isVisible",!1),t(this,"devices",[]),this.logger.info("Device Redirection Panel initialized"),this.initializeDevices()}initializeDevices(){this.devices=[{id:"usb-1",name:"USB Device 1",type:"usb",connected:!1,enabled:!1},{id:"printer-1",name:"Default Printer",type:"printer",connected:!1,enabled:!1},{id:"smartcard-1",name:"Smart Card Reader",type:"smartcard",connected:!1,enabled:!1},{id:"camera-1",name:"Web Camera",type:"camera",connected:!1,enabled:!1},{id:"mic-1",name:"Microphone",type:"microphone",connected:!1,enabled:!1},{id:"speaker-1",name:"Speakers",type:"speaker",connected:!1,enabled:!1}]}mount(e){if(this.container=document.querySelector(e),!this.container)throw new Error(`Element not found: ${e}`);this.render(),this.logger.info("Device Redirection Panel mounted")}show(){this.isVisible=!0,this.updateUI()}hide(){this.isVisible=!1,this.updateUI()}toggle(){this.isVisible=!this.isVisible,this.updateUI()}render(){this.container&&(this.container.innerHTML=`\n      <div class="device-redirection-panel ${this.isVisible?"visible":""}">\n        <div class="device-redirection-header">\n          <h3>Device Redirection</h3>\n          <button class="close-btn" onclick="this.hide()">×</button>\n        </div>\n        \n        <div class="device-redirection-content">\n          <div class="device-categories">\n            <div class="category usb-devices">\n              <h4>USB Devices</h4>\n              <div class="device-list" id="usb-devices">\n                ${this.renderDeviceCategory("usb")}\n              </div>\n            </div>\n            \n            <div class="category audio-devices">\n              <h4>Audio Devices</h4>\n              <div class="device-list" id="audio-devices">\n                ${this.renderDeviceCategory("microphone")}\n                ${this.renderDeviceCategory("speaker")}\n              </div>\n            </div>\n            \n            <div class="category peripheral-devices">\n              <h4>Peripheral Devices</h4>\n              <div class="device-list" id="peripheral-devices">\n                ${this.renderDeviceCategory("printer")}\n                ${this.renderDeviceCategory("smartcard")}\n                ${this.renderDeviceCategory("camera")}\n              </div>\n            </div>\n          </div>\n          \n          <div class="device-controls">\n            <button class="btn btn-primary" onclick="this.scanForDevices()">\n              <i class="icon">🔍</i>\n              Scan for Devices\n            </button>\n            <button class="btn btn-secondary" onclick="this.refreshDevices()">\n              <i class="icon">🔄</i>\n              Refresh\n            </button>\n          </div>\n        </div>\n      </div>\n    `,this.setupEventHandlers())}renderDeviceCategory(e){const t=this.devices.filter(t=>t.type===e);return 0===t.length?'<div class="empty-state">No devices found</div>':t.map(e=>`\n      <div class="device-item ${e.connected?"connected":""}" data-device-id="${e.id}">\n        <div class="device-info">\n          <div class="device-icon">${this.getDeviceIcon(e.type)}</div>\n          <div class="device-details">\n            <div class="device-name">${e.name}</div>\n            <div class="device-status">${e.connected?"Connected":"Disconnected"}</div>\n          </div>\n        </div>\n        \n        <div class="device-controls">\n          <label class="toggle-switch">\n            <input type="checkbox" \n                   ${e.enabled?"checked":""} \n                   onchange="this.toggleDevice('${e.id}', this.checked)">\n            <span class="slider"></span>\n          </label>\n        </div>\n      </div>\n    `).join("")}getDeviceIcon(e){return{usb:"🔌",printer:"🖨️",smartcard:"💳",camera:"📷",microphone:"🎤",speaker:"🔊"}[e]||"📱"}setupEventHandlers(){document.querySelectorAll('input[type="checkbox"]').forEach(e=>{e.addEventListener("change",e=>{const t=e.target,n=t.closest(".device-item")?.dataset.deviceId;n&&this.toggleDevice(n,t.checked)})})}toggleDevice(e,t){const n=this.devices.find(t=>t.id===e);n&&(n.enabled=t,this.logger.info(`${t?"Enabled":"Disabled"} device: ${n.name}`),t?setTimeout(()=>{n.connected=!0,this.updateDeviceUI(e)},1e3):(n.connected=!1,this.updateDeviceUI(e)))}updateDeviceUI(e){const t=document.querySelector(`[data-device-id="${e}"]`);if(t){const n=this.devices.find(t=>t.id===e);if(n){t.classList.toggle("connected",n.connected);const e=t.querySelector(".device-status");e&&(e.textContent=n.connected?"Connected":"Disconnected")}}}scanForDevices(){this.logger.info("Scanning for devices..."),setTimeout(()=>{const e=[{id:"usb-2",name:"USB Flash Drive",type:"usb",connected:!0,enabled:!1},{id:"printer-2",name:"Network Printer",type:"printer",connected:!0,enabled:!1},{id:"camera-2",name:"HD Webcam",type:"camera",connected:!0,enabled:!1}];this.devices.push(...e),this.render(),this.logger.info(`Found ${e.length} new devices`)},2e3)}refreshDevices(){this.logger.info("Refreshing device list..."),this.render()}updateUI(){if(this.container){const e=this.container.querySelector(".device-redirection-panel");e&&e.classList.toggle("visible",this.isVisible)}}getConnectedDevices(){return this.devices.filter(e=>e.connected&&e.enabled)}getDeviceById(e){return this.devices.find(t=>t.id===e)}}class w{constructor(e){t(this,"logger",new a("App")),t(this,"config",r.getInstance()),t(this,"connectionManager"),t(this,"canvasRenderer"),t(this,"inputHandler"),t(this,"connectionPanel"),t(this,"performanceOverlay"),t(this,"settingsPanel"),t(this,"fileTransferPanel"),t(this,"deviceRedirectionPanel"),t(this,"appElement",null),t(this,"state"),this.connectionManager=e,this.state=this.getInitialState(),this.setupComponents(),this.setupEventListeners(),this.applyTheme(),this.logger.info("Agentless App initialized")}mount(e){if(this.appElement=document.querySelector(e),!this.appElement)throw new Error(`Element not found: ${e}`);this.render(),this.logger.info("App mounted")}getInitialState(){return{isConnected:!1,isConnecting:!1,isHost:!1,isClient:!1,connectionInfo:null,showSettings:!1,showPerformanceOverlay:!1,showFileTransfer:!1,showDeviceRedirection:!1,theme:this.config.get("ui").theme,quality:this.config.get("display").defaultQuality,connectionCode:"",screenShareActive:!1}}setupComponents(){this.canvasRenderer=new g,this.inputHandler=new p(this.connectionManager),this.connectionPanel=new v(this.connectionManager),this.performanceOverlay=new m,this.settingsPanel=new f,this.fileTransferPanel=new b,this.deviceRedirectionPanel=new y}setupEventListeners(){this.connectionManager.on("hostSessionStarted",e=>{this.state.connectionCode=e.connectionCode,this.state.isHost=!0,this.state.isClient=!1,this.updateUI(),this.logger.info("Host session started",e)}),this.connectionManager.on("connected",e=>{this.state.isConnected=!0,this.state.isConnecting=!1,this.state.connectionInfo=e,this.state.isHost=e.isHost,this.state.isClient=e.isClient,this.updateUI(),this.logger.info("Connection established")}),this.connectionManager.on("disconnected",e=>{this.state.isConnected=!1,this.state.isConnecting=!1,this.state.connectionInfo=e,this.state.screenShareActive=!1,this.updateUI(),this.logger.info("Connection lost")}),this.connectionManager.on("connectionStateChanged",e=>{this.state.connectionInfo=e,this.state.isConnecting=e.state===h.CONNECTING,this.updateUI()}),this.connectionManager.on("connectionFailed",e=>{this.state.isConnected=!1,this.state.isConnecting=!1,this.updateUI(),this.logger.error("Connection failed",e)}),this.connectionManager.on("screenShareStarted",()=>{this.state.screenShareActive=!0,this.updateUI(),this.logger.info("Screen sharing started")}),this.connectionManager.on("screenShareStopped",()=>{this.state.screenShareActive=!1,this.updateUI(),this.logger.info("Screen sharing stopped")}),this.connectionManager.on("fileTransferStarted",()=>{this.state.showFileTransfer=!0,this.updateUI(),this.logger.info("File transfer started")}),this.connectionManager.on("deviceRedirectionStarted",()=>{this.state.showDeviceRedirection=!0,this.updateUI(),this.logger.info("Device redirection started")}),this.connectionManager.on("qualityChanged",e=>{this.state.quality=e,this.updateUI()}),this.canvasRenderer.on("frameReceived",()=>{this.performanceOverlay.updateFrameRate()}),this.inputHandler.on("input",e=>{this.logger.debug("Input event received",e)})}render(){this.appElement&&(this.appElement.innerHTML=`\n      <div class="app-container" data-theme="${this.state.theme}">\n        \x3c!-- Header --\x3e\n        <header class="app-header">\n          <div class="header-left">\n            <h1 class="app-title">Real Remote Desktop</h1>\n            <span class="app-subtitle">Agentless Browser-to-Browser</span>\n          </div>\n          <div class="header-center">\n            ${this.state.isConnected?`\n              <div class="connection-status connected">\n                <span class="status-indicator"></span>\n                <span class="status-text">Connected</span>\n                ${this.state.isHost?'<span class="role-badge host">Host</span>':""}\n                ${this.state.isClient?'<span class="role-badge client">Client</span>':""}\n              </div>\n            `:'\n              <div class="connection-status disconnected">\n                <span class="status-indicator"></span>\n                <span class="status-text">Disconnected</span>\n              </div>\n            '}\n          </div>\n          <div class="header-right">\n            <button class="btn btn-secondary" onclick="window.app.togglePerformanceOverlay()">\n              <span class="icon">📊</span>\n            </button>\n            <button class="btn btn-secondary" onclick="window.app.toggleSettings()">\n              <span class="icon">⚙️</span>\n            </button>\n            <button class="btn btn-secondary" onclick="window.app.toggleTheme()">\n              <span class="icon">🌙</span>\n            </button>\n          </div>\n        </header>\n\n        \x3c!-- Main Content --\x3e\n        <main class="app-main">\n          \x3c!-- Connection Panel --\x3e\n          ${this.state.isConnected?"":'\n            <div class="connection-panel-container">\n              <div class="connection-panel">\n                <h2>Start Remote Desktop Session</h2>\n                <div class="connection-options">\n                  <div class="option-card" onclick="window.app.startHostSession()">\n                    <div class="option-icon">🖥️</div>\n                    <h3>Share My Screen</h3>\n                    <p>Start a host session and share your screen with others</p>\n                    <button class="btn btn-primary">Start Host Session</button>\n                  </div>\n                  <div class="option-card" onclick="window.app.showJoinDialog()">\n                    <div class="option-icon">👁️</div>\n                    <h3>Join Session</h3>\n                    <p>Connect to a host session using a connection code</p>\n                    <button class="btn btn-primary">Join Session</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          '}\n\n          \x3c!-- Canvas Container --\x3e\n          ${this.state.isConnected?`\n            <div class="canvas-container">\n              <canvas id="remote-canvas" width="1920" height="1080"></canvas>\n              \n              \x3c!-- Connection Code Display (Host) --\x3e\n              ${this.state.isHost&&this.state.connectionCode?`\n                <div class="connection-code-display">\n                  <div class="code-container">\n                    <span class="code-label">Connection Code:</span>\n                    <span class="code-value">${this.state.connectionCode}</span>\n                    <button class="btn btn-secondary" onclick="navigator.clipboard.writeText('${this.state.connectionCode}')">\n                      📋 Copy\n                    </button>\n                  </div>\n                </div>\n              `:""}\n\n              \x3c!-- Control Panel --\x3e\n              <div class="control-panel">\n                <div class="control-group">\n                  <button class="btn btn-secondary" onclick="window.app.toggleFileTransfer()">\n                    📁 File Transfer\n                  </button>\n                  <button class="btn btn-secondary" onclick="window.app.toggleDeviceRedirection()">\n                    🔌 Devices\n                  </button>\n                  <button class="btn btn-secondary" onclick="window.app.toggleClipboard()">\n                    📋 Clipboard\n                  </button>\n                </div>\n                <div class="control-group">\n                  <select class="quality-selector" onchange="window.app.changeQuality(this.value)">\n                    <option value="low" ${"low"===this.state.quality?"selected":""}>Low Quality</option>\n                    <option value="medium" ${"medium"===this.state.quality?"selected":""}>Medium Quality</option>\n                    <option value="high" ${"high"===this.state.quality?"selected":""}>High Quality</option>\n                    <option value="ultra" ${"ultra"===this.state.quality?"selected":""}>Ultra Quality</option>\n                  </select>\n                  <button class="btn btn-secondary" onclick="window.app.toggleFullscreen()">\n                    ⛶ Fullscreen\n                  </button>\n                </div>\n              </div>\n            </div>\n          `:""}\n        </main>\n\n        \x3c!-- Footer --\x3e\n        <footer class="app-footer">\n          <div class="footer-left">\n            <span class="version">v1.0.0</span>\n          </div>\n          <div class="footer-center">\n            <span class="status-text">\n              ${this.state.isConnected?(this.state.isHost?"Hosting":"Connected to")+" remote session":"Ready to connect"}\n            </span>\n          </div>\n          <div class="footer-right">\n            <button class="btn btn-secondary" onclick="window.app.disconnect()" ${this.state.isConnected?"":"disabled"}>\n              Disconnect\n            </button>\n          </div>\n        </footer>\n\n        \x3c!-- Modals --\x3e\n        ${this.state.showSettings?`\n          <div class="modal-overlay" onclick="window.app.toggleSettings()">\n            <div class="modal-content" onclick="event.stopPropagation()">\n              <div class="modal-header">\n                <h3>Settings</h3>\n                <button class="modal-close" onclick="window.app.toggleSettings()">×</button>\n              </div>\n              <div class="modal-body">\n                <div class="settings-section">\n                  <h4>Connection</h4>\n                  <div class="setting-item">\n                    <label>Enable Audio</label>\n                    <input type="checkbox" ${this.config.get("webrtc").enableAudio?"checked":""}>\n                  </div>\n                  <div class="setting-item">\n                    <label>Enable Video</label>\n                    <input type="checkbox" ${this.config.get("webrtc").enableVideo?"checked":""}>\n                  </div>\n                </div>\n                <div class="settings-section">\n                  <h4>Security</h4>\n                  <div class="setting-item">\n                    <label>Enable Clipboard Sync</label>\n                    <input type="checkbox" ${this.config.get("security").enableClipboard?"checked":""}>\n                  </div>\n                  <div class="setting-item">\n                    <label>Enable File Transfer</label>\n                    <input type="checkbox" ${this.config.get("security").enableFileTransfer?"checked":""}>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        `:""}\n\n        ${this.state.showFileTransfer?'\n          <div class="modal-overlay" onclick="window.app.toggleFileTransfer()">\n            <div class="modal-content" onclick="event.stopPropagation()">\n              <div class="modal-header">\n                <h3>File Transfer</h3>\n                <button class="modal-close" onclick="window.app.toggleFileTransfer()">×</button>\n              </div>\n              <div class="modal-body">\n                <div class="file-transfer-area">\n                  <div class="upload-area">\n                    <h4>Upload Files</h4>\n                    <input type="file" multiple>\n                    <button class="btn btn-primary">Upload</button>\n                  </div>\n                  <div class="download-area">\n                    <h4>Download Files</h4>\n                    <div class="file-list">\n                      <div class="file-item">\n                        <span class="file-name">example.txt</span>\n                        <button class="btn btn-secondary">Download</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ':""}\n\n        ${this.state.showDeviceRedirection?'\n          <div class="modal-overlay" onclick="window.app.toggleDeviceRedirection()">\n            <div class="modal-content" onclick="event.stopPropagation()">\n              <div class="modal-header">\n                <h3>Device Redirection</h3>\n                <button class="modal-close" onclick="window.app.toggleDeviceRedirection()">×</button>\n              </div>\n              <div class="modal-body">\n                <div class="device-list">\n                  <div class="device-item">\n                    <span class="device-name">USB Device</span>\n                    <button class="btn btn-secondary">Connect</button>\n                  </div>\n                  <div class="device-item">\n                    <span class="device-name">Printer</span>\n                    <button class="btn btn-secondary">Connect</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ':""}\n      </div>\n    `,this.setupEventHandlers(),this.initializeCanvas())}setupEventHandlers(){window.app={startHostSession:()=>this.startHostSession(),showJoinDialog:()=>this.showJoinDialog(),toggleSettings:()=>this.toggleSettings(),toggleFileTransfer:()=>this.toggleFileTransfer(),toggleDeviceRedirection:()=>this.toggleDeviceRedirection(),togglePerformanceOverlay:()=>this.togglePerformanceOverlay(),toggleTheme:()=>this.toggleTheme(),toggleFullscreen:()=>this.toggleFullscreen(),changeQuality:e=>this.changeQuality(e),disconnect:()=>this.disconnect()},document.addEventListener("keydown",e=>{this.handleKeyboardShortcut(e)})}initializeCanvas(){if(this.state.isConnected){const e=document.getElementById("remote-canvas");e&&(this.canvasRenderer.attachToCanvas(e),this.inputHandler.attachToCanvas(e))}}updateUI(){this.render()}async startHostSession(){try{this.state.isConnecting=!0,this.updateUI(),await this.connectionManager.startHostSession({isHost:!0,quality:this.state.quality,enableAudio:this.config.get("webrtc").enableAudio,enableVideo:this.config.get("webrtc").enableVideo,enableClipboard:this.config.get("security").enableClipboard,enableFileTransfer:this.config.get("security").enableFileTransfer,enableDeviceRedirection:!0,enableFolderMounting:!0}),this.logger.info("Host session started successfully")}catch(e){this.logger.error("Failed to start host session",e),this.state.isConnecting=!1,this.updateUI()}}showJoinDialog(){const e=prompt("Enter connection code:");e&&this.joinClientSession(e)}async joinClientSession(e){try{this.state.isConnecting=!0,this.updateUI(),await this.connectionManager.joinClientSession(e,{isHost:!1,quality:this.state.quality,enableAudio:this.config.get("webrtc").enableAudio,enableVideo:this.config.get("webrtc").enableVideo,enableClipboard:this.config.get("security").enableClipboard,enableFileTransfer:this.config.get("security").enableFileTransfer,enableDeviceRedirection:!0,enableFolderMounting:!0}),this.logger.info("Client session joined successfully")}catch(t){this.logger.error("Failed to join client session",t),this.state.isConnecting=!1,this.updateUI()}}toggleSettings(){this.state.showSettings=!this.state.showSettings,this.updateUI()}toggleFileTransfer(){this.state.showFileTransfer=!this.state.showFileTransfer,this.updateUI()}toggleDeviceRedirection(){this.state.showDeviceRedirection=!this.state.showDeviceRedirection,this.updateUI()}togglePerformanceOverlay(){this.state.showPerformanceOverlay=!this.state.showPerformanceOverlay,this.updateUI()}toggleTheme(){const e=["light","dark","auto"],t=e.indexOf(this.state.theme);this.state.theme=e[(t+1)%e.length],this.applyTheme(),this.updateUI()}toggleFullscreen(){document.fullscreenElement?document.exitFullscreen():document.documentElement.requestFullscreen()}changeQuality(e){["low","medium","high","ultra"].includes(e)&&(this.state.quality=e,this.connectionManager.updateQuality(e),this.updateUI())}disconnect(){this.connectionManager.disconnect(),this.state.isConnected=!1,this.state.isConnecting=!1,this.state.connectionCode="",this.state.screenShareActive=!1,this.updateUI()}handleKeyboardShortcut(e){if(e.ctrlKey&&e.key>="1"&&e.key<="4"){const t=["low","medium","high","ultra"][parseInt(e.key)-1];t&&this.changeQuality(t)}"F11"===e.key&&(e.preventDefault(),this.toggleFullscreen()),"F12"===e.key&&(e.preventDefault(),this.togglePerformanceOverlay()),"Escape"===e.key&&(this.state.showSettings=!1,this.state.showFileTransfer=!1,this.state.showDeviceRedirection=!1,this.updateUI())}applyTheme(){document.documentElement.setAttribute("data-theme",this.state.theme)}}c.init();const C=new a("Main");r.init();const S=new u;async function k(){try{if(C.info("Initializing HTML5 RDP application..."),!function(){if(!("HTMLCanvasElement"in window))return C.error("Canvas not supported"),!1;if(!("WebSocket"in window))return C.error("WebSocket not supported"),!1;if(!("localStorage"in window))return C.error("localStorage not supported"),!1;if(!("crypto"in window))return C.error("Crypto not supported"),!1;if(!("fetch"in window))return C.error("Fetch not supported"),!1;if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return C.error("WebRTC media devices not supported"),!1;if(!("RTCPeerConnection"in window))return C.error("RTCPeerConnection not supported"),!1;if(!navigator.mediaDevices.getDisplayMedia)return C.error("Screen capture not supported"),!1;"showOpenFilePicker"in window||C.warn("File System Access API not supported - file transfer will be limited");"usb"in navigator||C.warn("Web USB API not supported - device redirection will be limited");return!0}())throw new Error("Browser not compatible with HTML5 RDP");await function(e,t,i){if(!t||0===t.length)return e();const s=document.getElementsByTagName("link");return Promise.all(t.map(e=>{if((e=function(e){return"/"+e}(e))in n)return;n[e]=!0;const t=e.endsWith(".css"),a=t?'[rel="stylesheet"]':"";if(i)for(let n=s.length-1;n>=0;n--){const i=s[n];if(i.href===e&&(!t||"stylesheet"===i.rel))return}else if(document.querySelector(`link[href="${e}"]${a}`))return;const o=document.createElement("link");return o.rel=t?"stylesheet":"modulepreload",t||(o.as="script",o.crossOrigin=""),o.href=e,document.head.appendChild(o),t?new Promise((t,n)=>{o.addEventListener("load",t),o.addEventListener("error",()=>n(new Error(`Unable to preload CSS for ${e}`)))}):void 0})).then(()=>e()).catch(e=>{const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=e,window.dispatchEvent(t),!t.defaultPrevented)throw e})}(()=>import("./vendor-583eb861.js"),[]);new w(S).mount("#app");const e=document.getElementById("loading");e&&(e.style.display="none"),C.info("Application initialized successfully")}catch(e){C.error("Failed to initialize application:",e),c.handleError(e)}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",k):k(),window.addEventListener("beforeunload",()=>{C.info("Application shutting down..."),S.disconnect()}),document.addEventListener("visibilitychange",()=>{document.hidden?(C.info("Page hidden, pausing connection updates"),S.pause()):(C.info("Page visible, resuming connection updates"),S.resume())}),window.HTML5RDP={connectionManager:S,logger:C,config:r};
//# sourceMappingURL=main-8ffbfaeb.js.map
