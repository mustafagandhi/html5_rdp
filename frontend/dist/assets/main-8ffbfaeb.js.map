{"version":3,"mappings":"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","names":["LogLevel","_Logger","constructor","category","__publicField","this","setupGlobalErrorHandling","getInstance","instance","setLogLevel","level","logLevel","debug","message","data","log","info","warn","error","fatal","entry","timestamp","Date","toISOString","logs","push","length","maxLogs","shift","outputLog","levelStr","prefix","split","isProduction","logData","console","sendToRemoteLogging","window","addEventListener","event","filename","lineno","colno","reason","remoteLogs","JSON","parse","localStorage","getItem","setItem","stringify","slice","getLogs","filter","clearLogs","exportLogs","time","label","timeEnd","group","groupEnd","Logger","_Config","config","getDefaultConfig","loadFromStorage","init","get","path","keys","value","key","Error","set","lastKey","pop","current","saveToStorage","logger","reset","import","configJson","importedConfig","mergeConfigs","connection","defaultHost","defaultPort","defaultSecure","reconnectAttempts","reconnectDelay","heartbeatInterval","connectionTimeout","webrtc","iceServers","urls","maxBitrate","maxFramerate","enableAudio","enableVideo","display","defaultQuality","defaultScaleMode","maintainAspectRatio","enableHardwareAcceleration","maxFrameQueueSize","ui","theme","showPerformanceOverlay","showConnectionInfo","enableKeyboardShortcuts","enableContextMenu","language","security","enableClipboard","enableFileTransfer","enableAudioCapture","enablePrinting","maxFileSize","logging","enableConsole","enableRemote","maxLogEntries","defaultConfig","userConfig","merged","section","sectionConfig","Object","entries","stored","storageKey","getConnectionConfig","getWebRTCConfig","getDisplayConfig","getUIConfig","getSecurityConfig","getLoggingConfig","getTheme","matchMedia","matches","setTheme","getQuality","setQuality","quality","getDefaultConnection","host","port","secure","setDefaultConnection","validate","includes","Config","ErrorHandler","isInitialized","setupUnhandledRejectionHandling","setupNetworkErrorHandling","handleError","errorInfo","id","generateErrorId","type","name","stack","userAgent","navigator","url","location","href","errors","maxErrors","showUserFriendlyError","handleNetworkError","method","networkError","handleWebRTCError","context","webrtcError","handleConnectionError","connectionType","connectionError","String","originalFetch","fetch","async","input","toString","now","Math","random","substr","isTemporaryError","errorMessage","getUserFriendlyMessage","showErrorNotification","some","pattern","test","NetworkError","WebRTCPeerConnectionError","MediaDevicesError","CanvasError","WebSocketError","AuthenticationError","PermissionError","QuotaExceededError","TypeError","ReferenceError","SyntaxError","RangeError","EvalError","URIError","errorId","document","querySelectorAll","forEach","notification","remove","createElement","className","innerHTML","style","cssText","querySelector","body","appendChild","setTimeout","parentElement","getErrors","clearErrors","exportErrors","isRecoverable","retryOperation","operation","maxRetries","delay","lastError","attempt","retryAttempts","Promise","resolve","EventEmitter","on","handler","events","off","index","indexOf","splice","emit","once","onceHandler","removeAllListeners","listenerCount","eventNames","WebRTCService","super","arguments","Map","bytesReceived","bytesSent","framesReceived","framesDropped","latency","bitrate","framerate","packetLoss","jitter","connect","options","connectionOptions","peerConnection","RTCPeerConnection","iceCandidatePoolSize","setupPeerConnectionHandlers","connectSignalingServer","createDataChannels","setupVideoReceiver","disconnect","dataChannels","channel","readyState","close","clear","signalingSocket","mediaStream","getTracks","track","stop","isConnected","sendMessage","dataChannel","messageStr","send","stats","sendInputEvent","sendClipboardData","sendFileChunk","fileId","chunk","offset","totalSize","Array","from","Uint8Array","sendHeartbeat","action","updateQuality","getVideoConstraints","connectionState","getStats","token","reject","WebSocket","onopen","onmessage","handleSignalingMessage","onerror","onclose","handleSignalingDisconnection","onicecandidate","candidate","sendSignalingMessage","oniceconnectionstatechange","state","iceConnectionState","handleDisconnection","onconnectionstatechange","ondatachannel","handleDataChannel","ontrack","kind","handleRemoteTrack","channelName","createDataChannel","ordered","maxRetransmits","handleDataChannelMessage","delete","handleControlMessage","handleVideoFrame","handleMetricsMessage","videoElement","MediaStream","srcObject","play","handleOffer","offer","handleAnswer","answer","handleIceCandidate","setRemoteDescription","createAnswer","setLocalDescription","addIceCandidate","OPEN","maxReconnectAttempts","constraints","low","width","ideal","height","frameRate","max","medium","high","ultra","ConnectionState","ConnectionManager","webrtcService","setupEventListeners","startHostSession","connectionCode","generateConnectionCode","connectionInfo","generateConnectionId","isHost","isClient","startTime","screenShareActive","fileTransferActive","deviceRedirectionActive","currentConnection","startScreenSharing","joinClientSession","validateConnectionCode","connectToHost","stream","mediaDevices","getDisplayMedia","video","cursor","displaySurface","logicalSurface","resizeMode","audio","setLocalStream","stopScreenSharing","stopLocalStream","startFileTransfer","startDeviceRedirection","endTime","duration","connectionHistory","stopHeartbeat","stopReconnectTimer","reconnect","pause","isPaused","resume","getConnectionInfo","getConnectionHistory","getConnectionCode","sendInputEvents","handleServiceDisconnection","substring","toUpperCase","code","startHeartbeat","interval","heartbeatTimer","setInterval","clearInterval","reconnectTimer","clearTimeout","getWebRTCService","isConnecting","isReconnecting","CanvasRenderer","fps","frameCount","lastFrameTime","averageFrameTime","droppedFrames","totalFrames","initialize","canvas","ctx","getContext","alpha","desynchronized","willReadFrequently","setupCanvas","startRenderLoop","destroy","stopRenderLoop","frameQueue","addFrame","frameData","maxQueueSize","setScaleMode","mode","scaleMode","setMaintainAspectRatio","maintain","resizeCanvas","container","rect","getBoundingClientRect","isRendering","renderLoop","animationFrameId","cancelAnimationFrame","performance","processFrameQueue","updateStats","requestAnimationFrame","frame","renderFrame","imageData","ImageData","ArrayBuffer","createImageFromArrayBuffer","Blob","createImageFromBlob","clearRect","x","y","calculateScaledDimensions","tempCanvas","putImageData","drawImage","buffer","blob","createImageBitmap","sourceWidth","sourceHeight","targetWidth","targetHeight","sourceAspect","targetAspect","frameTime","frameDuration","frameTimes","maxFrameTimes","totalFrameTime","reduce","sum","clearCanvas","takeScreenshot","toDataURL","InputHandler","connectionManager","Set","setupInputProcessing","enable","isEnabled","disable","attachToCanvas","detachFromCanvas","removeEventListeners","startCapture","isCapturing","stopCapture","handleMouseDown","bind","handleMouseUp","handleMouseMove","handleClick","handleDoubleClick","handleContextMenu","handleKeyDown","handleKeyUp","handleKeyPress","handleTouchStart","handleTouchEnd","handleTouchMove","handleWheel","handleFocus","handleBlur","removeEventListener","preventDefault","stopPropagation","customEvent","button","getRelativeX","clientX","getRelativeY","clientY","modifiers","getModifiers","mousePosition","pressedButtons","add","addInputEvent","newX","newY","deltaX","deltaY","keyCode","repeat","pressedKeys","touches","getTouchArray","changedTouches","deltaZ","deltaMode","left","top","ctrl","ctrlKey","alt","altKey","shiftKey","meta","metaKey","touchList","i","touch","identifier","pressure","force","inputEvent","inputQueue","processingInterval","processInputQueue","getPressedKeys","getPressedButtons","clearPressedKeys","clearPressedButtons","ConnectionPanel","formData","getDefaultFormData","render","defaultConnection","target","handleFormSubmit","handleQuickConnect","closest","handleFormChange","validateForm","updateUI","then","saveFormData","catch","getErrorMessage","element","checked","parseInt","trim","form","getElementById","hostInput","portInput","secureInput","tokenInput","qualitySelect","enableVideoInput","enableAudioInput","enableClipboardInput","enableFileTransferInput","connectBtn","disabled","errorElement","setFormData","getFormData","setError","clearError","PerformanceOverlay","frameDrops","cpuUsage","memoryUsage","resolution","toFixed","min","getLatencyColor","formatBitrate","getPacketLossColor","getJitterColor","getFrameDropsColor","formatBytes","show","isVisible","startUpdates","hide","stopUpdates","updateFrameRate","delta","newStats","exportStats","resetStats","updateInterval","updateFromConnectionManager","webrtcStats","updateSystemStats","memory","usedJSHeapSize","elements","textContent","updateProgressBars","fpsBar","latencyBar","bitrateBar","packetLossBar","jitterBar","frameDropsBar","bytes","statsData","URL","createObjectURL","a","download","replace","click","removeChild","revokeObjectURL","setResolution","SettingsPanel","initializeSections","sections","map","title","description","join","settings","setting","renderSetting","hasUnsavedChanges","placeholder","step","inputId","option","classList","contains","switchSection","dataset","saveSettings","resetSettings","exportSettings","importSettings","handleSettingChange","handleFileImport","sectionId","selectedSection","item","activeNavItem","settingId","parseFloat","find","s","configPath","showMessage","confirm","settingsData","version","export","fileInput","file","files","reader","FileReader","onload","result","readAsText","saveBtn","messageElement","settingsPanel","parentNode","getSettings","setSettings","sectionSettings","FileTransferPanel","mount","selector","toggle","setupEventHandlers","dropZone","e","dataTransfer","handleFiles","formatFileSize","size","addUploadItem","uploadList","simulateUpload","progressFill","progressText","statusBadge","progress","removeUpload","floor","pow","panel","DeviceRedirectionPanel","initializeDevices","devices","connected","enabled","renderDeviceCategory","categoryDevices","device","getDeviceIcon","usb","printer","smartcard","camera","microphone","speaker","deviceId","toggleDevice","d","updateDeviceUI","deviceItem","statusElement","scanForDevices","newDevices","refreshDevices","getConnectedDevices","getDeviceById","App","getInitialState","setupComponents","applyTheme","appElement","showSettings","showFileTransfer","showDeviceRedirection","canvasRenderer","inputHandler","connectionPanel","performanceOverlay","fileTransferPanel","deviceRedirectionPanel","CONNECTING","initializeCanvas","app","showJoinDialog","toggleSettings","toggleFileTransfer","toggleDeviceRedirection","togglePerformanceOverlay","toggleTheme","toggleFullscreen","changeQuality","handleKeyboardShortcut","enableDeviceRedirection","enableFolderMounting","prompt","themes","currentIndex","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","setAttribute","initApp","getUserMedia","checkBrowserCompatibility","__vitePreload","loadingElement","hidden","HTML5RDP"],"sources":["../../utils/Logger.ts","../../utils/Config.ts","../../utils/ErrorHandler.ts","../../utils/EventEmitter.ts","../../services/webrtc/WebRTCService.ts","../../services/websocket/ConnectionManager.ts","../../components/rdp/CanvasRenderer.ts","../../components/rdp/InputHandler.ts","../../components/panels/ConnectionPanel.ts","../../components/ui/PerformanceOverlay.ts","../../components/panels/SettingsPanel.ts","../../components/panels/FileTransferPanel.ts","../../components/panels/DeviceRedirectionPanel.ts","../../components/App.ts","../../main.ts"],"sourcesContent":["export enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  FATAL = 4\n}\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: Error;\n}\n\nexport class Logger {\n  private static instance: Logger;\n  private logLevel: LogLevel = LogLevel.INFO;\n  private logs: LogEntry[] = [];\n  private maxLogs = 1000;\n  private isProduction = process.env.NODE_ENV === 'production';\n\n  constructor(private category: string) {\n    this.setupGlobalErrorHandling();\n  }\n\n  static getInstance(category: string): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger(category);\n    }\n    return Logger.instance;\n  }\n\n  setLogLevel(level: LogLevel): void {\n    this.logLevel = level;\n  }\n\n  debug(message: string, data?: any): void {\n    this.log(LogLevel.DEBUG, message, data);\n  }\n\n  info(message: string, data?: any): void {\n    this.log(LogLevel.INFO, message, data);\n  }\n\n  warn(message: string, data?: any): void {\n    this.log(LogLevel.WARN, message, data);\n  }\n\n  error(message: string, error?: Error, data?: any): void {\n    this.log(LogLevel.ERROR, message, data, error);\n  }\n\n  fatal(message: string, error?: Error, data?: any): void {\n    this.log(LogLevel.FATAL, message, data, error);\n  }\n\n  private log(level: LogLevel, message: string, data?: any, error?: Error): void {\n    if (level < this.logLevel) return;\n\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category: this.category,\n      message,\n      data,\n      error\n    };\n\n    this.logs.push(entry);\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n\n    this.outputLog(entry);\n  }\n\n  private outputLog(entry: LogEntry): void {\n    const levelStr = LogLevel[entry.level];\n    const timestamp = entry.timestamp.split('T')[1].split('.')[0];\n    const prefix = `[${timestamp}] [${levelStr}] [${entry.category}]`;\n\n    if (this.isProduction && entry.level === LogLevel.DEBUG) {\n      return;\n    }\n\n    const logData = {\n      ...entry,\n      timestamp: entry.timestamp,\n      level: levelStr\n    };\n\n    switch (entry.level) {\n      case LogLevel.DEBUG:\n        console.debug(prefix, entry.message, entry.data || '');\n        break;\n      case LogLevel.INFO:\n        console.info(prefix, entry.message, entry.data || '');\n        break;\n      case LogLevel.WARN:\n        console.warn(prefix, entry.message, entry.data || '');\n        break;\n      case LogLevel.ERROR:\n        console.error(prefix, entry.message, entry.error || entry.data || '');\n        break;\n      case LogLevel.FATAL:\n        console.error(prefix, 'FATAL:', entry.message, entry.error || entry.data || '');\n        break;\n    }\n\n    // Send to remote logging service in production\n    if (this.isProduction && entry.level >= LogLevel.ERROR) {\n      this.sendToRemoteLogging(logData);\n    }\n  }\n\n  private setupGlobalErrorHandling(): void {\n    window.addEventListener('error', (event) => {\n      this.error('Unhandled error', event.error, {\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno\n      });\n    });\n\n    window.addEventListener('unhandledrejection', (event) => {\n      this.error('Unhandled promise rejection', event.reason);\n    });\n  }\n\n  private async sendToRemoteLogging(logData: any): Promise<void> {\n    try {\n      // In a real implementation, this would send to a logging service\n      // For now, we'll just store it locally\n      const remoteLogs = JSON.parse(localStorage.getItem('remoteLogs') || '[]');\n      remoteLogs.push(logData);\n      localStorage.setItem('remoteLogs', JSON.stringify(remoteLogs.slice(-100)));\n    } catch (error) {\n      console.error('Failed to send log to remote service:', error);\n    }\n  }\n\n  getLogs(level?: LogLevel): LogEntry[] {\n    if (level !== undefined) {\n      return this.logs.filter(log => log.level >= level);\n    }\n    return [...this.logs];\n  }\n\n  clearLogs(): void {\n    this.logs = [];\n  }\n\n  exportLogs(): string {\n    return JSON.stringify(this.logs, null, 2);\n  }\n\n  // Performance logging\n  time(label: string): void {\n    console.time(`[${this.category}] ${label}`);\n  }\n\n  timeEnd(label: string): void {\n    console.timeEnd(`[${this.category}] ${label}`);\n  }\n\n  // Group logging\n  group(label: string): void {\n    console.group(`[${this.category}] ${label}`);\n  }\n\n  groupEnd(): void {\n    console.groupEnd();\n  }\n} ","import { Logger } from './Logger';\n\nexport interface ConnectionConfig {\n  defaultHost: string;\n  defaultPort: number;\n  defaultSecure: boolean;\n  reconnectAttempts: number;\n  reconnectDelay: number;\n  heartbeatInterval: number;\n  connectionTimeout: number;\n}\n\nexport interface WebRTCConfig {\n  iceServers: RTCIceServer[];\n  maxBitrate: number;\n  maxFramerate: number;\n  enableAudio: boolean;\n  enableVideo: boolean;\n}\n\nexport interface DisplayConfig {\n  defaultQuality: 'low' | 'medium' | 'high' | 'ultra';\n  defaultScaleMode: 'fit' | 'fill' | 'stretch';\n  maintainAspectRatio: boolean;\n  enableHardwareAcceleration: boolean;\n  maxFrameQueueSize: number;\n}\n\nexport interface UIConfig {\n  theme: 'light' | 'dark' | 'auto';\n  showPerformanceOverlay: boolean;\n  showConnectionInfo: boolean;\n  enableKeyboardShortcuts: boolean;\n  enableContextMenu: boolean;\n  language: string;\n}\n\nexport interface SecurityConfig {\n  enableClipboard: boolean;\n  enableFileTransfer: boolean;\n  enableAudioCapture: boolean;\n  enablePrinting: boolean;\n  maxFileSize: number;\n}\n\nexport interface LoggingConfig {\n  level: 'debug' | 'info' | 'warn' | 'error';\n  enableConsole: boolean;\n  enableRemote: boolean;\n  maxLogEntries: number;\n}\n\nexport interface AppConfig {\n  connection: ConnectionConfig;\n  webrtc: WebRTCConfig;\n  display: DisplayConfig;\n  ui: UIConfig;\n  security: SecurityConfig;\n  logging: LoggingConfig;\n}\n\nexport class Config {\n  private static instance: Config;\n  private logger = new Logger('Config');\n  private config: AppConfig;\n  private storageKey = 'real-remote-desktop-config';\n\n  private constructor() {\n    this.config = this.getDefaultConfig();\n    this.loadFromStorage();\n  }\n\n  static getInstance(): Config {\n    if (!Config.instance) {\n      Config.instance = new Config();\n    }\n    return Config.instance;\n  }\n\n  static init(): void {\n    Config.getInstance();\n  }\n\n  get<T>(path: string): T {\n    const keys = path.split('.');\n    let value: any = this.config;\n    \n    for (const key of keys) {\n      if (value && typeof value === 'object' && key in value) {\n        value = value[key];\n      } else {\n        throw new Error(`Config path not found: ${path}`);\n      }\n    }\n    \n    return value as T;\n  }\n\n  set<T>(path: string, value: T): void {\n    const keys = path.split('.');\n    const lastKey = keys.pop()!;\n    let current: any = this.config;\n    \n    for (const key of keys) {\n      if (!(key in current) || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n    \n    current[lastKey] = value;\n    this.saveToStorage();\n    this.logger.debug(`Config updated: ${path} = ${JSON.stringify(value)}`);\n  }\n\n  reset(): void {\n    this.config = this.getDefaultConfig();\n    this.saveToStorage();\n    this.logger.info('Configuration reset to defaults');\n  }\n\n  export(): string {\n    return JSON.stringify(this.config, null, 2);\n  }\n\n  import(configJson: string): void {\n    try {\n      const importedConfig = JSON.parse(configJson);\n      this.config = this.mergeConfigs(this.getDefaultConfig(), importedConfig);\n      this.saveToStorage();\n      this.logger.info('Configuration imported successfully');\n    } catch (error) {\n      this.logger.error('Failed to import configuration', error);\n      throw new Error('Invalid configuration format');\n    }\n  }\n\n  private getDefaultConfig(): AppConfig {\n    return {\n      connection: {\n        defaultHost: 'localhost',\n        defaultPort: 4000,\n        defaultSecure: false,\n        reconnectAttempts: 5,\n        reconnectDelay: 1000,\n        heartbeatInterval: 30000,\n        connectionTimeout: 10000\n      },\n      webrtc: {\n        iceServers: [\n          { urls: 'stun:stun.l.google.com:19302' },\n          { urls: 'stun:stun1.l.google.com:19302' }\n        ],\n        maxBitrate: 5000000, // 5 Mbps\n        maxFramerate: 60,\n        enableAudio: false,\n        enableVideo: true\n      },\n      display: {\n        defaultQuality: 'medium',\n        defaultScaleMode: 'fit',\n        maintainAspectRatio: true,\n        enableHardwareAcceleration: true,\n        maxFrameQueueSize: 10\n      },\n      ui: {\n        theme: 'auto',\n        showPerformanceOverlay: false,\n        showConnectionInfo: true,\n        enableKeyboardShortcuts: true,\n        enableContextMenu: false,\n        language: 'en'\n      },\n      security: {\n        enableClipboard: true,\n        enableFileTransfer: true,\n        enableAudioCapture: false,\n        enablePrinting: false,\n        maxFileSize: 100 * 1024 * 1024 // 100 MB\n      },\n      logging: {\n        level: 'info',\n        enableConsole: true,\n        enableRemote: false,\n        maxLogEntries: 1000\n      }\n    };\n  }\n\n  private mergeConfigs(defaultConfig: AppConfig, userConfig: any): AppConfig {\n    const merged = { ...defaultConfig };\n    \n    for (const [section, sectionConfig] of Object.entries(userConfig)) {\n      if (section in merged && typeof sectionConfig === 'object') {\n        merged[section as keyof AppConfig] = {\n          ...merged[section as keyof AppConfig],\n          ...sectionConfig\n        };\n      }\n    }\n    \n    return merged;\n  }\n\n  private loadFromStorage(): void {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        const userConfig = JSON.parse(stored);\n        this.config = this.mergeConfigs(this.getDefaultConfig(), userConfig);\n        this.logger.debug('Configuration loaded from storage');\n      }\n    } catch (error) {\n      this.logger.warn('Failed to load configuration from storage', error);\n    }\n  }\n\n  private saveToStorage(): void {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.config));\n      this.logger.debug('Configuration saved to storage');\n    } catch (error) {\n      this.logger.warn('Failed to save configuration to storage', error);\n    }\n  }\n\n  // Convenience methods for common config access\n  getConnectionConfig(): ConnectionConfig {\n    return this.config.connection;\n  }\n\n  getWebRTCConfig(): WebRTCConfig {\n    return this.config.webrtc;\n  }\n\n  getDisplayConfig(): DisplayConfig {\n    return this.config.display;\n  }\n\n  getUIConfig(): UIConfig {\n    return this.config.ui;\n  }\n\n  getSecurityConfig(): SecurityConfig {\n    return this.config.security;\n  }\n\n  getLoggingConfig(): LoggingConfig {\n    return this.config.logging;\n  }\n\n  // Theme management\n  getTheme(): 'light' | 'dark' {\n    const theme = this.config.ui.theme;\n    if (theme === 'auto') {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    }\n    return theme;\n  }\n\n  setTheme(theme: 'light' | 'dark' | 'auto'): void {\n    this.set('ui.theme', theme);\n  }\n\n  // Quality management\n  getQuality(): 'low' | 'medium' | 'high' | 'ultra' {\n    return this.config.display.defaultQuality;\n  }\n\n  setQuality(quality: 'low' | 'medium' | 'high' | 'ultra'): void {\n    this.set('display.defaultQuality', quality);\n  }\n\n  // Connection management\n  getDefaultConnection(): { host: string; port: number; secure: boolean } {\n    return {\n      host: this.config.connection.defaultHost,\n      port: this.config.connection.defaultPort,\n      secure: this.config.connection.defaultSecure\n    };\n  }\n\n  setDefaultConnection(host: string, port: number, secure: boolean): void {\n    this.set('connection.defaultHost', host);\n    this.set('connection.defaultPort', port);\n    this.set('connection.defaultSecure', secure);\n  }\n\n  // Validation\n  validate(): boolean {\n    try {\n      // Validate connection config\n      if (this.config.connection.defaultPort < 1 || this.config.connection.defaultPort > 65535) {\n        throw new Error('Invalid default port');\n      }\n\n      // Validate display config\n      const validQualities = ['low', 'medium', 'high', 'ultra'];\n      if (!validQualities.includes(this.config.display.defaultQuality)) {\n        throw new Error('Invalid default quality');\n      }\n\n      // Validate UI config\n      const validThemes = ['light', 'dark', 'auto'];\n      if (!validThemes.includes(this.config.ui.theme)) {\n        throw new Error('Invalid theme');\n      }\n\n      return true;\n    } catch (error) {\n      this.logger.error('Configuration validation failed', error);\n      return false;\n    }\n  }\n} ","import { Logger } from './Logger';\n\nexport interface ErrorInfo {\n  id: string;\n  timestamp: string;\n  type: string;\n  message: string;\n  stack?: string;\n  userAgent: string;\n  url: string;\n  data?: any;\n}\n\nexport class ErrorHandler {\n  private static logger = new Logger('ErrorHandler');\n  private static errors: ErrorInfo[] = [];\n  private static maxErrors = 100;\n  private static isInitialized = false;\n\n  static init(): void {\n    if (this.isInitialized) return;\n    \n    this.setupGlobalErrorHandling();\n    this.setupUnhandledRejectionHandling();\n    this.setupNetworkErrorHandling();\n    \n    this.isInitialized = true;\n    this.logger.info('Error handler initialized');\n  }\n\n  static handleError(error: Error | string, data?: any): void {\n    const errorInfo: ErrorInfo = {\n      id: this.generateErrorId(),\n      timestamp: new Date().toISOString(),\n      type: error instanceof Error ? error.constructor.name : 'UnknownError',\n      message: error instanceof Error ? error.message : error,\n      stack: error instanceof Error ? error.stack : undefined,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      data\n    };\n\n    this.errors.push(errorInfo);\n    if (this.errors.length > this.maxErrors) {\n      this.errors.shift();\n    }\n\n    this.logger.error(errorInfo.message, error instanceof Error ? error : undefined, data);\n    this.showUserFriendlyError(errorInfo);\n  }\n\n  static handleNetworkError(error: Error, url: string, method: string): void {\n    const networkError = new Error(`Network error: ${method} ${url} - ${error.message}`);\n    this.handleError(networkError, { url, method });\n  }\n\n  static handleWebRTCError(error: Error, context: string): void {\n    const webrtcError = new Error(`WebRTC error in ${context}: ${error.message}`);\n    this.handleError(webrtcError, { context });\n  }\n\n  static handleConnectionError(error: Error, connectionType: string): void {\n    const connectionError = new Error(`Connection error (${connectionType}): ${error.message}`);\n    this.handleError(connectionError, { connectionType });\n  }\n\n  private static setupGlobalErrorHandling(): void {\n    window.addEventListener('error', (event) => {\n      this.handleError(event.error || new Error(event.message), {\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno\n      });\n    });\n  }\n\n  private static setupUnhandledRejectionHandling(): void {\n    window.addEventListener('unhandledrejection', (event) => {\n      const error = event.reason instanceof Error ? event.reason : new Error(String(event.reason));\n      this.handleError(error, { type: 'unhandledrejection' });\n    });\n  }\n\n  private static setupNetworkErrorHandling(): void {\n    // Override fetch to catch network errors\n    const originalFetch = window.fetch;\n    window.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {\n      try {\n        return await originalFetch(input, init);\n      } catch (error) {\n        const url = typeof input === 'string' ? input : input.toString();\n        const method = init?.method || 'GET';\n        this.handleNetworkError(error as Error, url, method);\n        throw error;\n      }\n    };\n  }\n\n  private static generateErrorId(): string {\n    return `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private static showUserFriendlyError(errorInfo: ErrorInfo): void {\n    // Don't show errors for network issues that might be temporary\n    if (this.isTemporaryError(errorInfo)) {\n      return;\n    }\n\n    const errorMessage = this.getUserFriendlyMessage(errorInfo);\n    \n    // Create error notification\n    this.showErrorNotification(errorMessage, errorInfo.id);\n  }\n\n  private static isTemporaryError(errorInfo: ErrorInfo): boolean {\n    const temporaryPatterns = [\n      /network error/i,\n      /connection refused/i,\n      /timeout/i,\n      /offline/i,\n      /no internet connection/i\n    ];\n\n    return temporaryPatterns.some(pattern => pattern.test(errorInfo.message));\n  }\n\n  private static getUserFriendlyMessage(errorInfo: ErrorInfo): string {\n    const errorMessages: Record<string, string> = {\n      'NetworkError': 'Unable to connect to the server. Please check your internet connection.',\n      'WebRTCPeerConnectionError': 'Failed to establish secure connection. Please try refreshing the page.',\n      'MediaDevicesError': 'Unable to access camera or microphone. Please check your permissions.',\n      'CanvasError': 'Display error occurred. Please refresh the page.',\n      'WebSocketError': 'Connection lost. Attempting to reconnect...',\n      'AuthenticationError': 'Authentication failed. Please log in again.',\n      'PermissionError': 'Permission denied. Please check your browser settings.',\n      'QuotaExceededError': 'Storage limit reached. Please clear some data.',\n      'TypeError': 'An unexpected error occurred. Please refresh the page.',\n      'ReferenceError': 'An unexpected error occurred. Please refresh the page.',\n      'SyntaxError': 'An unexpected error occurred. Please refresh the page.',\n      'RangeError': 'An unexpected error occurred. Please refresh the page.',\n      'EvalError': 'An unexpected error occurred. Please refresh the page.',\n      'URIError': 'An unexpected error occurred. Please refresh the page.'\n    };\n\n    return errorMessages[errorInfo.type] || 'An unexpected error occurred. Please try again.';\n  }\n\n  private static showErrorNotification(message: string, errorId: string): void {\n    // Remove existing error notifications\n    const existingNotifications = document.querySelectorAll('.error-notification');\n    existingNotifications.forEach(notification => notification.remove());\n\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = 'error-notification';\n    notification.innerHTML = `\n      <div class=\"error-content\">\n        <div class=\"error-icon\">⚠️</div>\n        <div class=\"error-message\">${message}</div>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n      </div>\n    `;\n\n    // Add styles\n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #fef2f2;\n      border: 1px solid #fecaca;\n      border-radius: 8px;\n      padding: 16px;\n      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n      z-index: 10000;\n      max-width: 400px;\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    `;\n\n    const content = notification.querySelector('.error-content') as HTMLElement;\n    content.style.cssText = `\n      display: flex;\n      align-items: center;\n      gap: 12px;\n    `;\n\n    const messageEl = notification.querySelector('.error-message') as HTMLElement;\n    messageEl.style.cssText = `\n      flex: 1;\n      color: #991b1b;\n      font-size: 14px;\n      line-height: 1.4;\n    `;\n\n    const closeBtn = notification.querySelector('.error-close') as HTMLElement;\n    closeBtn.style.cssText = `\n      background: none;\n      border: none;\n      font-size: 18px;\n      color: #991b1b;\n      cursor: pointer;\n      padding: 0;\n      width: 20px;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `;\n\n    document.body.appendChild(notification);\n\n    // Auto-remove after 10 seconds\n    setTimeout(() => {\n      if (notification.parentElement) {\n        notification.remove();\n      }\n    }, 10000);\n  }\n\n  static getErrors(): ErrorInfo[] {\n    return [...this.errors];\n  }\n\n  static clearErrors(): void {\n    this.errors = [];\n  }\n\n  static exportErrors(): string {\n    return JSON.stringify(this.errors, null, 2);\n  }\n\n  static isRecoverable(error: Error): boolean {\n    const recoverableErrors = [\n      'NetworkError',\n      'WebSocketError',\n      'WebRTCPeerConnectionError'\n    ];\n\n    return recoverableErrors.some(type => error.constructor.name.includes(type));\n  }\n\n  static async retryOperation<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000\n  ): Promise<T> {\n    let lastError: Error;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error as Error;\n        \n        if (attempt === maxRetries) {\n          this.handleError(lastError, { retryAttempts: attempt });\n          throw lastError;\n        }\n\n        this.logger.warn(`Operation failed, retrying... (${attempt}/${maxRetries})`, { error: lastError.message });\n        \n        await new Promise(resolve => setTimeout(resolve, delay * attempt));\n      }\n    }\n\n    throw lastError!;\n  }\n} ","export type EventHandler<T = any> = (data: T) => void;\n\nexport interface EventMap {\n  [event: string]: EventHandler[];\n}\n\nexport class EventEmitter {\n  private events: EventMap = {};\n\n  on<T = any>(event: string, handler: EventHandler<T>): void {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(handler);\n  }\n\n  off<T = any>(event: string, handler: EventHandler<T>): void {\n    if (!this.events[event]) return;\n    \n    const index = this.events[event].indexOf(handler);\n    if (index > -1) {\n      this.events[event].splice(index, 1);\n    }\n  }\n\n  emit<T = any>(event: string, data?: T): void {\n    if (!this.events[event]) return;\n    \n    this.events[event].forEach(handler => {\n      try {\n        handler(data);\n      } catch (error) {\n        console.error(`Error in event handler for ${event}:`, error);\n      }\n    });\n  }\n\n  once<T = any>(event: string, handler: EventHandler<T>): void {\n    const onceHandler = (data: T) => {\n      handler(data);\n      this.off(event, onceHandler);\n    };\n    this.on(event, onceHandler);\n  }\n\n  removeAllListeners(event?: string): void {\n    if (event) {\n      delete this.events[event];\n    } else {\n      this.events = {};\n    }\n  }\n\n  listenerCount(event: string): number {\n    return this.events[event]?.length || 0;\n  }\n\n  eventNames(): string[] {\n    return Object.keys(this.events);\n  }\n} ","import { EventEmitter } from '../../utils/EventEmitter';\nimport { Logger } from '../../utils/Logger';\nimport { Config } from '../../utils/Config';\nimport { ErrorHandler } from '../../utils/ErrorHandler';\n\nexport interface WebRTCOptions {\n  host: string;\n  port: number;\n  secure: boolean;\n  token?: string;\n  iceServers: RTCIceServer[];\n  maxBitrate: number;\n  maxFramerate: number;\n  quality?: 'low' | 'medium' | 'high' | 'ultra';\n  enableAudio?: boolean;\n  enableVideo?: boolean;\n}\n\nexport interface WebRTCStats {\n  bytesReceived: number;\n  bytesSent: number;\n  framesReceived: number;\n  framesDropped: number;\n  latency: number;\n  bitrate: number;\n  framerate: number;\n  packetLoss: number;\n  jitter: number;\n}\n\nexport interface DataChannelMessage {\n  type: 'control' | 'input' | 'clipboard' | 'file' | 'metrics';\n  data: any;\n  timestamp: number;\n}\n\nexport class WebRTCService extends EventEmitter {\n  private logger = new Logger('WebRTCService');\n  \n  private peerConnection: RTCPeerConnection | null = null;\n  private dataChannels: Map<string, RTCDataChannel> = new Map();\n  private mediaStream: MediaStream | null = null;\n  private signalingSocket: WebSocket | null = null;\n  \n  private connectionOptions: WebRTCOptions | null = null;\n  private isConnected = false;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  \n  private stats: WebRTCStats = {\n    bytesReceived: 0,\n    bytesSent: 0,\n    framesReceived: 0,\n    framesDropped: 0,\n    latency: 0,\n    bitrate: 0,\n    framerate: 0,\n    packetLoss: 0,\n    jitter: 0\n  };\n\n  async connect(options: WebRTCOptions): Promise<void> {\n    try {\n      this.logger.info('Initializing WebRTC connection', options);\n      this.connectionOptions = options;\n      \n      // Create peer connection\n      this.peerConnection = new RTCPeerConnection({\n        iceServers: options.iceServers,\n        iceCandidatePoolSize: 10\n      });\n      \n      // Setup event handlers\n      this.setupPeerConnectionHandlers();\n      \n      // Connect to signaling server\n      await this.connectSignalingServer();\n      \n      // Create data channels\n      this.createDataChannels();\n      \n      // Setup media handling\n      if (options.enableVideo) {\n        await this.setupVideoReceiver();\n      }\n      \n      this.logger.info('WebRTC connection setup complete');\n      \n    } catch (error) {\n      this.logger.error('WebRTC connection failed', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  disconnect(): void {\n    this.logger.info('Disconnecting WebRTC');\n    \n    // Close data channels\n    this.dataChannels.forEach(channel => {\n      if (channel.readyState === 'open') {\n        channel.close();\n      }\n    });\n    this.dataChannels.clear();\n    \n    // Close peer connection\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n    \n    // Close signaling socket\n    if (this.signalingSocket) {\n      this.signalingSocket.close();\n      this.signalingSocket = null;\n    }\n    \n    // Stop media stream\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n    \n    this.isConnected = false;\n    this.emit('disconnected');\n    \n    this.logger.info('WebRTC disconnected');\n  }\n\n  sendMessage(channel: string, message: DataChannelMessage): void {\n    const dataChannel = this.dataChannels.get(channel);\n    if (dataChannel && dataChannel.readyState === 'open') {\n      try {\n        const messageStr = JSON.stringify(message);\n        dataChannel.send(messageStr);\n        this.stats.bytesSent += messageStr.length;\n      } catch (error) {\n        this.logger.error('Failed to send message', error);\n        throw error;\n      }\n    } else {\n      throw new Error(`Data channel '${channel}' not available`);\n    }\n  }\n\n  sendInputEvent(event: any): void {\n    this.sendMessage('input', {\n      type: 'input',\n      data: event,\n      timestamp: Date.now()\n    });\n  }\n\n  sendClipboardData(data: string): void {\n    this.sendMessage('clipboard', {\n      type: 'clipboard',\n      data,\n      timestamp: Date.now()\n    });\n  }\n\n  sendFileChunk(fileId: string, chunk: ArrayBuffer, offset: number, totalSize: number): void {\n    this.sendMessage('file', {\n      type: 'file',\n      data: {\n        fileId,\n        chunk: Array.from(new Uint8Array(chunk)),\n        offset,\n        totalSize\n      },\n      timestamp: Date.now()\n    });\n  }\n\n  sendHeartbeat(): void {\n    this.sendMessage('control', {\n      type: 'control',\n      data: { action: 'heartbeat' },\n      timestamp: Date.now()\n    });\n  }\n\n  updateQuality(quality: 'low' | 'medium' | 'high' | 'ultra'): void {\n    if (!this.connectionOptions) return;\n    \n    this.connectionOptions.quality = quality;\n    \n    // Update video constraints based on quality\n    const constraints = this.getVideoConstraints(quality);\n    \n    // Re-negotiate if needed\n    if (this.peerConnection && this.peerConnection.connectionState === 'connected') {\n      this.logger.info(`Updating quality to ${quality}`);\n      // In a real implementation, you would renegotiate the connection\n      // with new constraints\n    }\n  }\n\n  getStats(): WebRTCStats | null {\n    if (!this.isConnected) return null;\n    return { ...this.stats };\n  }\n\n  private async connectSignalingServer(): Promise<void> {\n    const { host, port, secure, token } = this.connectionOptions!;\n    const protocol = secure ? 'wss' : 'ws';\n    const url = `${protocol}://${host}:${port}/webrtc-signaling`;\n    \n    return new Promise((resolve, reject) => {\n      this.signalingSocket = new WebSocket(url);\n      \n      this.signalingSocket.onopen = () => {\n        this.logger.info('Signaling connection established');\n        \n        // Send authentication\n        if (token) {\n          this.signalingSocket!.send(JSON.stringify({\n            type: 'auth',\n            token\n          }));\n        }\n        \n        resolve();\n      };\n      \n      this.signalingSocket.onmessage = (event) => {\n        this.handleSignalingMessage(JSON.parse(event.data));\n      };\n      \n      this.signalingSocket.onerror = (error) => {\n        this.logger.error('Signaling connection error', error);\n        reject(error);\n      };\n      \n      this.signalingSocket.onclose = () => {\n        this.logger.info('Signaling connection closed');\n        this.handleSignalingDisconnection();\n      };\n    });\n  }\n\n  private setupPeerConnectionHandlers(): void {\n    if (!this.peerConnection) return;\n    \n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        this.logger.debug('ICE candidate generated', event.candidate);\n        this.sendSignalingMessage({\n          type: 'ice-candidate',\n          candidate: event.candidate\n        });\n      }\n    };\n    \n    this.peerConnection.oniceconnectionstatechange = () => {\n      const state = this.peerConnection!.iceConnectionState;\n      this.logger.info('ICE connection state changed', state);\n      \n      if (state === 'connected') {\n        this.isConnected = true;\n        this.emit('connected');\n      } else if (state === 'disconnected' || state === 'failed') {\n        this.isConnected = false;\n        this.emit('disconnected');\n        this.handleDisconnection();\n      }\n    };\n    \n    this.peerConnection.onconnectionstatechange = () => {\n      const state = this.peerConnection!.connectionState;\n      this.logger.info('Connection state changed', state);\n    };\n    \n    this.peerConnection.ondatachannel = (event) => {\n      this.handleDataChannel(event.channel);\n    };\n    \n    this.peerConnection.ontrack = (event) => {\n      this.logger.info('Remote track received', event.track.kind);\n      this.handleRemoteTrack(event);\n    };\n  }\n\n  private createDataChannels(): void {\n    if (!this.peerConnection) return;\n    \n    const channels = ['control', 'input', 'clipboard', 'file', 'metrics'];\n    \n    channels.forEach(channelName => {\n      const channel = this.peerConnection!.createDataChannel(channelName, {\n        ordered: channelName === 'control' || channelName === 'input',\n        maxRetransmits: channelName === 'control' ? 3 : 1\n      });\n      \n      this.handleDataChannel(channel);\n    });\n  }\n\n  private handleDataChannel(channel: RTCDataChannel): void {\n    this.logger.info(`Data channel created: ${channel.label}`);\n    \n    channel.onopen = () => {\n      this.logger.info(`Data channel opened: ${channel.label}`);\n      this.dataChannels.set(channel.label, channel);\n    };\n    \n    channel.onmessage = (event) => {\n      this.handleDataChannelMessage(channel.label, event.data);\n    };\n    \n    channel.onclose = () => {\n      this.logger.info(`Data channel closed: ${channel.label}`);\n      this.dataChannels.delete(channel.label);\n    };\n    \n    channel.onerror = (error) => {\n      this.logger.error(`Data channel error: ${channel.label}`, error);\n    };\n  }\n\n  private handleDataChannelMessage(channel: string, data: string): void {\n    try {\n      const message: DataChannelMessage = JSON.parse(data);\n      this.stats.bytesReceived += data.length;\n      \n      this.emit('message', { channel, message });\n      \n      // Handle specific message types\n      switch (message.type) {\n        case 'control':\n          this.handleControlMessage(message.data);\n          break;\n        case 'video':\n          this.handleVideoFrame(message.data);\n          break;\n        case 'metrics':\n          this.handleMetricsMessage(message.data);\n          break;\n        default:\n          this.logger.debug(`Received message on channel ${channel}`, message);\n      }\n      \n    } catch (error) {\n      this.logger.error('Failed to parse data channel message', error);\n    }\n  }\n\n  private async setupVideoReceiver(): Promise<void> {\n    if (!this.peerConnection) return;\n    \n    try {\n      // Create a video element to receive the stream\n      const videoElement = document.createElement('video');\n      videoElement.style.display = 'none';\n      document.body.appendChild(videoElement);\n      \n      // Handle incoming video stream\n      this.peerConnection.ontrack = (event) => {\n        if (event.track.kind === 'video') {\n          this.mediaStream = new MediaStream([event.track]);\n          videoElement.srcObject = this.mediaStream;\n          videoElement.play();\n          \n          this.emit('videoStream', this.mediaStream);\n        }\n      };\n      \n    } catch (error) {\n      this.logger.error('Failed to setup video receiver', error);\n      throw error;\n    }\n  }\n\n  private handleRemoteTrack(event: RTCTrackEvent): void {\n    this.logger.info('Remote track received', event.track.kind);\n    \n    if (event.track.kind === 'video') {\n      this.mediaStream = new MediaStream([event.track]);\n      this.emit('videoStream', this.mediaStream);\n    }\n  }\n\n  private handleSignalingMessage(message: any): void {\n    switch (message.type) {\n      case 'offer':\n        this.handleOffer(message.offer);\n        break;\n      case 'answer':\n        this.handleAnswer(message.answer);\n        break;\n      case 'ice-candidate':\n        this.handleIceCandidate(message.candidate);\n        break;\n      case 'error':\n        this.logger.error('Signaling error', message.error);\n        this.emit('error', new Error(message.error));\n        break;\n      default:\n        this.logger.debug('Unknown signaling message', message);\n    }\n  }\n\n  private async handleOffer(offer: RTCSessionDescriptionInit): Promise<void> {\n    if (!this.peerConnection) return;\n    \n    try {\n      await this.peerConnection.setRemoteDescription(offer);\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(answer);\n      \n      this.sendSignalingMessage({\n        type: 'answer',\n        answer\n      });\n      \n    } catch (error) {\n      this.logger.error('Failed to handle offer', error);\n      throw error;\n    }\n  }\n\n  private async handleAnswer(answer: RTCSessionDescriptionInit): Promise<void> {\n    if (!this.peerConnection) return;\n    \n    try {\n      await this.peerConnection.setRemoteDescription(answer);\n    } catch (error) {\n      this.logger.error('Failed to handle answer', error);\n      throw error;\n    }\n  }\n\n  private async handleIceCandidate(candidate: RTCIceCandidateInit): Promise<void> {\n    if (!this.peerConnection) return;\n    \n    try {\n      await this.peerConnection.addIceCandidate(candidate);\n    } catch (error) {\n      this.logger.error('Failed to add ICE candidate', error);\n    }\n  }\n\n  private sendSignalingMessage(message: any): void {\n    if (this.signalingSocket && this.signalingSocket.readyState === WebSocket.OPEN) {\n      this.signalingSocket.send(JSON.stringify(message));\n    } else {\n      this.logger.warn('Signaling socket not available');\n    }\n  }\n\n  private handleControlMessage(data: any): void {\n    switch (data.action) {\n      case 'resize':\n        this.emit('resize', data);\n        break;\n      case 'quality-change':\n        this.emit('qualityChange', data);\n        break;\n      case 'heartbeat':\n        this.emit('heartbeat');\n        break;\n      default:\n        this.logger.debug('Unknown control message', data);\n    }\n  }\n\n  private handleVideoFrame(data: any): void {\n    this.stats.framesReceived++;\n    this.emit('videoFrame', data);\n  }\n\n  private handleMetricsMessage(data: any): void {\n    this.stats = { ...this.stats, ...data };\n    this.emit('metrics', this.stats);\n  }\n\n  private handleSignalingDisconnection(): void {\n    this.logger.warn('Signaling connection lost');\n    this.handleDisconnection();\n  }\n\n  private handleDisconnection(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      this.logger.info(`Attempting reconnection ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);\n      \n      setTimeout(() => {\n        this.connect(this.connectionOptions!);\n      }, 1000 * this.reconnectAttempts);\n    } else {\n      this.logger.error('Max reconnection attempts reached');\n      this.emit('error', new Error('Connection lost'));\n    }\n  }\n\n  private getVideoConstraints(quality: string): MediaTrackConstraints {\n    const constraints: Record<string, MediaTrackConstraints> = {\n      low: {\n        width: { ideal: 640 },\n        height: { ideal: 480 },\n        frameRate: { max: 15 }\n      },\n      medium: {\n        width: { ideal: 1280 },\n        height: { ideal: 720 },\n        frameRate: { max: 30 }\n      },\n      high: {\n        width: { ideal: 1920 },\n        height: { ideal: 1080 },\n        frameRate: { max: 60 }\n      },\n      ultra: {\n        width: { ideal: 2560 },\n        height: { ideal: 1440 },\n        frameRate: { max: 60 }\n      }\n    };\n    \n    return constraints[quality] || constraints.medium;\n  }\n} ","import { Logger } from '../../utils/Logger';\nimport { ErrorHandler } from '../../utils/ErrorHandler';\nimport { Config } from '../../utils/Config';\nimport { WebRTCService } from '../webrtc/WebRTCService';\nimport { EventEmitter } from '../../utils/EventEmitter';\n\nexport enum ConnectionState {\n  DISCONNECTED = 'disconnected',\n  CONNECTING = 'connecting',\n  CONNECTED = 'connected',\n  RECONNECTING = 'reconnecting',\n  FAILED = 'failed'\n}\n\nexport enum ConnectionType {\n  HOST = 'host',\n  CLIENT = 'client'\n}\n\nexport interface ConnectionInfo {\n  id: string;\n  type: ConnectionType;\n  state: ConnectionState;\n  isHost: boolean;\n  isClient: boolean;\n  startTime: number;\n  endTime?: number;\n  duration?: number;\n  bytesReceived: number;\n  bytesSent: number;\n  framesReceived: number;\n  framesDropped: number;\n  latency: number;\n  quality: 'low' | 'medium' | 'high' | 'ultra';\n  screenShareActive: boolean;\n  fileTransferActive: boolean;\n  deviceRedirectionActive: boolean;\n}\n\nexport interface ConnectionOptions {\n  isHost: boolean;\n  connectionCode?: string;\n  quality?: 'low' | 'medium' | 'high' | 'ultra';\n  enableAudio?: boolean;\n  enableVideo?: boolean;\n  enableClipboard?: boolean;\n  enableFileTransfer?: boolean;\n  enableDeviceRedirection?: boolean;\n  enableFolderMounting?: boolean;\n}\n\nexport class ConnectionManager extends EventEmitter {\n  private logger = new Logger('ConnectionManager');\n  private config = Config.getInstance();\n  \n  private webrtcService: WebRTCService;\n  \n  private currentConnection: ConnectionInfo | null = null;\n  private connectionHistory: ConnectionInfo[] = [];\n  private reconnectAttempts = 0;\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private heartbeatTimer: NodeJS.Timeout | null = null;\n  private isPaused = false;\n  private connectionCode: string = '';\n\n  constructor() {\n    super();\n    \n    this.webrtcService = new WebRTCService();\n    \n    this.setupEventListeners();\n    this.logger.info('Agentless Connection Manager initialized');\n  }\n\n  async startHostSession(options: ConnectionOptions): Promise<void> {\n    try {\n      this.logger.info('Starting host session', options);\n      \n      // Generate connection code\n      this.connectionCode = this.generateConnectionCode();\n      \n      // Create connection info\n      const connectionInfo: ConnectionInfo = {\n        id: this.generateConnectionId(),\n        type: ConnectionType.HOST,\n        state: ConnectionState.CONNECTING,\n        isHost: true,\n        isClient: false,\n        startTime: Date.now(),\n        bytesReceived: 0,\n        bytesSent: 0,\n        framesReceived: 0,\n        framesDropped: 0,\n        latency: 0,\n        quality: options.quality || 'medium',\n        screenShareActive: false,\n        fileTransferActive: false,\n        deviceRedirectionActive: false\n      };\n\n      this.currentConnection = connectionInfo;\n      this.emit('connectionStateChanged', connectionInfo);\n      this.emit('hostSessionStarted', { connectionCode: this.connectionCode });\n      \n      // Start screen sharing\n      await this.startScreenSharing();\n      \n      this.logger.info('Host session started successfully');\n    } catch (error) {\n      this.logger.error('Failed to start host session', error as Error);\n      throw error;\n    }\n  }\n\n  async joinClientSession(connectionCode: string, options: ConnectionOptions): Promise<void> {\n    try {\n      this.logger.info('Joining client session', { connectionCode, options });\n      \n      // Validate connection code\n      if (!this.validateConnectionCode(connectionCode)) {\n        throw new Error('Invalid connection code');\n      }\n      \n      this.connectionCode = connectionCode;\n      \n      // Create connection info\n      const connectionInfo: ConnectionInfo = {\n        id: this.generateConnectionId(),\n        type: ConnectionType.CLIENT,\n        state: ConnectionState.CONNECTING,\n        isHost: false,\n        isClient: true,\n        startTime: Date.now(),\n        bytesReceived: 0,\n        bytesSent: 0,\n        framesReceived: 0,\n        framesDropped: 0,\n        latency: 0,\n        quality: options.quality || 'medium',\n        screenShareActive: false,\n        fileTransferActive: false,\n        deviceRedirectionActive: false\n      };\n\n      this.currentConnection = connectionInfo;\n      this.emit('connectionStateChanged', connectionInfo);\n      \n      // Connect to host\n      await this.connectToHost(connectionCode);\n      \n      this.logger.info('Client session joined successfully');\n    } catch (error) {\n      this.logger.error('Failed to join client session', error as Error);\n      throw error;\n    }\n  }\n\n  async startScreenSharing(): Promise<void> {\n    try {\n      this.logger.info('Starting screen sharing');\n      \n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: {\n          cursor: 'always',\n          displaySurface: 'monitor',\n          logicalSurface: true,\n          resizeMode: 'crop-and-scale'\n        },\n        audio: this.config.get('webrtc').enableAudio\n      });\n      \n      // Set up WebRTC with screen share stream\n      await this.webrtcService.setLocalStream(stream);\n      \n      if (this.currentConnection) {\n        this.currentConnection.screenShareActive = true;\n        this.emit('screenShareStarted', stream);\n      }\n      \n      this.logger.info('Screen sharing started successfully');\n    } catch (error) {\n      this.logger.error('Failed to start screen sharing', error as Error);\n      throw error;\n    }\n  }\n\n  async stopScreenSharing(): Promise<void> {\n    try {\n      this.logger.info('Stopping screen sharing');\n      \n      await this.webrtcService.stopLocalStream();\n      \n      if (this.currentConnection) {\n        this.currentConnection.screenShareActive = false;\n        this.emit('screenShareStopped');\n      }\n      \n      this.logger.info('Screen sharing stopped successfully');\n    } catch (error) {\n      this.logger.error('Failed to stop screen sharing', error as Error);\n      throw error;\n    }\n  }\n\n  async startFileTransfer(): Promise<void> {\n    try {\n      this.logger.info('Starting file transfer');\n      \n      // Check for File System Access API support\n      if (!('showOpenFilePicker' in window)) {\n        throw new Error('File System Access API not supported');\n      }\n      \n      if (this.currentConnection) {\n        this.currentConnection.fileTransferActive = true;\n        this.emit('fileTransferStarted');\n      }\n      \n      this.logger.info('File transfer started successfully');\n    } catch (error) {\n      this.logger.error('Failed to start file transfer', error as Error);\n      throw error;\n    }\n  }\n\n  async startDeviceRedirection(): Promise<void> {\n    try {\n      this.logger.info('Starting device redirection');\n      \n      // Check for Web USB API support\n      if (!('usb' in navigator)) {\n        throw new Error('Web USB API not supported');\n      }\n      \n      if (this.currentConnection) {\n        this.currentConnection.deviceRedirectionActive = true;\n        this.emit('deviceRedirectionStarted');\n      }\n      \n      this.logger.info('Device redirection started successfully');\n    } catch (error) {\n      this.logger.error('Failed to start device redirection', error as Error);\n      throw error;\n    }\n  }\n\n  disconnect(): void {\n    this.logger.info('Disconnecting...');\n    \n    if (this.currentConnection) {\n      this.currentConnection.state = ConnectionState.DISCONNECTED;\n      this.currentConnection.endTime = Date.now();\n      this.currentConnection.duration = this.currentConnection.endTime - this.currentConnection.startTime;\n      \n      this.connectionHistory.push(this.currentConnection);\n      this.emit('disconnected', this.currentConnection);\n    }\n    \n    this.webrtcService.disconnect();\n    this.stopHeartbeat();\n    this.stopReconnectTimer();\n    \n    this.currentConnection = null;\n    this.connectionCode = '';\n    this.reconnectAttempts = 0;\n    \n    this.logger.info('Disconnected successfully');\n  }\n\n  reconnect(): void {\n    this.logger.info('Attempting to reconnect...');\n    \n    if (this.reconnectAttempts >= 5) {\n      this.logger.error('Max reconnection attempts reached');\n      this.emit('reconnectionFailed');\n      return;\n    }\n    \n    this.reconnectAttempts++;\n    \n    if (this.currentConnection) {\n      this.currentConnection.state = ConnectionState.RECONNECTING;\n      this.emit('connectionStateChanged', this.currentConnection);\n    }\n    \n    // Implement reconnection logic\n    setTimeout(() => {\n      this.logger.info('Reconnection attempt completed');\n    }, 1000 * this.reconnectAttempts);\n  }\n\n  pause(): void {\n    this.isPaused = true;\n    this.logger.info('Connection paused');\n  }\n\n  resume(): void {\n    this.isPaused = false;\n    this.logger.info('Connection resumed');\n  }\n\n  getConnectionInfo(): ConnectionInfo | null {\n    return this.currentConnection;\n  }\n\n  getConnectionHistory(): ConnectionInfo[] {\n    return this.connectionHistory;\n  }\n\n  getConnectionCode(): string {\n    return this.connectionCode;\n  }\n\n  updateQuality(quality: 'low' | 'medium' | 'high' | 'ultra'): void {\n    if (!this.currentConnection) {\n      this.logger.warn('No active connection to update quality');\n      return;\n    }\n\n    this.currentConnection.quality = quality;\n    this.webrtcService.updateQuality(quality);\n    \n    this.emit('qualityChanged', quality);\n    this.logger.info(`Quality updated to ${quality}`);\n  }\n\n  sendInputEvents(events: any[]): void {\n    if (!this.currentConnection || this.currentConnection.state !== ConnectionState.CONNECTED) {\n      return;\n    }\n\n    try {\n      this.webrtcService.sendInputEvents(events);\n    } catch (error) {\n      this.logger.error('Failed to send input events', error as Error);\n    }\n  }\n\n  private setupEventListeners(): void {\n    // WebRTC events\n    this.webrtcService.on('connected', () => {\n      this.logger.info('WebRTC connected');\n      if (this.currentConnection) {\n        this.currentConnection.state = ConnectionState.CONNECTED;\n        this.emit('connected', this.currentConnection);\n      }\n    });\n    \n    this.webrtcService.on('disconnected', () => {\n      this.logger.info('WebRTC disconnected');\n      this.handleServiceDisconnection();\n    });\n    \n    this.webrtcService.on('error', (error) => {\n      this.logger.error('WebRTC error', error);\n      ErrorHandler.handleWebRTCError(error, 'WebRTC Service');\n    });\n  }\n\n  private handleServiceDisconnection(): void {\n    if (this.currentConnection && this.currentConnection.state === ConnectionState.CONNECTED) {\n      this.logger.warn('Service disconnected, attempting reconnection');\n      this.reconnect();\n    }\n  }\n\n  private async connectToHost(connectionCode: string): Promise<void> {\n    // Implement connection to host logic\n    this.logger.info('Connecting to host with code:', connectionCode);\n    \n    // For now, simulate connection\n    setTimeout(() => {\n      if (this.currentConnection) {\n        this.currentConnection.state = ConnectionState.CONNECTED;\n        this.emit('connected', this.currentConnection);\n      }\n    }, 1000);\n  }\n\n  private generateConnectionCode(): string {\n    return Math.random().toString(36).substring(2, 8).toUpperCase();\n  }\n\n  private validateConnectionCode(code: string): boolean {\n    return code.length === 6 && /^[A-Z0-9]+$/.test(code);\n  }\n\n  private generateConnectionId(): string {\n    return `conn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private startHeartbeat(): void {\n    const interval = (this.config.get('connection') as any).heartbeatInterval || 30000;\n    \n    this.heartbeatTimer = setInterval(() => {\n      if (this.isPaused) return;\n      \n      try {\n        this.webrtcService.sendHeartbeat();\n      } catch (error) {\n        this.logger.warn('Heartbeat failed', error);\n      }\n    }, interval);\n  }\n\n  private stopHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  private stopReconnectTimer(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n\n  getWebRTCService(): WebRTCService {\n    return this.webrtcService;\n  }\n\n  isConnected(): boolean {\n    return this.currentConnection?.state === ConnectionState.CONNECTED;\n  }\n\n  isConnecting(): boolean {\n    return this.currentConnection?.state === ConnectionState.CONNECTING;\n  }\n\n  isReconnecting(): boolean {\n    return this.currentConnection?.state === ConnectionState.RECONNECTING;\n  }\n\n  isHost(): boolean {\n    return this.currentConnection?.isHost || false;\n  }\n\n  isClient(): boolean {\n    return this.currentConnection?.isClient || false;\n  }\n} ","import { Logger } from '../../utils/Logger';\nimport { EventEmitter } from '../../utils/EventEmitter';\nimport { Config } from '../../utils/Config';\n\nexport interface FrameData {\n  width: number;\n  height: number;\n  data: ImageData | ArrayBuffer | Blob;\n  timestamp: number;\n  quality: 'low' | 'medium' | 'high' | 'ultra';\n}\n\nexport interface RenderStats {\n  fps: number;\n  frameCount: number;\n  lastFrameTime: number;\n  averageFrameTime: number;\n  droppedFrames: number;\n  totalFrames: number;\n}\n\nexport class CanvasRenderer extends EventEmitter {\n  private logger = new Logger('CanvasRenderer');\n  private config = Config.getInstance();\n  \n  private canvas: HTMLCanvasElement | null = null;\n  private ctx: CanvasRenderingContext2D | null = null;\n  private animationFrameId: number | null = null;\n  \n  private frameQueue: FrameData[] = [];\n  private maxQueueSize = 10;\n  private isRendering = false;\n  \n  private stats: RenderStats = {\n    fps: 0,\n    frameCount: 0,\n    lastFrameTime: 0,\n    averageFrameTime: 0,\n    droppedFrames: 0,\n    totalFrames: 0\n  };\n  \n  private frameTimes: number[] = [];\n  private maxFrameTimes = 60;\n  \n  private scaleMode: 'fit' | 'fill' | 'stretch' = 'fit';\n  private maintainAspectRatio = true;\n\n  initialize(canvas: HTMLCanvasElement): void {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d', {\n      alpha: false,\n      desynchronized: true,\n      willReadFrequently: false\n    });\n    \n    if (!this.ctx) {\n      throw new Error('Failed to get canvas context');\n    }\n    \n    this.setupCanvas();\n    this.startRenderLoop();\n    \n    this.logger.info('Canvas renderer initialized');\n  }\n\n  destroy(): void {\n    this.stopRenderLoop();\n    this.frameQueue = [];\n    this.canvas = null;\n    this.ctx = null;\n    \n    this.logger.info('Canvas renderer destroyed');\n  }\n\n  addFrame(frameData: FrameData): void {\n    // Add frame to queue\n    this.frameQueue.push(frameData);\n    \n    // Limit queue size\n    if (this.frameQueue.length > this.maxQueueSize) {\n      const dropped = this.frameQueue.shift();\n      if (dropped) {\n        this.stats.droppedFrames++;\n      }\n    }\n    \n    this.stats.totalFrames++;\n  }\n\n  setScaleMode(mode: 'fit' | 'fill' | 'stretch'): void {\n    this.scaleMode = mode;\n    this.logger.info(`Scale mode changed to ${mode}`);\n  }\n\n  setMaintainAspectRatio(maintain: boolean): void {\n    this.maintainAspectRatio = maintain;\n  }\n\n  getStats(): RenderStats {\n    return { ...this.stats };\n  }\n\n  private setupCanvas(): void {\n    if (!this.canvas) return;\n    \n    // Set canvas size to match container\n    this.resizeCanvas();\n    \n    // Setup event listeners for resize\n    window.addEventListener('resize', () => {\n      this.resizeCanvas();\n    });\n    \n    // Setup fullscreen change listener\n    document.addEventListener('fullscreenchange', () => {\n      this.resizeCanvas();\n    });\n  }\n\n  private resizeCanvas(): void {\n    if (!this.canvas) return;\n    \n    const container = this.canvas.parentElement;\n    if (!container) return;\n    \n    const rect = container.getBoundingClientRect();\n    this.canvas.width = rect.width;\n    this.canvas.height = rect.height;\n    \n    this.logger.debug('Canvas resized', { width: this.canvas.width, height: this.canvas.height });\n  }\n\n  private startRenderLoop(): void {\n    if (this.isRendering) return;\n    \n    this.isRendering = true;\n    this.renderLoop();\n  }\n\n  private stopRenderLoop(): void {\n    this.isRendering = false;\n    \n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n      this.animationFrameId = null;\n    }\n  }\n\n  private renderLoop(): void {\n    if (!this.isRendering) return;\n    \n    const startTime = performance.now();\n    \n    // Process frame queue\n    this.processFrameQueue();\n    \n    // Update stats\n    this.updateStats(startTime);\n    \n    // Continue loop\n    this.animationFrameId = requestAnimationFrame(() => {\n      this.renderLoop();\n    });\n  }\n\n  private processFrameQueue(): void {\n    if (!this.ctx || !this.canvas || this.frameQueue.length === 0) return;\n    \n    const frame = this.frameQueue.shift();\n    if (!frame) return;\n    \n    try {\n      this.renderFrame(frame);\n      this.stats.frameCount++;\n      this.emit('frameReceived');\n      \n    } catch (error) {\n      this.logger.error('Failed to render frame', error);\n      this.stats.droppedFrames++;\n    }\n  }\n\n  private async renderFrame(frame: FrameData): Promise<void> {\n    if (!this.ctx || !this.canvas) return;\n    \n    let imageData: ImageData | ImageBitmap | null = null;\n    \n    // Convert frame data to image\n    if (frame.data instanceof ImageData) {\n      imageData = frame.data;\n    } else if (frame.data instanceof ArrayBuffer) {\n      imageData = await this.createImageFromArrayBuffer(frame.data, frame.width, frame.height);\n    } else if (frame.data instanceof Blob) {\n      imageData = await this.createImageFromBlob(frame.data);\n    }\n    \n    if (!imageData) {\n      throw new Error('Failed to create image from frame data');\n    }\n    \n    // Clear canvas\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Calculate scaling\n    const { x, y, width, height } = this.calculateScaledDimensions(\n      imageData.width,\n      imageData.height,\n      this.canvas.width,\n      this.canvas.height\n    );\n    \n    // Draw image\n    if (imageData instanceof ImageData) {\n      // Create temporary canvas for ImageData\n      const tempCanvas = document.createElement('canvas');\n      tempCanvas.width = imageData.width;\n      tempCanvas.height = imageData.height;\n      const tempCtx = tempCanvas.getContext('2d')!;\n      tempCtx.putImageData(imageData, 0, 0);\n      \n      this.ctx.drawImage(tempCanvas, x, y, width, height);\n    } else {\n      this.ctx.drawImage(imageData, x, y, width, height);\n    }\n  }\n\n  private async createImageFromArrayBuffer(buffer: ArrayBuffer, width: number, height: number): Promise<ImageBitmap> {\n    const blob = new Blob([buffer], { type: 'image/png' });\n    return createImageBitmap(blob);\n  }\n\n  private async createImageFromBlob(blob: Blob): Promise<ImageBitmap> {\n    return createImageBitmap(blob);\n  }\n\n  private calculateScaledDimensions(\n    sourceWidth: number,\n    sourceHeight: number,\n    targetWidth: number,\n    targetHeight: number\n  ): { x: number; y: number; width: number; height: number } {\n    const sourceAspect = sourceWidth / sourceHeight;\n    const targetAspect = targetWidth / targetHeight;\n    \n    let x = 0;\n    let y = 0;\n    let width = targetWidth;\n    let height = targetHeight;\n    \n    switch (this.scaleMode) {\n      case 'fit':\n        if (this.maintainAspectRatio) {\n          if (sourceAspect > targetAspect) {\n            // Source is wider\n            width = targetWidth;\n            height = targetWidth / sourceAspect;\n            y = (targetHeight - height) / 2;\n          } else {\n            // Source is taller\n            height = targetHeight;\n            width = targetHeight * sourceAspect;\n            x = (targetWidth - width) / 2;\n          }\n        }\n        break;\n        \n      case 'fill':\n        if (this.maintainAspectRatio) {\n          if (sourceAspect > targetAspect) {\n            // Source is wider - crop height\n            height = targetHeight;\n            width = targetHeight * sourceAspect;\n            x = (targetWidth - width) / 2;\n          } else {\n            // Source is taller - crop width\n            width = targetWidth;\n            height = targetWidth / sourceAspect;\n            y = (targetHeight - height) / 2;\n          }\n        }\n        break;\n        \n      case 'stretch':\n        // Use full target dimensions\n        break;\n    }\n    \n    return { x, y, width, height };\n  }\n\n  private updateStats(frameTime: number): void {\n    const now = performance.now();\n    const frameDuration = now - frameTime;\n    \n    // Update frame times array\n    this.frameTimes.push(frameDuration);\n    if (this.frameTimes.length > this.maxFrameTimes) {\n      this.frameTimes.shift();\n    }\n    \n    // Calculate average frame time\n    const totalFrameTime = this.frameTimes.reduce((sum, time) => sum + time, 0);\n    this.stats.averageFrameTime = totalFrameTime / this.frameTimes.length;\n    \n    // Calculate FPS\n    this.stats.fps = 1000 / this.stats.averageFrameTime;\n    \n    this.stats.lastFrameTime = frameDuration;\n  }\n\n  // Public methods for external control\n  setQuality(quality: 'low' | 'medium' | 'high' | 'ultra'): void {\n    // Adjust queue size based on quality\n    const qualitySettings = {\n      low: 5,\n      medium: 10,\n      high: 15,\n      ultra: 20\n    };\n    \n    this.maxQueueSize = qualitySettings[quality];\n    \n    // Trim queue if needed\n    while (this.frameQueue.length > this.maxQueueSize) {\n      this.frameQueue.shift();\n      this.stats.droppedFrames++;\n    }\n    \n    this.logger.info(`Quality set to ${quality}, queue size: ${this.maxQueueSize}`);\n  }\n\n  clearCanvas(): void {\n    if (!this.ctx || !this.canvas) return;\n    \n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.frameQueue = [];\n    this.stats.frameCount = 0;\n  }\n\n  takeScreenshot(): string {\n    if (!this.canvas) return '';\n    \n    return this.canvas.toDataURL('image/png');\n  }\n} ","import { Logger } from '../../utils/Logger';\nimport { ConnectionManager } from '../../services/ConnectionManager';\nimport { EventEmitter } from '../../utils/EventEmitter';\nimport { Config } from '../../utils/Config';\n\nexport interface InputEvent {\n  type: 'mouse' | 'keyboard' | 'touch' | 'wheel';\n  action: string;\n  data: any;\n  timestamp: number;\n}\n\nexport interface CustomMouseEvent {\n  type: 'mousedown' | 'mouseup' | 'mousemove' | 'click' | 'dblclick' | 'contextmenu';\n  button: number;\n  x: number;\n  y: number;\n  deltaX?: number;\n  deltaY?: number;\n  modifiers: {\n    ctrl: boolean;\n    alt: boolean;\n    shift: boolean;\n    meta: boolean;\n  };\n}\n\nexport interface CustomKeyboardEvent {\n  type: 'keydown' | 'keyup' | 'keypress';\n  key: string;\n  keyCode: number;\n  code: string;\n  modifiers: {\n    ctrl: boolean;\n    alt: boolean;\n    shift: boolean;\n    meta: boolean;\n  };\n  repeat: boolean;\n}\n\nexport interface CustomTouchEvent {\n  type: 'touchstart' | 'touchend' | 'touchmove';\n  touches: Array<{\n    id: number;\n    x: number;\n    y: number;\n    pressure: number;\n  }>;\n  changedTouches: Array<{\n    id: number;\n    x: number;\n    y: number;\n    pressure: number;\n  }>;\n}\n\nexport interface CustomWheelEvent {\n  type: 'wheel';\n  deltaX: number;\n  deltaY: number;\n  deltaZ: number;\n  deltaMode: number;\n  x: number;\n  y: number;\n  modifiers: {\n    ctrl: boolean;\n    alt: boolean;\n    shift: boolean;\n    meta: boolean;\n  };\n}\n\nexport class InputHandler extends EventEmitter {\n  private logger = new Logger('InputHandler');\n  private config = Config.getInstance();\n  private connectionManager: ConnectionManager;\n  \n  private canvas: HTMLCanvasElement | null = null;\n  private isEnabled = true;\n  private isCapturing = false;\n  \n  private mousePosition = { x: 0, y: 0 };\n  private pressedKeys = new Set<string>();\n  private pressedButtons = new Set<number>();\n  \n  private inputQueue: InputEvent[] = [];\n  private maxQueueSize = 100;\n  private processingInterval: NodeJS.Timeout | null = null;\n\n  constructor(connectionManager: ConnectionManager) {\n    super();\n    this.connectionManager = connectionManager;\n    \n    this.setupInputProcessing();\n    this.logger.info('Input handler initialized');\n  }\n\n  enable(): void {\n    this.isEnabled = true;\n    this.logger.info('Input handler enabled');\n  }\n\n  disable(): void {\n    this.isEnabled = false;\n    this.logger.info('Input handler disabled');\n  }\n\n  attachToCanvas(canvas: HTMLCanvasElement): void {\n    this.canvas = canvas;\n    this.setupEventListeners();\n    this.logger.info('Input handler attached to canvas');\n  }\n\n  detachFromCanvas(): void {\n    this.removeEventListeners();\n    this.canvas = null;\n    this.logger.info('Input handler detached from canvas');\n  }\n\n  startCapture(): void {\n    this.isCapturing = true;\n    this.logger.info('Input capture started');\n  }\n\n  stopCapture(): void {\n    this.isCapturing = false;\n    this.logger.info('Input capture stopped');\n  }\n\n  private setupEventListeners(): void {\n    if (!this.canvas) return;\n\n    // Mouse events\n    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));\n    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.canvas.addEventListener('click', this.handleClick.bind(this));\n    this.canvas.addEventListener('dblclick', this.handleDoubleClick.bind(this));\n    this.canvas.addEventListener('contextmenu', this.handleContextMenu.bind(this));\n\n    // Keyboard events\n    this.canvas.addEventListener('keydown', this.handleKeyDown.bind(this));\n    this.canvas.addEventListener('keyup', this.handleKeyUp.bind(this));\n    this.canvas.addEventListener('keypress', this.handleKeyPress.bind(this));\n\n    // Touch events\n    this.canvas.addEventListener('touchstart', this.handleTouchStart.bind(this));\n    this.canvas.addEventListener('touchend', this.handleTouchEnd.bind(this));\n    this.canvas.addEventListener('touchmove', this.handleTouchMove.bind(this));\n\n    // Wheel events\n    this.canvas.addEventListener('wheel', this.handleWheel.bind(this));\n\n    // Focus events\n    this.canvas.addEventListener('focus', this.handleFocus.bind(this));\n    this.canvas.addEventListener('blur', this.handleBlur.bind(this));\n\n    this.logger.info('Event listeners attached');\n  }\n\n  private removeEventListeners(): void {\n    if (!this.canvas) return;\n\n    // Mouse events\n    this.canvas.removeEventListener('mousedown', this.handleMouseDown.bind(this));\n    this.canvas.removeEventListener('mouseup', this.handleMouseUp.bind(this));\n    this.canvas.removeEventListener('mousemove', this.handleMouseMove.bind(this));\n    this.canvas.removeEventListener('click', this.handleClick.bind(this));\n    this.canvas.removeEventListener('dblclick', this.handleDoubleClick.bind(this));\n    this.canvas.removeEventListener('contextmenu', this.handleContextMenu.bind(this));\n\n    // Keyboard events\n    this.canvas.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    this.canvas.removeEventListener('keyup', this.handleKeyUp.bind(this));\n    this.canvas.removeEventListener('keypress', this.handleKeyPress.bind(this));\n\n    // Touch events\n    this.canvas.removeEventListener('touchstart', this.handleTouchStart.bind(this));\n    this.canvas.removeEventListener('touchend', this.handleTouchEnd.bind(this));\n    this.canvas.removeEventListener('touchmove', this.handleTouchMove.bind(this));\n\n    // Wheel events\n    this.canvas.removeEventListener('wheel', this.handleWheel.bind(this));\n\n    // Focus events\n    this.canvas.removeEventListener('focus', this.handleFocus.bind(this));\n    this.canvas.removeEventListener('blur', this.handleBlur.bind(this));\n\n    this.logger.info('Event listeners removed');\n  }\n\n  private handleMouseDown(event: globalThis.MouseEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomMouseEvent = {\n      type: 'mousedown',\n      button: event.button,\n      x: this.getRelativeX(event.clientX),\n      y: this.getRelativeY(event.clientY),\n      modifiers: this.getModifiers(event)\n    };\n\n    this.mousePosition = { x: customEvent.x, y: customEvent.y };\n    this.pressedButtons.add(event.button);\n\n    this.addInputEvent('mouse', 'mousedown', customEvent);\n  }\n\n  private handleMouseUp(event: globalThis.MouseEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomMouseEvent = {\n      type: 'mouseup',\n      button: event.button,\n      x: this.getRelativeX(event.clientX),\n      y: this.getRelativeY(event.clientY),\n      modifiers: this.getModifiers(event)\n    };\n\n    this.mousePosition = { x: customEvent.x, y: customEvent.y };\n    this.pressedButtons.delete(event.button);\n\n    this.addInputEvent('mouse', 'mouseup', customEvent);\n  }\n\n  private handleMouseMove(event: globalThis.MouseEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const newX = this.getRelativeX(event.clientX);\n    const newY = this.getRelativeY(event.clientY);\n    const deltaX = newX - this.mousePosition.x;\n    const deltaY = newY - this.mousePosition.y;\n\n    const customEvent: CustomMouseEvent = {\n      type: 'mousemove',\n      button: event.button,\n      x: newX,\n      y: newY,\n      deltaX,\n      deltaY,\n      modifiers: this.getModifiers(event)\n    };\n\n    this.mousePosition = { x: newX, y: newY };\n\n    this.addInputEvent('mouse', 'mousemove', customEvent);\n  }\n\n  private handleClick(event: globalThis.MouseEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomMouseEvent = {\n      type: 'click',\n      button: event.button,\n      x: this.getRelativeX(event.clientX),\n      y: this.getRelativeY(event.clientY),\n      modifiers: this.getModifiers(event)\n    };\n\n    this.addInputEvent('mouse', 'click', customEvent);\n  }\n\n  private handleDoubleClick(event: globalThis.MouseEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomMouseEvent = {\n      type: 'dblclick',\n      button: event.button,\n      x: this.getRelativeX(event.clientX),\n      y: this.getRelativeY(event.clientY),\n      modifiers: this.getModifiers(event)\n    };\n\n    this.addInputEvent('mouse', 'dblclick', customEvent);\n  }\n\n  private handleContextMenu(event: globalThis.MouseEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomMouseEvent = {\n      type: 'contextmenu',\n      button: event.button,\n      x: this.getRelativeX(event.clientX),\n      y: this.getRelativeY(event.clientY),\n      modifiers: this.getModifiers(event)\n    };\n\n    this.addInputEvent('mouse', 'contextmenu', customEvent);\n  }\n\n  private handleKeyDown(event: globalThis.KeyboardEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomKeyboardEvent = {\n      type: 'keydown',\n      key: event.key,\n      keyCode: event.keyCode,\n      code: event.code,\n      modifiers: this.getModifiers(event),\n      repeat: event.repeat\n    };\n\n    this.pressedKeys.add(event.key);\n\n    this.addInputEvent('keyboard', 'keydown', customEvent);\n  }\n\n  private handleKeyUp(event: globalThis.KeyboardEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomKeyboardEvent = {\n      type: 'keyup',\n      key: event.key,\n      keyCode: event.keyCode,\n      code: event.code,\n      modifiers: this.getModifiers(event),\n      repeat: event.repeat\n    };\n\n    this.pressedKeys.delete(event.key);\n\n    this.addInputEvent('keyboard', 'keyup', customEvent);\n  }\n\n  private handleKeyPress(event: globalThis.KeyboardEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomKeyboardEvent = {\n      type: 'keypress',\n      key: event.key,\n      keyCode: event.keyCode,\n      code: event.code,\n      modifiers: this.getModifiers(event),\n      repeat: event.repeat\n    };\n\n    this.addInputEvent('keyboard', 'keypress', customEvent);\n  }\n\n  private handleTouchStart(event: globalThis.TouchEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomTouchEvent = {\n      type: 'touchstart',\n      touches: this.getTouchArray(event.touches),\n      changedTouches: this.getTouchArray(event.changedTouches)\n    };\n\n    this.addInputEvent('touch', 'touchstart', customEvent);\n  }\n\n  private handleTouchEnd(event: globalThis.TouchEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomTouchEvent = {\n      type: 'touchend',\n      touches: this.getTouchArray(event.touches),\n      changedTouches: this.getTouchArray(event.changedTouches)\n    };\n\n    this.addInputEvent('touch', 'touchend', customEvent);\n  }\n\n  private handleTouchMove(event: globalThis.TouchEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomTouchEvent = {\n      type: 'touchmove',\n      touches: this.getTouchArray(event.touches),\n      changedTouches: this.getTouchArray(event.changedTouches)\n    };\n\n    this.addInputEvent('touch', 'touchmove', customEvent);\n  }\n\n  private handleWheel(event: globalThis.WheelEvent): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    const customEvent: CustomWheelEvent = {\n      type: 'wheel',\n      deltaX: event.deltaX,\n      deltaY: event.deltaY,\n      deltaZ: event.deltaZ,\n      deltaMode: event.deltaMode,\n      x: this.getRelativeX(event.clientX),\n      y: this.getRelativeY(event.clientY),\n      modifiers: this.getModifiers(event)\n    };\n\n    this.addInputEvent('wheel', 'wheel', customEvent);\n  }\n\n  private handleFocus(event: globalThis.FocusEvent): void {\n    this.logger.info('Canvas focused');\n  }\n\n  private handleBlur(event: globalThis.FocusEvent): void {\n    this.logger.info('Canvas blurred');\n  }\n\n  private getRelativeX(clientX: number): number {\n    if (!this.canvas) return clientX;\n    const rect = this.canvas.getBoundingClientRect();\n    return (clientX - rect.left) / rect.width * this.canvas.width;\n  }\n\n  private getRelativeY(clientY: number): number {\n    if (!this.canvas) return clientY;\n    const rect = this.canvas.getBoundingClientRect();\n    return (clientY - rect.top) / rect.height * this.canvas.height;\n  }\n\n  private getModifiers(event: globalThis.MouseEvent | globalThis.KeyboardEvent | globalThis.WheelEvent): {\n    ctrl: boolean;\n    alt: boolean;\n    shift: boolean;\n    meta: boolean;\n  } {\n    return {\n      ctrl: event.ctrlKey,\n      alt: event.altKey,\n      shift: event.shiftKey,\n      meta: event.metaKey\n    };\n  }\n\n  private getTouchArray(touchList: globalThis.TouchList): Array<{\n    id: number;\n    x: number;\n    y: number;\n    pressure: number;\n  }> {\n    const touches: Array<{\n      id: number;\n      x: number;\n      y: number;\n      pressure: number;\n    }> = [];\n\n    for (let i = 0; i < touchList.length; i++) {\n      const touch = touchList[i];\n      touches.push({\n        id: touch.identifier,\n        x: this.getRelativeX(touch.clientX),\n        y: this.getRelativeY(touch.clientY),\n        pressure: touch.force || 1.0\n      });\n    }\n\n    return touches;\n  }\n\n  private addInputEvent(type: string, action: string, data: any): void {\n    if (!this.isEnabled || !this.isCapturing) return;\n\n    const inputEvent: InputEvent = {\n      type: type as 'mouse' | 'keyboard' | 'touch' | 'wheel',\n      action,\n      data,\n      timestamp: Date.now()\n    };\n\n    this.inputQueue.push(inputEvent);\n\n    // Limit queue size\n    if (this.inputQueue.length > this.maxQueueSize) {\n      this.inputQueue.shift();\n    }\n\n    this.emit('input', inputEvent);\n  }\n\n  private setupInputProcessing(): void {\n    this.processingInterval = setInterval(() => {\n      this.processInputQueue();\n    }, 16); // ~60 FPS\n  }\n\n  private processInputQueue(): void {\n    if (this.inputQueue.length === 0) return;\n\n    const events = [...this.inputQueue];\n    this.inputQueue = [];\n\n    // Send events to connection manager\n    try {\n      this.connectionManager.sendInputEvents(events);\n    } catch (error) {\n      this.logger.error('Failed to send input events', error as Error);\n    }\n  }\n\n  getPressedKeys(): string[] {\n    return Array.from(this.pressedKeys);\n  }\n\n  getPressedButtons(): number[] {\n    return Array.from(this.pressedButtons);\n  }\n\n  clearPressedKeys(): void {\n    this.pressedKeys.clear();\n  }\n\n  clearPressedButtons(): void {\n    this.pressedButtons.clear();\n  }\n\n  destroy(): void {\n    this.disable();\n    this.stopCapture();\n    this.detachFromCanvas();\n    \n    if (this.processingInterval) {\n      clearInterval(this.processingInterval);\n      this.processingInterval = null;\n    }\n\n    this.logger.info('Input handler destroyed');\n  }\n} ","import { Logger } from '../../utils/Logger';\nimport { Config } from '../../utils/Config';\nimport { ConnectionManager, ConnectionOptions } from '../../services/ConnectionManager';\n\nexport interface ConnectionFormData {\n  host: string;\n  port: number;\n  secure: boolean;\n  token?: string;\n  quality: 'low' | 'medium' | 'high' | 'ultra';\n  enableAudio: boolean;\n  enableVideo: boolean;\n  enableClipboard: boolean;\n  enableFileTransfer: boolean;\n}\n\nexport class ConnectionPanel {\n  private logger = new Logger('ConnectionPanel');\n  private config = Config.getInstance();\n  private connectionManager: ConnectionManager;\n  \n  private formData: ConnectionFormData;\n  private isConnecting = false;\n  private errorMessage = '';\n\n  constructor(connectionManager: ConnectionManager) {\n    this.connectionManager = connectionManager;\n    this.formData = this.getDefaultFormData();\n    this.setupEventListeners();\n  }\n\n  render(): string {\n    return `\n      <div class=\"connection-panel\">\n        <div class=\"connection-header\">\n          <h2>Connect to Remote Desktop</h2>\n          <p class=\"connection-subtitle\">Enter the connection details to connect to your remote desktop agent</p>\n        </div>\n        \n        <form class=\"connection-form\" id=\"connection-form\">\n          <div class=\"form-group\">\n            <label for=\"host\">Host Address</label>\n            <input \n              type=\"text\" \n              id=\"host\" \n              name=\"host\" \n              value=\"${this.formData.host}\"\n              placeholder=\"localhost or IP address\"\n              required\n            />\n          </div>\n          \n          <div class=\"form-group\">\n            <label for=\"port\">Port</label>\n            <input \n              type=\"number\" \n              id=\"port\" \n              name=\"port\" \n              value=\"${this.formData.port}\"\n              min=\"1\" \n              max=\"65535\" \n              required\n            />\n          </div>\n          \n          <div class=\"form-group\">\n            <label class=\"checkbox-label\">\n              <input \n                type=\"checkbox\" \n                id=\"secure\" \n                name=\"secure\"\n                ${this.formData.secure ? 'checked' : ''}\n              />\n              <span class=\"checkmark\"></span>\n              Use secure connection (WSS/HTTPS)\n            </label>\n          </div>\n          \n          <div class=\"form-group\">\n            <label for=\"token\">Authentication Token (Optional)</label>\n            <input \n              type=\"password\" \n              id=\"token\" \n              name=\"token\" \n              value=\"${this.formData.token || ''}\"\n              placeholder=\"Enter authentication token\"\n            />\n          </div>\n          \n          <div class=\"form-group\">\n            <label for=\"quality\">Video Quality</label>\n            <select id=\"quality\" name=\"quality\">\n              <option value=\"low\" ${this.formData.quality === 'low' ? 'selected' : ''}>Low (480p)</option>\n              <option value=\"medium\" ${this.formData.quality === 'medium' ? 'selected' : ''}>Medium (720p)</option>\n              <option value=\"high\" ${this.formData.quality === 'high' ? 'selected' : ''}>High (1080p)</option>\n              <option value=\"ultra\" ${this.formData.quality === 'ultra' ? 'selected' : ''}>Ultra (4K)</option>\n            </select>\n          </div>\n          \n          <div class=\"form-group\">\n            <label class=\"checkbox-label\">\n              <input \n                type=\"checkbox\" \n                id=\"enableVideo\" \n                name=\"enableVideo\"\n                ${this.formData.enableVideo ? 'checked' : ''}\n              />\n              <span class=\"checkmark\"></span>\n              Enable video streaming\n            </label>\n          </div>\n          \n          <div class=\"form-group\">\n            <label class=\"checkbox-label\">\n              <input \n                type=\"checkbox\" \n                id=\"enableAudio\" \n                name=\"enableAudio\"\n                ${this.formData.enableAudio ? 'checked' : ''}\n              />\n              <span class=\"checkmark\"></span>\n              Enable audio streaming\n            </label>\n          </div>\n          \n          <div class=\"form-group\">\n            <label class=\"checkbox-label\">\n              <input \n                type=\"checkbox\" \n                id=\"enableClipboard\" \n                name=\"enableClipboard\"\n                ${this.formData.enableClipboard ? 'checked' : ''}\n              />\n              <span class=\"checkmark\"></span>\n              Enable clipboard sharing\n            </label>\n          </div>\n          \n          <div class=\"form-group\">\n            <label class=\"checkbox-label\">\n              <input \n                type=\"checkbox\" \n                id=\"enableFileTransfer\" \n                name=\"enableFileTransfer\"\n                ${this.formData.enableFileTransfer ? 'checked' : ''}\n              />\n              <span class=\"checkmark\"></span>\n              Enable file transfer\n            </label>\n          </div>\n          \n          ${this.errorMessage ? `\n            <div class=\"error-message\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n                <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"/>\n                <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"/>\n              </svg>\n              ${this.errorMessage}\n            </div>\n          ` : ''}\n          \n          <div class=\"form-actions\">\n            <button \n              type=\"submit\" \n              class=\"btn btn-primary connect-btn\"\n              ${this.isConnecting ? 'disabled' : ''}\n            >\n              ${this.isConnecting ? `\n                <div class=\"spinner\"></div>\n                Connecting...\n              ` : `\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <path d=\"M5 12h14\"/>\n                  <path d=\"m12 5 7 7-7 7\"/>\n                </svg>\n                Connect\n              `}\n            </button>\n            \n            <button type=\"button\" class=\"btn btn-secondary\" id=\"quick-connect-btn\">\n              Quick Connect\n            </button>\n          </div>\n        </form>\n        \n        <div class=\"connection-help\">\n          <h3>Quick Start</h3>\n          <ol>\n            <li>Ensure the Real Remote Desktop Agent is running on your target machine</li>\n            <li>Enter the host address (usually localhost or the machine's IP)</li>\n            <li>Use the default port 8080 unless you've configured a different port</li>\n            <li>Click \"Connect\" to establish the connection</li>\n          </ol>\n          \n          <div class=\"help-tips\">\n            <h4>Tips:</h4>\n            <ul>\n              <li>Use \"Quick Connect\" to connect with default settings</li>\n              <li>Enable secure connection for encrypted communication</li>\n              <li>Lower quality settings work better on slower connections</li>\n              <li>Clipboard and file transfer require agent support</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private getDefaultFormData(): ConnectionFormData {\n    const defaultConnection = this.config.getDefaultConnection();\n    \n    return {\n      host: defaultConnection.host,\n      port: defaultConnection.port,\n      secure: defaultConnection.secure,\n      token: '',\n      quality: this.config.getQuality(),\n      enableAudio: this.config.get('webrtc').enableAudio,\n      enableVideo: this.config.get('webrtc').enableVideo,\n      enableClipboard: this.config.get('security').enableClipboard,\n      enableFileTransfer: this.config.get('security').enableFileTransfer\n    };\n  }\n\n  private setupEventListeners(): void {\n    // Form submission\n    document.addEventListener('submit', (event) => {\n      if (event.target && (event.target as HTMLElement).id === 'connection-form') {\n        event.preventDefault();\n        this.handleFormSubmit();\n      }\n    });\n\n    // Quick connect button\n    document.addEventListener('click', (event) => {\n      if (event.target && (event.target as HTMLElement).id === 'quick-connect-btn') {\n        this.handleQuickConnect();\n      }\n    });\n\n    // Form field changes\n    document.addEventListener('change', (event) => {\n      if (event.target && (event.target as HTMLElement).closest('#connection-form')) {\n        this.handleFormChange(event.target as HTMLInputElement | HTMLSelectElement);\n      }\n    });\n  }\n\n  private handleFormSubmit(): void {\n    if (this.isConnecting) return;\n\n    this.errorMessage = '';\n    \n    // Validate form\n    if (!this.validateForm()) {\n      return;\n    }\n\n    this.isConnecting = true;\n    this.updateUI();\n\n    // Convert form data to connection options\n    const options: ConnectionOptions = {\n      host: this.formData.host,\n      port: this.formData.port,\n      secure: this.formData.secure,\n      token: this.formData.token || undefined,\n      quality: this.formData.quality,\n      enableAudio: this.formData.enableAudio,\n      enableVideo: this.formData.enableVideo,\n      enableClipboard: this.formData.enableClipboard,\n      enableFileTransfer: this.formData.enableFileTransfer\n    };\n\n    // Attempt connection\n    this.connectionManager.connect(options)\n      .then(() => {\n        this.logger.info('Connection established successfully');\n        this.saveFormData();\n      })\n      .catch((error) => {\n        this.logger.error('Connection failed', error);\n        this.errorMessage = this.getErrorMessage(error);\n        this.isConnecting = false;\n        this.updateUI();\n      });\n  }\n\n  private handleQuickConnect(): void {\n    // Use default settings for quick connect\n    const options: ConnectionOptions = {\n      host: 'localhost',\n      port: 8080,\n      secure: false,\n      quality: 'medium',\n      enableAudio: false,\n      enableVideo: true,\n      enableClipboard: true,\n      enableFileTransfer: true\n    };\n\n    this.isConnecting = true;\n    this.updateUI();\n\n    this.connectionManager.connect(options)\n      .then(() => {\n        this.logger.info('Quick connect successful');\n      })\n      .catch((error) => {\n        this.logger.error('Quick connect failed', error);\n        this.errorMessage = this.getErrorMessage(error);\n        this.isConnecting = false;\n        this.updateUI();\n      });\n  }\n\n  private handleFormChange(element: HTMLInputElement | HTMLSelectElement): void {\n    const name = element.name;\n    const value = element.type === 'checkbox' ? (element as HTMLInputElement).checked : element.value;\n\n    switch (name) {\n      case 'host':\n        this.formData.host = value as string;\n        break;\n      case 'port':\n        this.formData.port = parseInt(value as string, 10);\n        break;\n      case 'secure':\n        this.formData.secure = value as boolean;\n        break;\n      case 'token':\n        this.formData.token = value as string;\n        break;\n      case 'quality':\n        this.formData.quality = value as 'low' | 'medium' | 'high' | 'ultra';\n        break;\n      case 'enableVideo':\n        this.formData.enableVideo = value as boolean;\n        break;\n      case 'enableAudio':\n        this.formData.enableAudio = value as boolean;\n        break;\n      case 'enableClipboard':\n        this.formData.enableClipboard = value as boolean;\n        break;\n      case 'enableFileTransfer':\n        this.formData.enableFileTransfer = value as boolean;\n        break;\n    }\n  }\n\n  private validateForm(): boolean {\n    // Validate host\n    if (!this.formData.host || this.formData.host.trim() === '') {\n      this.errorMessage = 'Host address is required';\n      this.updateUI();\n      return false;\n    }\n\n    // Validate port\n    if (this.formData.port < 1 || this.formData.port > 65535) {\n      this.errorMessage = 'Port must be between 1 and 65535';\n      this.updateUI();\n      return false;\n    }\n\n    // Validate host format\n    const hostRegex = /^([a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$|^localhost$|^(\\d{1,3}\\.){3}\\d{1,3}$/;\n    if (!hostRegex.test(this.formData.host)) {\n      this.errorMessage = 'Invalid host address format';\n      this.updateUI();\n      return false;\n    }\n\n    return true;\n  }\n\n  private getErrorMessage(error: any): string {\n    if (typeof error === 'string') {\n      return error;\n    }\n    \n    if (error instanceof Error) {\n      return error.message;\n    }\n    \n    if (error && error.message) {\n      return error.message;\n    }\n    \n    return 'Connection failed. Please check your settings and try again.';\n  }\n\n  private saveFormData(): void {\n    // Save connection settings to config\n    this.config.setDefaultConnection(\n      this.formData.host,\n      this.formData.port,\n      this.formData.secure\n    );\n    \n    this.config.setQuality(this.formData.quality);\n    this.config.set('webrtc.enableAudio', this.formData.enableAudio);\n    this.config.set('webrtc.enableVideo', this.formData.enableVideo);\n    this.config.set('security.enableClipboard', this.formData.enableClipboard);\n    this.config.set('security.enableFileTransfer', this.formData.enableFileTransfer);\n  }\n\n  private updateUI(): void {\n    const form = document.getElementById('connection-form');\n    if (form) {\n      // Update form with current data\n      const hostInput = form.querySelector('#host') as HTMLInputElement;\n      const portInput = form.querySelector('#port') as HTMLInputElement;\n      const secureInput = form.querySelector('#secure') as HTMLInputElement;\n      const tokenInput = form.querySelector('#token') as HTMLInputElement;\n      const qualitySelect = form.querySelector('#quality') as HTMLSelectElement;\n      const enableVideoInput = form.querySelector('#enableVideo') as HTMLInputElement;\n      const enableAudioInput = form.querySelector('#enableAudio') as HTMLInputElement;\n      const enableClipboardInput = form.querySelector('#enableClipboard') as HTMLInputElement;\n      const enableFileTransferInput = form.querySelector('#enableFileTransfer') as HTMLInputElement;\n\n      if (hostInput) hostInput.value = this.formData.host;\n      if (portInput) portInput.value = this.formData.port.toString();\n      if (secureInput) secureInput.checked = this.formData.secure;\n      if (tokenInput) tokenInput.value = this.formData.token || '';\n      if (qualitySelect) qualitySelect.value = this.formData.quality;\n      if (enableVideoInput) enableVideoInput.checked = this.formData.enableVideo;\n      if (enableAudioInput) enableAudioInput.checked = this.formData.enableAudio;\n      if (enableClipboardInput) enableClipboardInput.checked = this.formData.enableClipboard;\n      if (enableFileTransferInput) enableFileTransferInput.checked = this.formData.enableFileTransfer;\n\n      // Update connect button\n      const connectBtn = form.querySelector('.connect-btn') as HTMLButtonElement;\n      if (connectBtn) {\n        connectBtn.disabled = this.isConnecting;\n        connectBtn.innerHTML = this.isConnecting ? `\n          <div class=\"spinner\"></div>\n          Connecting...\n        ` : `\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n            <path d=\"M5 12h14\"/>\n            <path d=\"m12 5 7 7-7 7\"/>\n          </svg>\n          Connect\n        `;\n      }\n    }\n\n    // Update error message\n    const errorElement = document.querySelector('.error-message');\n    if (errorElement) {\n      if (this.errorMessage) {\n        errorElement.innerHTML = `\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n            <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n            <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"/>\n            <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"/>\n          </svg>\n          ${this.errorMessage}\n        `;\n        errorElement.style.display = 'block';\n      } else {\n        errorElement.style.display = 'none';\n      }\n    }\n  }\n\n  // Public methods\n  setFormData(data: Partial<ConnectionFormData>): void {\n    this.formData = { ...this.formData, ...data };\n    this.updateUI();\n  }\n\n  getFormData(): ConnectionFormData {\n    return { ...this.formData };\n  }\n\n  reset(): void {\n    this.formData = this.getDefaultFormData();\n    this.errorMessage = '';\n    this.isConnecting = false;\n    this.updateUI();\n  }\n\n  setError(message: string): void {\n    this.errorMessage = message;\n    this.updateUI();\n  }\n\n  clearError(): void {\n    this.errorMessage = '';\n    this.updateUI();\n  }\n} ","import { Logger } from '../../utils/Logger';\nimport { Config } from '../../utils/Config';\nimport { ConnectionManager } from '../../services/websocket/ConnectionManager';\n\nexport interface PerformanceStats {\n  fps: number;\n  latency: number;\n  bitrate: number;\n  packetLoss: number;\n  jitter: number;\n  frameDrops: number;\n  bytesReceived: number;\n  bytesSent: number;\n  cpuUsage: number;\n  memoryUsage: number;\n  resolution: string;\n  quality: string;\n}\n\nexport class PerformanceOverlay {\n  private logger = new Logger('PerformanceOverlay');\n  private connectionManager: ConnectionManager;\n  \n  private stats: PerformanceStats = {\n    fps: 0,\n    latency: 0,\n    bitrate: 0,\n    packetLoss: 0,\n    jitter: 0,\n    frameDrops: 0,\n    bytesReceived: 0,\n    bytesSent: 0,\n    cpuUsage: 0,\n    memoryUsage: 0,\n    resolution: 'Unknown',\n    quality: 'Unknown'\n  };\n  \n  private isVisible = false;\n  private updateInterval: NodeJS.Timeout | null = null;\n  private frameCount = 0;\n  private lastFrameTime = 0;\n\n  constructor(connectionManager?: ConnectionManager) {\n    this.connectionManager = connectionManager || new ConnectionManager();\n    this.setupEventListeners();\n  }\n\n  render(): string {\n    return `\n      <div class=\"performance-overlay\" id=\"performance-overlay\">\n        <div class=\"performance-header\">\n          <h3>Performance Monitor</h3>\n          <button class=\"btn btn-icon close-btn\" id=\"close-performance-overlay\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"performance-content\">\n          <div class=\"performance-grid\">\n            <div class=\"performance-card\">\n              <div class=\"card-header\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <polyline points=\"22,12 18,12 15,21 9,3 6,12 2,12\"/>\n                </svg>\n                <span>Frame Rate</span>\n              </div>\n              <div class=\"card-value\" id=\"fps-value\">${this.stats.fps.toFixed(1)} FPS</div>\n              <div class=\"card-bar\">\n                <div class=\"bar-fill\" style=\"width: ${Math.min(this.stats.fps / 60 * 100, 100)}%\"></div>\n              </div>\n            </div>\n            \n            <div class=\"performance-card\">\n              <div class=\"card-header\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n                  <polyline points=\"12,6 12,12 16,14\"/>\n                </svg>\n                <span>Latency</span>\n              </div>\n              <div class=\"card-value\" id=\"latency-value\">${this.stats.latency}ms</div>\n              <div class=\"card-bar\">\n                <div class=\"bar-fill ${this.getLatencyColor()}\" style=\"width: ${Math.min(this.stats.latency / 100 * 100, 100)}%\"></div>\n              </div>\n            </div>\n            \n            <div class=\"performance-card\">\n              <div class=\"card-header\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"/>\n                  <polyline points=\"14,2 14,8 20,8\"/>\n                  <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"/>\n                  <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"/>\n                  <polyline points=\"10,9 9,9 8,9\"/>\n                </svg>\n                <span>Bitrate</span>\n              </div>\n              <div class=\"card-value\" id=\"bitrate-value\">${this.formatBitrate(this.stats.bitrate)}</div>\n              <div class=\"card-bar\">\n                <div class=\"bar-fill\" style=\"width: ${Math.min(this.stats.bitrate / 5000000 * 100, 100)}%\"></div>\n              </div>\n            </div>\n            \n            <div class=\"performance-card\">\n              <div class=\"card-header\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"/>\n                  <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"/>\n                  <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"/>\n                </svg>\n                <span>Packet Loss</span>\n              </div>\n              <div class=\"card-value\" id=\"packet-loss-value\">${this.stats.packetLoss.toFixed(2)}%</div>\n              <div class=\"card-bar\">\n                <div class=\"bar-fill ${this.getPacketLossColor()}\" style=\"width: ${Math.min(this.stats.packetLoss, 100)}%\"></div>\n              </div>\n            </div>\n            \n            <div class=\"performance-card\">\n              <div class=\"card-header\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <path d=\"M22 12h-4l-3 9L9 3l-3 9H2\"/>\n                </svg>\n                <span>Jitter</span>\n              </div>\n              <div class=\"card-value\" id=\"jitter-value\">${this.stats.jitter.toFixed(1)}ms</div>\n              <div class=\"card-bar\">\n                <div class=\"bar-fill ${this.getJitterColor()}\" style=\"width: ${Math.min(this.stats.jitter / 50 * 100, 100)}%\"></div>\n              </div>\n            </div>\n            \n            <div class=\"performance-card\">\n              <div class=\"card-header\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                  <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"/>\n                  <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"/>\n                  <polyline points=\"21,15 16,10 5,21\"/>\n                </svg>\n                <span>Frame Drops</span>\n              </div>\n              <div class=\"card-value\" id=\"frame-drops-value\">${this.stats.frameDrops}</div>\n              <div class=\"card-bar\">\n                <div class=\"bar-fill ${this.getFrameDropsColor()}\" style=\"width: ${Math.min(this.stats.frameDrops / 10 * 100, 100)}%\"></div>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"performance-details\">\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">Resolution:</span>\n              <span class=\"detail-value\" id=\"resolution-value\">${this.stats.resolution}</span>\n            </div>\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">Quality:</span>\n              <span class=\"detail-value\" id=\"quality-value\">${this.stats.quality}</span>\n            </div>\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">Data Received:</span>\n              <span class=\"detail-value\" id=\"bytes-received-value\">${this.formatBytes(this.stats.bytesReceived)}</span>\n            </div>\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">Data Sent:</span>\n              <span class=\"detail-value\" id=\"bytes-sent-value\">${this.formatBytes(this.stats.bytesSent)}</span>\n            </div>\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">CPU Usage:</span>\n              <span class=\"detail-value\" id=\"cpu-usage-value\">${this.stats.cpuUsage.toFixed(1)}%</span>\n            </div>\n            <div class=\"detail-row\">\n              <span class=\"detail-label\">Memory Usage:</span>\n              <span class=\"detail-value\" id=\"memory-usage-value\">${this.formatBytes(this.stats.memoryUsage)}</span>\n            </div>\n          </div>\n          \n          <div class=\"performance-actions\">\n            <button class=\"btn btn-sm btn-primary\" id=\"export-stats-btn\">\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/>\n                <polyline points=\"7,10 12,15 17,10\"/>\n                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"/>\n              </svg>\n              Export Stats\n            </button>\n            <button class=\"btn btn-sm btn-secondary\" id=\"reset-stats-btn\">\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <polyline points=\"1,4 1,10 7,10\"/>\n                <path d=\"M3.51,15a9,9,0,1,0,2.13-9.36L1,10\"/>\n              </svg>\n              Reset Stats\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  show(): void {\n    this.isVisible = true;\n    this.startUpdates();\n    this.logger.info('Performance overlay shown');\n  }\n\n  hide(): void {\n    this.isVisible = false;\n    this.stopUpdates();\n    this.logger.info('Performance overlay hidden');\n  }\n\n  updateFrameRate(): void {\n    const now = performance.now();\n    this.frameCount++;\n    \n    if (this.lastFrameTime > 0) {\n      const delta = now - this.lastFrameTime;\n      if (delta >= 1000) { // Update FPS every second\n        this.stats.fps = (this.frameCount * 1000) / delta;\n        this.frameCount = 0;\n        this.lastFrameTime = now;\n        this.updateUI();\n      }\n    } else {\n      this.lastFrameTime = now;\n    }\n  }\n\n  updateStats(newStats: Partial<PerformanceStats>): void {\n    this.stats = { ...this.stats, ...newStats };\n    this.updateUI();\n  }\n\n  private setupEventListeners(): void {\n    // Close button\n    document.addEventListener('click', (event) => {\n      if (event.target && (event.target as HTMLElement).id === 'close-performance-overlay') {\n        this.hide();\n      }\n    });\n\n    // Export stats button\n    document.addEventListener('click', (event) => {\n      if (event.target && (event.target as HTMLElement).id === 'export-stats-btn') {\n        this.exportStats();\n      }\n    });\n\n    // Reset stats button\n    document.addEventListener('click', (event) => {\n      if (event.target && (event.target as HTMLElement).id === 'reset-stats-btn') {\n        this.resetStats();\n      }\n    });\n  }\n\n  private startUpdates(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n    }\n    \n    this.updateInterval = setInterval(() => {\n      this.updateFromConnectionManager();\n    }, 1000);\n  }\n\n  private stopUpdates(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n  }\n\n  private updateFromConnectionManager(): void {\n    try {\n      const connectionInfo = this.connectionManager.getConnectionInfo();\n      if (connectionInfo) {\n        this.stats.latency = connectionInfo.latency;\n        this.stats.bytesReceived = connectionInfo.bytesReceived;\n        this.stats.bytesSent = connectionInfo.bytesSent;\n        this.stats.framesReceived = connectionInfo.framesReceived;\n        this.stats.framesDropped = connectionInfo.framesDropped;\n      }\n\n      // Get WebRTC stats if available\n      const webrtcService = this.connectionManager.getWebRTCService();\n      const webrtcStats = webrtcService.getStats();\n      if (webrtcStats) {\n        this.stats.bitrate = webrtcStats.bitrate;\n        this.stats.packetLoss = webrtcStats.packetLoss;\n        this.stats.jitter = webrtcStats.jitter;\n      }\n\n      // Get system stats\n      this.updateSystemStats();\n      \n      this.updateUI();\n    } catch (error) {\n      this.logger.error('Failed to update performance stats', error);\n    }\n  }\n\n  private updateSystemStats(): void {\n    // Simulate system stats (in a real implementation, you'd get these from the browser)\n    if ('memory' in performance) {\n      const memory = (performance as any).memory;\n      this.stats.memoryUsage = memory.usedJSHeapSize;\n    }\n    \n    // CPU usage is not directly available in browsers, so we simulate it\n    this.stats.cpuUsage = Math.random() * 20 + 5; // Simulate 5-25% CPU usage\n  }\n\n  private updateUI(): void {\n    if (!this.isVisible) return;\n\n    // Update all the stat values\n    const elements = {\n      'fps-value': `${this.stats.fps.toFixed(1)} FPS`,\n      'latency-value': `${this.stats.latency}ms`,\n      'bitrate-value': this.formatBitrate(this.stats.bitrate),\n      'packet-loss-value': `${this.stats.packetLoss.toFixed(2)}%`,\n      'jitter-value': `${this.stats.jitter.toFixed(1)}ms`,\n      'frame-drops-value': this.stats.frameDrops.toString(),\n      'resolution-value': this.stats.resolution,\n      'quality-value': this.stats.quality,\n      'bytes-received-value': this.formatBytes(this.stats.bytesReceived),\n      'bytes-sent-value': this.formatBytes(this.stats.bytesSent),\n      'cpu-usage-value': `${this.stats.cpuUsage.toFixed(1)}%`,\n      'memory-usage-value': this.formatBytes(this.stats.memoryUsage)\n    };\n\n    for (const [id, value] of Object.entries(elements)) {\n      const element = document.getElementById(id);\n      if (element) {\n        element.textContent = value;\n      }\n    }\n\n    // Update progress bars\n    this.updateProgressBars();\n  }\n\n  private updateProgressBars(): void {\n    const fpsBar = document.querySelector('#fps-value')?.parentElement?.querySelector('.bar-fill') as HTMLElement;\n    if (fpsBar) {\n      fpsBar.style.width = `${Math.min(this.stats.fps / 60 * 100, 100)}%`;\n    }\n\n    const latencyBar = document.querySelector('#latency-value')?.parentElement?.querySelector('.bar-fill') as HTMLElement;\n    if (latencyBar) {\n      latencyBar.style.width = `${Math.min(this.stats.latency / 100 * 100, 100)}%`;\n      latencyBar.className = `bar-fill ${this.getLatencyColor()}`;\n    }\n\n    const bitrateBar = document.querySelector('#bitrate-value')?.parentElement?.querySelector('.bar-fill') as HTMLElement;\n    if (bitrateBar) {\n      bitrateBar.style.width = `${Math.min(this.stats.bitrate / 5000000 * 100, 100)}%`;\n    }\n\n    const packetLossBar = document.querySelector('#packet-loss-value')?.parentElement?.querySelector('.bar-fill') as HTMLElement;\n    if (packetLossBar) {\n      packetLossBar.style.width = `${Math.min(this.stats.packetLoss, 100)}%`;\n      packetLossBar.className = `bar-fill ${this.getPacketLossColor()}`;\n    }\n\n    const jitterBar = document.querySelector('#jitter-value')?.parentElement?.querySelector('.bar-fill') as HTMLElement;\n    if (jitterBar) {\n      jitterBar.style.width = `${Math.min(this.stats.jitter / 50 * 100, 100)}%`;\n      jitterBar.className = `bar-fill ${this.getJitterColor()}`;\n    }\n\n    const frameDropsBar = document.querySelector('#frame-drops-value')?.parentElement?.querySelector('.bar-fill') as HTMLElement;\n    if (frameDropsBar) {\n      frameDropsBar.style.width = `${Math.min(this.stats.frameDrops / 10 * 100, 100)}%`;\n      frameDropsBar.className = `bar-fill ${this.getFrameDropsColor()}`;\n    }\n  }\n\n  private getLatencyColor(): string {\n    if (this.stats.latency < 50) return 'good';\n    if (this.stats.latency < 100) return 'warning';\n    return 'error';\n  }\n\n  private getPacketLossColor(): string {\n    if (this.stats.packetLoss < 1) return 'good';\n    if (this.stats.packetLoss < 5) return 'warning';\n    return 'error';\n  }\n\n  private getJitterColor(): string {\n    if (this.stats.jitter < 10) return 'good';\n    if (this.stats.jitter < 25) return 'warning';\n    return 'error';\n  }\n\n  private getFrameDropsColor(): string {\n    if (this.stats.frameDrops < 5) return 'good';\n    if (this.stats.frameDrops < 20) return 'warning';\n    return 'error';\n  }\n\n  private formatBitrate(bitrate: number): string {\n    if (bitrate < 1000) return `${bitrate} bps`;\n    if (bitrate < 1000000) return `${(bitrate / 1000).toFixed(1)} Kbps`;\n    return `${(bitrate / 1000000).toFixed(1)} Mbps`;\n  }\n\n  private formatBytes(bytes: number): string {\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n    return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;\n  }\n\n  private exportStats(): void {\n    const statsData = {\n      timestamp: new Date().toISOString(),\n      stats: this.stats,\n      connectionInfo: this.connectionManager.getConnectionInfo()\n    };\n\n    const blob = new Blob([JSON.stringify(statsData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `performance-stats-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    this.logger.info('Performance stats exported');\n  }\n\n  private resetStats(): void {\n    this.stats = {\n      fps: 0,\n      latency: 0,\n      bitrate: 0,\n      packetLoss: 0,\n      jitter: 0,\n      frameDrops: 0,\n      bytesReceived: 0,\n      bytesSent: 0,\n      cpuUsage: 0,\n      memoryUsage: 0,\n      resolution: 'Unknown',\n      quality: 'Unknown'\n    };\n    \n    this.frameCount = 0;\n    this.lastFrameTime = 0;\n    this.updateUI();\n    \n    this.logger.info('Performance stats reset');\n  }\n\n  // Public methods\n  getStats(): PerformanceStats {\n    return { ...this.stats };\n  }\n\n  setResolution(resolution: string): void {\n    this.stats.resolution = resolution;\n    this.updateUI();\n  }\n\n  setQuality(quality: string): void {\n    this.stats.quality = quality;\n    this.updateUI();\n  }\n\n  destroy(): void {\n    this.hide();\n    this.logger.info('Performance overlay destroyed');\n  }\n} ","import { Logger } from '../../utils/Logger';\nimport { Config } from '../../utils/Config';\n\nexport interface SettingsSection {\n  id: string;\n  title: string;\n  description: string;\n  settings: SettingItem[];\n}\n\nexport interface SettingItem {\n  id: string;\n  type: 'text' | 'number' | 'select' | 'checkbox' | 'textarea';\n  label: string;\n  description?: string;\n  value: any;\n  options?: { value: any; label: string }[];\n  min?: number;\n  max?: number;\n  step?: number;\n  placeholder?: string;\n}\n\nexport class SettingsPanel {\n  private logger = new Logger('SettingsPanel');\n  private config = Config.getInstance();\n  \n  private sections: SettingsSection[] = [];\n  private isVisible = false;\n  private hasUnsavedChanges = false;\n\n  constructor() {\n    this.initializeSections();\n    this.setupEventListeners();\n  }\n\n  render(): string {\n    return `\n      <div class=\"settings-panel\" id=\"settings-panel\">\n        <div class=\"settings-header\">\n          <h2>Settings</h2>\n          <button class=\"btn btn-icon close-btn\" id=\"close-settings-btn\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"/>\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"/>\n            </svg>\n          </button>\n        </div>\n        \n        <div class=\"settings-content\">\n          <div class=\"settings-sidebar\">\n            <nav class=\"settings-nav\">\n              ${this.sections.map(section => `\n                <button class=\"nav-item\" data-section=\"${section.id}\">\n                  <span class=\"nav-title\">${section.title}</span>\n                  <span class=\"nav-description\">${section.description}</span>\n                </button>\n              `).join('')}\n            </nav>\n          </div>\n          \n          <div class=\"settings-main\">\n            ${this.sections.map(section => `\n              <div class=\"settings-section\" id=\"section-${section.id}\" style=\"display: ${section.id === 'connection' ? 'block' : 'none'}\">\n                <div class=\"section-header\">\n                  <h3>${section.title}</h3>\n                  <p class=\"section-description\">${section.description}</p>\n                </div>\n                \n                <div class=\"section-content\">\n                  ${section.settings.map(setting => this.renderSetting(setting)).join('')}\n                </div>\n              </div>\n            `).join('')}\n          </div>\n        </div>\n        \n        <div class=\"settings-footer\">\n          <div class=\"footer-actions\">\n            <button class=\"btn btn-secondary\" id=\"reset-settings-btn\">\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <polyline points=\"1,4 1,10 7,10\"/>\n                <path d=\"M3.51,15a9,9,0,1,0,2.13-9.36L1,10\"/>\n              </svg>\n              Reset to Defaults\n            </button>\n            <button class=\"btn btn-outline\" id=\"export-settings-btn\">\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/>\n                <polyline points=\"7,10 12,15 17,10\"/>\n                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"/>\n              </svg>\n              Export Settings\n            </button>\n            <button class=\"btn btn-outline\" id=\"import-settings-btn\">\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/>\n                <polyline points=\"17,8 12,3 7,8\"/>\n                <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"/>\n              </svg>\n              Import Settings\n            </button>\n          </div>\n          \n          <div class=\"footer-buttons\">\n            <button class=\"btn btn-secondary\" id=\"cancel-settings-btn\">Cancel</button>\n            <button class=\"btn btn-primary\" id=\"save-settings-btn\" ${this.hasUnsavedChanges ? '' : 'disabled'}>\n              <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"/>\n                <polyline points=\"17,21 17,13 7,13 7,21\"/>\n                <polyline points=\"7,3 7,8 15,8\"/>\n              </svg>\n              Save Changes\n            </button>\n          </div>\n        </div>\n        \n        <input type=\"file\" id=\"import-settings-file\" accept=\".json\" style=\"display: none;\">\n      </div>\n    `;\n  }\n\n  show(): void {\n    this.isVisible = true;\n    this.hasUnsavedChanges = false;\n    this.updateUI();\n    this.logger.info('Settings panel shown');\n  }\n\n  hide(): void {\n    this.isVisible = false;\n    this.logger.info('Settings panel hidden');\n  }\n\n  private initializeSections(): void {\n    this.sections = [\n      {\n        id: 'connection',\n        title: 'Connection',\n        description: 'Configure connection settings and defaults',\n        settings: [\n          {\n            id: 'defaultHost',\n            type: 'text',\n            label: 'Default Host',\n            description: 'Default host address for connections',\n            value: this.config.get('connection.defaultHost'),\n            placeholder: 'localhost'\n          },\n          {\n            id: 'defaultPort',\n            type: 'number',\n            label: 'Default Port',\n            description: 'Default port number for connections',\n            value: this.config.get('connection.defaultPort'),\n            min: 1,\n            max: 65535\n          },\n          {\n            id: 'defaultSecure',\n            type: 'checkbox',\n            label: 'Use Secure Connection by Default',\n            description: 'Enable WSS/HTTPS by default',\n            value: this.config.get('connection.defaultSecure')\n          },\n          {\n            id: 'reconnectAttempts',\n            type: 'number',\n            label: 'Reconnection Attempts',\n            description: 'Maximum number of reconnection attempts',\n            value: this.config.get('connection.reconnectAttempts'),\n            min: 1,\n            max: 20\n          },\n          {\n            id: 'reconnectDelay',\n            type: 'number',\n            label: 'Reconnection Delay (ms)',\n            description: 'Delay between reconnection attempts',\n            value: this.config.get('connection.reconnectDelay'),\n            min: 100,\n            max: 10000,\n            step: 100\n          }\n        ]\n      },\n      {\n        id: 'display',\n        title: 'Display',\n        description: 'Configure video quality and display settings',\n        settings: [\n          {\n            id: 'defaultQuality',\n            type: 'select',\n            label: 'Default Quality',\n            description: 'Default video quality setting',\n            value: this.config.get('display.defaultQuality'),\n            options: [\n              { value: 'low', label: 'Low (480p)' },\n              { value: 'medium', label: 'Medium (720p)' },\n              { value: 'high', label: 'High (1080p)' },\n              { value: 'ultra', label: 'Ultra (4K)' }\n            ]\n          },\n          {\n            id: 'defaultScaleMode',\n            type: 'select',\n            label: 'Default Scale Mode',\n            description: 'How the remote desktop should be scaled',\n            value: this.config.get('display.defaultScaleMode'),\n            options: [\n              { value: 'fit', label: 'Fit to Screen' },\n              { value: 'fill', label: 'Fill Screen' },\n              { value: 'stretch', label: 'Stretch' }\n            ]\n          },\n          {\n            id: 'maintainAspectRatio',\n            type: 'checkbox',\n            label: 'Maintain Aspect Ratio',\n            description: 'Keep the original aspect ratio when scaling',\n            value: this.config.get('display.maintainAspectRatio')\n          },\n          {\n            id: 'enableHardwareAcceleration',\n            type: 'checkbox',\n            label: 'Enable Hardware Acceleration',\n            description: 'Use GPU acceleration when available',\n            value: this.config.get('display.enableHardwareAcceleration')\n          },\n          {\n            id: 'maxFrameQueueSize',\n            type: 'number',\n            label: 'Max Frame Queue Size',\n            description: 'Maximum number of frames to buffer',\n            value: this.config.get('display.maxFrameQueueSize'),\n            min: 1,\n            max: 50\n          }\n        ]\n      },\n      {\n        id: 'webrtc',\n        title: 'WebRTC',\n        description: 'Configure WebRTC connection settings',\n        settings: [\n          {\n            id: 'maxBitrate',\n            type: 'number',\n            label: 'Maximum Bitrate (bps)',\n            description: 'Maximum video bitrate in bits per second',\n            value: this.config.get('webrtc.maxBitrate'),\n            min: 100000,\n            max: 10000000,\n            step: 100000\n          },\n          {\n            id: 'maxFramerate',\n            type: 'number',\n            label: 'Maximum Framerate',\n            description: 'Maximum video framerate',\n            value: this.config.get('webrtc.maxFramerate'),\n            min: 1,\n            max: 60\n          },\n          {\n            id: 'enableAudio',\n            type: 'checkbox',\n            label: 'Enable Audio',\n            description: 'Enable audio streaming',\n            value: this.config.get('webrtc.enableAudio')\n          },\n          {\n            id: 'enableVideo',\n            type: 'checkbox',\n            label: 'Enable Video',\n            description: 'Enable video streaming',\n            value: this.config.get('webrtc.enableVideo')\n          }\n        ]\n      },\n      {\n        id: 'security',\n        title: 'Security',\n        description: 'Configure security and privacy settings',\n        settings: [\n          {\n            id: 'enableClipboard',\n            type: 'checkbox',\n            label: 'Enable Clipboard Sharing',\n            description: 'Allow clipboard synchronization between client and server',\n            value: this.config.get('security.enableClipboard')\n          },\n          {\n            id: 'enableFileTransfer',\n            type: 'checkbox',\n            label: 'Enable File Transfer',\n            description: 'Allow file transfer between client and server',\n            value: this.config.get('security.enableFileTransfer')\n          },\n          {\n            id: 'enableAudioCapture',\n            type: 'checkbox',\n            label: 'Enable Audio Capture',\n            description: 'Allow audio capture from the remote system',\n            value: this.config.get('security.enableAudioCapture')\n          },\n          {\n            id: 'enablePrinting',\n            type: 'checkbox',\n            label: 'Enable Printing',\n            description: 'Allow printing from the remote session',\n            value: this.config.get('security.enablePrinting')\n          },\n          {\n            id: 'maxFileSize',\n            type: 'number',\n            label: 'Maximum File Size (bytes)',\n            description: 'Maximum file size for transfers',\n            value: this.config.get('security.maxFileSize'),\n            min: 1024,\n            max: 1073741824, // 1GB\n            step: 1024\n          }\n        ]\n      },\n      {\n        id: 'ui',\n        title: 'Interface',\n        description: 'Configure user interface settings',\n        settings: [\n          {\n            id: 'theme',\n            type: 'select',\n            label: 'Theme',\n            description: 'Application theme',\n            value: this.config.get('ui.theme'),\n            options: [\n              { value: 'light', label: 'Light' },\n              { value: 'dark', label: 'Dark' },\n              { value: 'auto', label: 'Auto (System)' }\n            ]\n          },\n          {\n            id: 'showPerformanceOverlay',\n            type: 'checkbox',\n            label: 'Show Performance Overlay',\n            description: 'Show performance statistics overlay',\n            value: this.config.get('ui.showPerformanceOverlay')\n          },\n          {\n            id: 'showConnectionInfo',\n            type: 'checkbox',\n            label: 'Show Connection Info',\n            description: 'Display connection information in the interface',\n            value: this.config.get('ui.showConnectionInfo')\n          },\n          {\n            id: 'enableKeyboardShortcuts',\n            type: 'checkbox',\n            label: 'Enable Keyboard Shortcuts',\n            description: 'Enable keyboard shortcuts for common actions',\n            value: this.config.get('ui.enableKeyboardShortcuts')\n          },\n          {\n            id: 'enableContextMenu',\n            type: 'checkbox',\n            label: 'Enable Context Menu',\n            description: 'Show context menu on right-click',\n            value: this.config.get('ui.enableContextMenu')\n          },\n          {\n            id: 'language',\n            type: 'select',\n            label: 'Language',\n            description: 'Application language',\n            value: this.config.get('ui.language'),\n            options: [\n              { value: 'en', label: 'English' },\n              { value: 'es', label: 'Español' },\n              { value: 'fr', label: 'Français' },\n              { value: 'de', label: 'Deutsch' },\n              { value: 'ja', label: '日本語' },\n              { value: 'zh', label: '中文' }\n            ]\n          }\n        ]\n      },\n      {\n        id: 'logging',\n        title: 'Logging',\n        description: 'Configure logging and debugging settings',\n        settings: [\n          {\n            id: 'level',\n            type: 'select',\n            label: 'Log Level',\n            description: 'Minimum log level to display',\n            value: this.config.get('logging.level'),\n            options: [\n              { value: 'debug', label: 'Debug' },\n              { value: 'info', label: 'Info' },\n              { value: 'warn', label: 'Warning' },\n              { value: 'error', label: 'Error' }\n            ]\n          },\n          {\n            id: 'enableConsole',\n            type: 'checkbox',\n            label: 'Enable Console Logging',\n            description: 'Log messages to browser console',\n            value: this.config.get('logging.enableConsole')\n          },\n          {\n            id: 'enableRemote',\n            type: 'checkbox',\n            label: 'Enable Remote Logging',\n            description: 'Send logs to remote server',\n            value: this.config.get('logging.enableRemote')\n          },\n          {\n            id: 'maxLogEntries',\n            type: 'number',\n            label: 'Max Log Entries',\n            description: 'Maximum number of log entries to keep in memory',\n            value: this.config.get('logging.maxLogEntries'),\n            min: 100,\n            max: 10000,\n            step: 100\n          }\n        ]\n      }\n    ];\n  }\n\n  private renderSetting(setting: SettingItem): string {\n    const inputId = `setting-${setting.id}`;\n    \n    switch (setting.type) {\n      case 'text':\n        return `\n          <div class=\"setting-item\">\n            <label for=\"${inputId}\" class=\"setting-label\">${setting.label}</label>\n            <input \n              type=\"text\" \n              id=\"${inputId}\" \n              value=\"${setting.value}\" \n              placeholder=\"${setting.placeholder || ''}\"\n              class=\"setting-input\"\n              data-setting=\"${setting.id}\"\n            />\n            ${setting.description ? `<p class=\"setting-description\">${setting.description}</p>` : ''}\n          </div>\n        `;\n        \n      case 'number':\n        return `\n          <div class=\"setting-item\">\n            <label for=\"${inputId}\" class=\"setting-label\">${setting.label}</label>\n            <input \n              type=\"number\" \n              id=\"${inputId}\" \n              value=\"${setting.value}\" \n              min=\"${setting.min || ''}\" \n              max=\"${setting.max || ''}\" \n              step=\"${setting.step || ''}\"\n              class=\"setting-input\"\n              data-setting=\"${setting.id}\"\n            />\n            ${setting.description ? `<p class=\"setting-description\">${setting.description}</p>` : ''}\n          </div>\n        `;\n        \n      case 'select':\n        return `\n          <div class=\"setting-item\">\n            <label for=\"${inputId}\" class=\"setting-label\">${setting.label}</label>\n            <select id=\"${inputId}\" class=\"setting-input\" data-setting=\"${setting.id}\">\n              ${setting.options?.map(option => `\n                <option value=\"${option.value}\" ${option.value === setting.value ? 'selected' : ''}>\n                  ${option.label}\n                </option>\n              `).join('')}\n            </select>\n            ${setting.description ? `<p class=\"setting-description\">${setting.description}</p>` : ''}\n          </div>\n        `;\n        \n      case 'checkbox':\n        return `\n          <div class=\"setting-item\">\n            <label class=\"setting-label checkbox-label\">\n              <input \n                type=\"checkbox\" \n                id=\"${inputId}\" \n                ${setting.value ? 'checked' : ''}\n                class=\"setting-input\"\n                data-setting=\"${setting.id}\"\n              />\n              <span class=\"checkmark\"></span>\n              ${setting.label}\n            </label>\n            ${setting.description ? `<p class=\"setting-description\">${setting.description}</p>` : ''}\n          </div>\n        `;\n        \n      case 'textarea':\n        return `\n          <div class=\"setting-item\">\n            <label for=\"${inputId}\" class=\"setting-label\">${setting.label}</label>\n            <textarea \n              id=\"${inputId}\" \n              placeholder=\"${setting.placeholder || ''}\"\n              class=\"setting-input\"\n              data-setting=\"${setting.id}\"\n            >${setting.value}</textarea>\n            ${setting.description ? `<p class=\"setting-description\">${setting.description}</p>` : ''}\n          </div>\n        `;\n        \n      default:\n        return '';\n    }\n  }\n\n  private setupEventListeners(): void {\n    // Navigation\n    document.addEventListener('click', (event) => {\n      const target = event.target as HTMLElement;\n      \n      if (target.classList.contains('nav-item')) {\n        this.switchSection(target.dataset.section!);\n      }\n      \n      if (target.id === 'close-settings-btn' || target.id === 'cancel-settings-btn') {\n        this.hide();\n      }\n      \n      if (target.id === 'save-settings-btn') {\n        this.saveSettings();\n      }\n      \n      if (target.id === 'reset-settings-btn') {\n        this.resetSettings();\n      }\n      \n      if (target.id === 'export-settings-btn') {\n        this.exportSettings();\n      }\n      \n      if (target.id === 'import-settings-btn') {\n        this.importSettings();\n      }\n    });\n\n    // Setting changes\n    document.addEventListener('change', (event) => {\n      const target = event.target as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n      if (target.classList.contains('setting-input')) {\n        this.handleSettingChange(target);\n      }\n    });\n\n    // File import\n    document.addEventListener('change', (event) => {\n      const target = event.target as HTMLInputElement;\n      if (target.id === 'import-settings-file') {\n        this.handleFileImport(target);\n      }\n    });\n  }\n\n  private switchSection(sectionId: string): void {\n    // Hide all sections\n    document.querySelectorAll('.settings-section').forEach(section => {\n      (section as HTMLElement).style.display = 'none';\n    });\n    \n    // Show selected section\n    const selectedSection = document.getElementById(`section-${sectionId}`);\n    if (selectedSection) {\n      selectedSection.style.display = 'block';\n    }\n    \n    // Update navigation\n    document.querySelectorAll('.nav-item').forEach(item => {\n      item.classList.remove('active');\n    });\n    \n    const activeNavItem = document.querySelector(`[data-section=\"${sectionId}\"]`);\n    if (activeNavItem) {\n      activeNavItem.classList.add('active');\n    }\n  }\n\n  private handleSettingChange(element: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): void {\n    const settingId = element.dataset.setting;\n    if (!settingId) return;\n    \n    let value: any;\n    \n    if (element.type === 'checkbox') {\n      value = (element as HTMLInputElement).checked;\n    } else if (element.type === 'number') {\n      value = parseFloat(element.value);\n    } else {\n      value = element.value;\n    }\n    \n    // Update the setting in the sections\n    for (const section of this.sections) {\n      const setting = section.settings.find(s => s.id === settingId);\n      if (setting) {\n        setting.value = value;\n        break;\n      }\n    }\n    \n    this.hasUnsavedChanges = true;\n    this.updateUI();\n  }\n\n  private saveSettings(): void {\n    try {\n      // Apply all settings to config\n      for (const section of this.sections) {\n        for (const setting of section.settings) {\n          const configPath = `${section.id}.${setting.id}`;\n          this.config.set(configPath, setting.value);\n        }\n      }\n      \n      this.hasUnsavedChanges = false;\n      this.updateUI();\n      this.logger.info('Settings saved successfully');\n      \n      // Show success message\n      this.showMessage('Settings saved successfully', 'success');\n      \n          } catch (error) {\n        this.logger.error('Failed to save settings', error as Error);\n        this.showMessage('Failed to save settings', 'error');\n      }\n  }\n\n  private resetSettings(): void {\n    if (confirm('Are you sure you want to reset all settings to their default values?')) {\n      this.config.reset();\n      this.initializeSections();\n      this.hasUnsavedChanges = false;\n      this.updateUI();\n      this.logger.info('Settings reset to defaults');\n      this.showMessage('Settings reset to defaults', 'success');\n    }\n  }\n\n  private exportSettings(): void {\n    try {\n      const settingsData = {\n        version: '1.0.0',\n        timestamp: new Date().toISOString(),\n        settings: this.config.export()\n      };\n      \n      const blob = new Blob([JSON.stringify(settingsData, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `real-remote-desktop-settings-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      this.logger.info('Settings exported successfully');\n      this.showMessage('Settings exported successfully', 'success');\n      \n          } catch (error) {\n        this.logger.error('Failed to export settings', error as Error);\n        this.showMessage('Failed to export settings', 'error');\n      }\n  }\n\n  private importSettings(): void {\n    const fileInput = document.getElementById('import-settings-file') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.click();\n    }\n  }\n\n  private handleFileImport(fileInput: HTMLInputElement): void {\n    const file = fileInput.files?.[0];\n    if (!file) return;\n    \n    const reader = new FileReader();\n    reader.onload = (event) => {\n      try {\n        const settingsData = JSON.parse(event.target?.result as string);\n        this.config.import(settingsData.settings);\n        this.initializeSections();\n        this.hasUnsavedChanges = false;\n        this.updateUI();\n        \n        this.logger.info('Settings imported successfully');\n        this.showMessage('Settings imported successfully', 'success');\n        \n      } catch (error) {\n        this.logger.error('Failed to import settings', error as Error);\n        this.showMessage('Failed to import settings. Invalid file format.', 'error');\n      }\n    };\n    reader.readAsText(file);\n    \n    // Reset file input\n    fileInput.value = '';\n  }\n\n  private updateUI(): void {\n    const saveBtn = document.getElementById('save-settings-btn') as HTMLButtonElement;\n    if (saveBtn) {\n      saveBtn.disabled = !this.hasUnsavedChanges;\n    }\n  }\n\n  private showMessage(message: string, type: 'success' | 'error' | 'info'): void {\n    // Create a temporary message element\n    const messageElement = document.createElement('div');\n    messageElement.className = `message message-${type}`;\n    messageElement.textContent = message;\n    \n    // Add to settings panel\n    const settingsPanel = document.getElementById('settings-panel');\n    if (settingsPanel) {\n      settingsPanel.appendChild(messageElement);\n      \n      // Remove after 3 seconds\n      setTimeout(() => {\n        if (messageElement.parentNode) {\n          messageElement.parentNode.removeChild(messageElement);\n        }\n      }, 3000);\n    }\n  }\n\n  // Public methods\n  getSettings(): any {\n    const settings: any = {};\n    for (const section of this.sections) {\n      settings[section.id] = {};\n      for (const setting of section.settings) {\n        settings[section.id][setting.id] = setting.value;\n      }\n    }\n    return settings;\n  }\n\n  setSettings(settings: any): void {\n    for (const [sectionId, sectionSettings] of Object.entries(settings)) {\n      const section = this.sections.find(s => s.id === sectionId);\n      if (section) {\n        for (const [settingId, value] of Object.entries(sectionSettings as any)) {\n          const setting = section.settings.find(s => s.id === settingId);\n          if (setting) {\n            setting.value = value;\n          }\n        }\n      }\n    }\n    this.hasUnsavedChanges = true;\n    this.updateUI();\n  }\n\n  destroy(): void {\n    this.hide();\n    this.logger.info('Settings panel destroyed');\n  }\n} ","import { Logger } from '../../utils/Logger';\nimport { Config } from '../../utils/Config';\n\nexport class FileTransferPanel {\n  private logger = new Logger('FileTransferPanel');\n  private container: HTMLElement | null = null;\n  private isVisible = false;\n\n  constructor() {\n    this.logger.info('File Transfer Panel initialized');\n  }\n\n  public mount(selector: string): void {\n    this.container = document.querySelector(selector);\n    if (!this.container) {\n      throw new Error(`Element not found: ${selector}`);\n    }\n    \n    this.render();\n    this.logger.info('File Transfer Panel mounted');\n  }\n\n  public show(): void {\n    this.isVisible = true;\n    this.updateUI();\n  }\n\n  public hide(): void {\n    this.isVisible = false;\n    this.updateUI();\n  }\n\n  public toggle(): void {\n    this.isVisible = !this.isVisible;\n    this.updateUI();\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"file-transfer-panel ${this.isVisible ? 'visible' : ''}\">\n        <div class=\"file-transfer-header\">\n          <h3>File Transfer</h3>\n          <button class=\"close-btn\" onclick=\"this.hide()\">×</button>\n        </div>\n        \n        <div class=\"file-transfer-content\">\n          <div class=\"upload-section\">\n            <div class=\"drop-zone\" id=\"drop-zone\">\n              <div class=\"drop-zone-content\">\n                <i class=\"upload-icon\">📁</i>\n                <p>Drag and drop files here to upload</p>\n                <p>or click to browse</p>\n                <input type=\"file\" id=\"file-input\" multiple style=\"display: none;\">\n              </div>\n            </div>\n            \n            <div class=\"upload-list\" id=\"upload-list\">\n              <div class=\"empty-state\">No uploads yet</div>\n            </div>\n          </div>\n          \n          <div class=\"download-section\">\n            <div class=\"download-list\" id=\"download-list\">\n              <div class=\"empty-state\">No downloads yet</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.setupEventHandlers();\n  }\n\n  private setupEventHandlers(): void {\n    const dropZone = document.getElementById('drop-zone');\n    const fileInput = document.getElementById('file-input') as HTMLInputElement;\n\n    if (dropZone) {\n      dropZone.addEventListener('click', () => {\n        if (fileInput) {\n          fileInput.click();\n        }\n      });\n\n      dropZone.addEventListener('dragover', (e) => {\n        e.preventDefault();\n        dropZone.classList.add('drag-over');\n      });\n\n      dropZone.addEventListener('drop', (e) => {\n        e.preventDefault();\n        dropZone.classList.remove('drag-over');\n        const files = Array.from(e.dataTransfer?.files || []);\n        this.handleFiles(files);\n      });\n\n      dropZone.addEventListener('dragleave', () => {\n        dropZone.classList.remove('drag-over');\n      });\n    }\n\n    if (fileInput) {\n      fileInput.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        if (target.files) {\n          this.handleFiles(Array.from(target.files));\n        }\n      });\n    }\n  }\n\n  private handleFiles(files: File[]): void {\n    files.forEach(file => {\n      this.logger.info(`File selected for upload: ${file.name} (${this.formatFileSize(file.size)})`);\n      this.addUploadItem(file);\n    });\n  }\n\n  private addUploadItem(file: File): void {\n    const uploadList = document.getElementById('upload-list');\n    if (!uploadList) return;\n\n    const item = document.createElement('div');\n    item.className = 'upload-item';\n    item.innerHTML = `\n      <div class=\"upload-info\">\n        <div class=\"upload-name\">${file.name}</div>\n        <div class=\"upload-size\">${this.formatFileSize(file.size)}</div>\n      </div>\n      <div class=\"upload-progress\">\n        <div class=\"progress-bar\">\n          <div class=\"progress-fill\" style=\"width: 0%\"></div>\n        </div>\n        <div class=\"progress-text\">0%</div>\n      </div>\n      <div class=\"upload-status\">\n        <span class=\"status-badge pending\">Pending</span>\n        <button class=\"action-btn remove\" onclick=\"this.removeUpload(this)\">×</button>\n      </div>\n    `;\n\n    uploadList.appendChild(item);\n    this.simulateUpload(item);\n  }\n\n  private simulateUpload(item: HTMLElement): void {\n    const progressFill = item.querySelector('.progress-fill') as HTMLElement;\n    const progressText = item.querySelector('.progress-text') as HTMLElement;\n    const statusBadge = item.querySelector('.status-badge') as HTMLElement;\n\n    statusBadge.textContent = 'Uploading';\n    statusBadge.className = 'status-badge uploading';\n\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 10;\n      if (progress >= 100) {\n        progress = 100;\n        statusBadge.textContent = 'Completed';\n        statusBadge.className = 'status-badge completed';\n        clearInterval(interval);\n      }\n      \n      progressFill.style.width = `${progress}%`;\n      progressText.textContent = `${progress.toFixed(1)}%`;\n    }, 100);\n  }\n\n  private removeUpload(button: HTMLElement): void {\n    const item = button.closest('.upload-item');\n    if (item) {\n      item.remove();\n    }\n  }\n\n  private formatFileSize(bytes: number): string {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  private updateUI(): void {\n    if (this.container) {\n      const panel = this.container.querySelector('.file-transfer-panel');\n      if (panel) {\n        panel.classList.toggle('visible', this.isVisible);\n      }\n    }\n  }\n} ","import { Logger } from '../../utils/Logger';\nimport { Config } from '../../utils/Config';\n\nexport interface DeviceInfo {\n  id: string;\n  name: string;\n  type: 'usb' | 'printer' | 'smartcard' | 'camera' | 'microphone' | 'speaker';\n  connected: boolean;\n  enabled: boolean;\n}\n\nexport class DeviceRedirectionPanel {\n  private logger = new Logger('DeviceRedirectionPanel');\n  private container: HTMLElement | null = null;\n  private isVisible = false;\n  private devices: DeviceInfo[] = [];\n\n  constructor() {\n    this.logger.info('Device Redirection Panel initialized');\n    this.initializeDevices();\n  }\n\n  private initializeDevices(): void {\n    // Initialize with common device types\n    this.devices = [\n      { id: 'usb-1', name: 'USB Device 1', type: 'usb', connected: false, enabled: false },\n      { id: 'printer-1', name: 'Default Printer', type: 'printer', connected: false, enabled: false },\n      { id: 'smartcard-1', name: 'Smart Card Reader', type: 'smartcard', connected: false, enabled: false },\n      { id: 'camera-1', name: 'Web Camera', type: 'camera', connected: false, enabled: false },\n      { id: 'mic-1', name: 'Microphone', type: 'microphone', connected: false, enabled: false },\n      { id: 'speaker-1', name: 'Speakers', type: 'speaker', connected: false, enabled: false }\n    ];\n  }\n\n  public mount(selector: string): void {\n    this.container = document.querySelector(selector);\n    if (!this.container) {\n      throw new Error(`Element not found: ${selector}`);\n    }\n    \n    this.render();\n    this.logger.info('Device Redirection Panel mounted');\n  }\n\n  public show(): void {\n    this.isVisible = true;\n    this.updateUI();\n  }\n\n  public hide(): void {\n    this.isVisible = false;\n    this.updateUI();\n  }\n\n  public toggle(): void {\n    this.isVisible = !this.isVisible;\n    this.updateUI();\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"device-redirection-panel ${this.isVisible ? 'visible' : ''}\">\n        <div class=\"device-redirection-header\">\n          <h3>Device Redirection</h3>\n          <button class=\"close-btn\" onclick=\"this.hide()\">×</button>\n        </div>\n        \n        <div class=\"device-redirection-content\">\n          <div class=\"device-categories\">\n            <div class=\"category usb-devices\">\n              <h4>USB Devices</h4>\n              <div class=\"device-list\" id=\"usb-devices\">\n                ${this.renderDeviceCategory('usb')}\n              </div>\n            </div>\n            \n            <div class=\"category audio-devices\">\n              <h4>Audio Devices</h4>\n              <div class=\"device-list\" id=\"audio-devices\">\n                ${this.renderDeviceCategory('microphone')}\n                ${this.renderDeviceCategory('speaker')}\n              </div>\n            </div>\n            \n            <div class=\"category peripheral-devices\">\n              <h4>Peripheral Devices</h4>\n              <div class=\"device-list\" id=\"peripheral-devices\">\n                ${this.renderDeviceCategory('printer')}\n                ${this.renderDeviceCategory('smartcard')}\n                ${this.renderDeviceCategory('camera')}\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"device-controls\">\n            <button class=\"btn btn-primary\" onclick=\"this.scanForDevices()\">\n              <i class=\"icon\">🔍</i>\n              Scan for Devices\n            </button>\n            <button class=\"btn btn-secondary\" onclick=\"this.refreshDevices()\">\n              <i class=\"icon\">🔄</i>\n              Refresh\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.setupEventHandlers();\n  }\n\n  private renderDeviceCategory(type: string): string {\n    const categoryDevices = this.devices.filter(device => device.type === type);\n    \n    if (categoryDevices.length === 0) {\n      return '<div class=\"empty-state\">No devices found</div>';\n    }\n\n    return categoryDevices.map(device => `\n      <div class=\"device-item ${device.connected ? 'connected' : ''}\" data-device-id=\"${device.id}\">\n        <div class=\"device-info\">\n          <div class=\"device-icon\">${this.getDeviceIcon(device.type)}</div>\n          <div class=\"device-details\">\n            <div class=\"device-name\">${device.name}</div>\n            <div class=\"device-status\">${device.connected ? 'Connected' : 'Disconnected'}</div>\n          </div>\n        </div>\n        \n        <div class=\"device-controls\">\n          <label class=\"toggle-switch\">\n            <input type=\"checkbox\" \n                   ${device.enabled ? 'checked' : ''} \n                   onchange=\"this.toggleDevice('${device.id}', this.checked)\">\n            <span class=\"slider\"></span>\n          </label>\n        </div>\n      </div>\n    `).join('');\n  }\n\n  private getDeviceIcon(type: string): string {\n    const icons = {\n      usb: '🔌',\n      printer: '🖨️',\n      smartcard: '💳',\n      camera: '📷',\n      microphone: '🎤',\n      speaker: '🔊'\n    };\n    return icons[type as keyof typeof icons] || '📱';\n  }\n\n  private setupEventHandlers(): void {\n    // Device toggle handlers\n    const toggles = document.querySelectorAll('input[type=\"checkbox\"]');\n    toggles.forEach(toggle => {\n      toggle.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        const deviceId = target.closest('.device-item')?.dataset.deviceId;\n        if (deviceId) {\n          this.toggleDevice(deviceId, target.checked);\n        }\n      });\n    });\n  }\n\n  public toggleDevice(deviceId: string, enabled: boolean): void {\n    const device = this.devices.find(d => d.id === deviceId);\n    if (device) {\n      device.enabled = enabled;\n      this.logger.info(`${enabled ? 'Enabled' : 'Disabled'} device: ${device.name}`);\n      \n      // Simulate device connection/disconnection\n      if (enabled) {\n        setTimeout(() => {\n          device.connected = true;\n          this.updateDeviceUI(deviceId);\n        }, 1000);\n      } else {\n        device.connected = false;\n        this.updateDeviceUI(deviceId);\n      }\n    }\n  }\n\n  private updateDeviceUI(deviceId: string): void {\n    const deviceItem = document.querySelector(`[data-device-id=\"${deviceId}\"]`);\n    if (deviceItem) {\n      const device = this.devices.find(d => d.id === deviceId);\n      if (device) {\n        deviceItem.classList.toggle('connected', device.connected);\n        const statusElement = deviceItem.querySelector('.device-status');\n        if (statusElement) {\n          statusElement.textContent = device.connected ? 'Connected' : 'Disconnected';\n        }\n      }\n    }\n  }\n\n  public scanForDevices(): void {\n    this.logger.info('Scanning for devices...');\n    \n    // Simulate device discovery\n    setTimeout(() => {\n      const newDevices: DeviceInfo[] = [\n        { id: 'usb-2', name: 'USB Flash Drive', type: 'usb', connected: true, enabled: false },\n        { id: 'printer-2', name: 'Network Printer', type: 'printer', connected: true, enabled: false },\n        { id: 'camera-2', name: 'HD Webcam', type: 'camera', connected: true, enabled: false }\n      ];\n      \n      this.devices.push(...newDevices);\n      this.render();\n      this.logger.info(`Found ${newDevices.length} new devices`);\n    }, 2000);\n  }\n\n  public refreshDevices(): void {\n    this.logger.info('Refreshing device list...');\n    this.render();\n  }\n\n  private updateUI(): void {\n    if (this.container) {\n      const panel = this.container.querySelector('.device-redirection-panel');\n      if (panel) {\n        panel.classList.toggle('visible', this.isVisible);\n      }\n    }\n  }\n\n  public getConnectedDevices(): DeviceInfo[] {\n    return this.devices.filter(device => device.connected && device.enabled);\n  }\n\n  public getDeviceById(deviceId: string): DeviceInfo | undefined {\n    return this.devices.find(device => device.id === deviceId);\n  }\n} ","import { Logger } from '../utils/Logger';\nimport { Config } from '../utils/Config';\nimport { ConnectionManager, ConnectionState, ConnectionType } from '../services/websocket/ConnectionManager';\nimport { CanvasRenderer } from './rdp/CanvasRenderer';\nimport { InputHandler } from './rdp/InputHandler';\nimport { ConnectionPanel } from './panels/ConnectionPanel';\nimport { PerformanceOverlay } from './ui/PerformanceOverlay';\nimport { SettingsPanel } from './panels/SettingsPanel';\nimport { FileTransferPanel } from './panels/FileTransferPanel';\nimport { DeviceRedirectionPanel } from './panels/DeviceRedirectionPanel';\n\nexport interface AppState {\n  isConnected: boolean;\n  isConnecting: boolean;\n  isHost: boolean;\n  isClient: boolean;\n  connectionInfo: any;\n  showSettings: boolean;\n  showPerformanceOverlay: boolean;\n  showFileTransfer: boolean;\n  showDeviceRedirection: boolean;\n  theme: 'light' | 'dark' | 'auto';\n  quality: 'low' | 'medium' | 'high' | 'ultra';\n  connectionCode: string;\n  screenShareActive: boolean;\n}\n\nexport class App {\n  private logger = new Logger('App');\n  private config = Config.getInstance();\n  \n  private connectionManager: ConnectionManager;\n  private canvasRenderer!: CanvasRenderer;\n  private inputHandler!: InputHandler;\n  private connectionPanel!: ConnectionPanel;\n  private performanceOverlay!: PerformanceOverlay;\n  private settingsPanel!: SettingsPanel;\n  private fileTransferPanel!: FileTransferPanel;\n  private deviceRedirectionPanel!: DeviceRedirectionPanel;\n  \n  private appElement: HTMLElement | null = null;\n  private state: AppState;\n  \n  constructor(connectionManager: ConnectionManager) {\n    this.connectionManager = connectionManager;\n    this.state = this.getInitialState();\n    \n    this.setupComponents();\n    this.setupEventListeners();\n    this.applyTheme();\n    \n    this.logger.info('Agentless App initialized');\n  }\n\n  mount(selector: string): void {\n    this.appElement = document.querySelector(selector);\n    if (!this.appElement) {\n      throw new Error(`Element not found: ${selector}`);\n    }\n    \n    this.render();\n    this.logger.info('App mounted');\n  }\n\n  private getInitialState(): AppState {\n    return {\n      isConnected: false,\n      isConnecting: false,\n      isHost: false,\n      isClient: false,\n      connectionInfo: null,\n      showSettings: false,\n      showPerformanceOverlay: false,\n      showFileTransfer: false,\n      showDeviceRedirection: false,\n      theme: (this.config.get('ui') as any).theme,\n      quality: (this.config.get('display') as any).defaultQuality,\n      connectionCode: '',\n      screenShareActive: false\n    };\n  }\n\n  private setupComponents(): void {\n    // Initialize canvas renderer\n    this.canvasRenderer = new CanvasRenderer();\n    \n    // Initialize input handler\n    this.inputHandler = new InputHandler(this.connectionManager);\n    \n    // Initialize UI components\n    this.connectionPanel = new ConnectionPanel(this.connectionManager);\n    this.performanceOverlay = new PerformanceOverlay();\n    this.settingsPanel = new SettingsPanel();\n    this.fileTransferPanel = new FileTransferPanel();\n    this.deviceRedirectionPanel = new DeviceRedirectionPanel();\n  }\n\n  private setupEventListeners(): void {\n    // Connection manager events\n    this.connectionManager.on('hostSessionStarted', (data: any) => {\n      this.state.connectionCode = data.connectionCode;\n      this.state.isHost = true;\n      this.state.isClient = false;\n      this.updateUI();\n      this.logger.info('Host session started', data);\n    });\n    \n    this.connectionManager.on('connected', (connectionInfo) => {\n      this.state.isConnected = true;\n      this.state.isConnecting = false;\n      this.state.connectionInfo = connectionInfo;\n      this.state.isHost = connectionInfo.isHost;\n      this.state.isClient = connectionInfo.isClient;\n      this.updateUI();\n      this.logger.info('Connection established');\n    });\n    \n    this.connectionManager.on('disconnected', (connectionInfo) => {\n      this.state.isConnected = false;\n      this.state.isConnecting = false;\n      this.state.connectionInfo = connectionInfo;\n      this.state.screenShareActive = false;\n      this.updateUI();\n      this.logger.info('Connection lost');\n    });\n    \n    this.connectionManager.on('connectionStateChanged', (connectionInfo) => {\n      this.state.connectionInfo = connectionInfo;\n      this.state.isConnecting = connectionInfo.state === ConnectionState.CONNECTING;\n      this.updateUI();\n    });\n    \n    this.connectionManager.on('connectionFailed', (error) => {\n      this.state.isConnected = false;\n      this.state.isConnecting = false;\n      this.updateUI();\n      this.logger.error('Connection failed', error);\n    });\n    \n    this.connectionManager.on('screenShareStarted', () => {\n      this.state.screenShareActive = true;\n      this.updateUI();\n      this.logger.info('Screen sharing started');\n    });\n    \n    this.connectionManager.on('screenShareStopped', () => {\n      this.state.screenShareActive = false;\n      this.updateUI();\n      this.logger.info('Screen sharing stopped');\n    });\n    \n    this.connectionManager.on('fileTransferStarted', () => {\n      this.state.showFileTransfer = true;\n      this.updateUI();\n      this.logger.info('File transfer started');\n    });\n    \n    this.connectionManager.on('deviceRedirectionStarted', () => {\n      this.state.showDeviceRedirection = true;\n      this.updateUI();\n      this.logger.info('Device redirection started');\n    });\n    \n    this.connectionManager.on('qualityChanged', (quality) => {\n      this.state.quality = quality;\n      this.updateUI();\n    });\n    \n    // Canvas renderer events\n    this.canvasRenderer.on('frameReceived', () => {\n      this.performanceOverlay.updateFrameRate();\n    });\n    \n    // Input handler events\n    this.inputHandler.on('input', (event) => {\n      this.logger.debug('Input event received', event);\n    });\n  }\n\n  private render(): void {\n    if (!this.appElement) return;\n\n    this.appElement.innerHTML = `\n      <div class=\"app-container\" data-theme=\"${this.state.theme}\">\n        <!-- Header -->\n        <header class=\"app-header\">\n          <div class=\"header-left\">\n            <h1 class=\"app-title\">Real Remote Desktop</h1>\n            <span class=\"app-subtitle\">Agentless Browser-to-Browser</span>\n          </div>\n          <div class=\"header-center\">\n            ${this.state.isConnected ? `\n              <div class=\"connection-status connected\">\n                <span class=\"status-indicator\"></span>\n                <span class=\"status-text\">Connected</span>\n                ${this.state.isHost ? '<span class=\"role-badge host\">Host</span>' : ''}\n                ${this.state.isClient ? '<span class=\"role-badge client\">Client</span>' : ''}\n              </div>\n            ` : `\n              <div class=\"connection-status disconnected\">\n                <span class=\"status-indicator\"></span>\n                <span class=\"status-text\">Disconnected</span>\n              </div>\n            `}\n          </div>\n          <div class=\"header-right\">\n            <button class=\"btn btn-secondary\" onclick=\"window.app.togglePerformanceOverlay()\">\n              <span class=\"icon\">📊</span>\n            </button>\n            <button class=\"btn btn-secondary\" onclick=\"window.app.toggleSettings()\">\n              <span class=\"icon\">⚙️</span>\n            </button>\n            <button class=\"btn btn-secondary\" onclick=\"window.app.toggleTheme()\">\n              <span class=\"icon\">🌙</span>\n            </button>\n          </div>\n        </header>\n\n        <!-- Main Content -->\n        <main class=\"app-main\">\n          <!-- Connection Panel -->\n          ${!this.state.isConnected ? `\n            <div class=\"connection-panel-container\">\n              <div class=\"connection-panel\">\n                <h2>Start Remote Desktop Session</h2>\n                <div class=\"connection-options\">\n                  <div class=\"option-card\" onclick=\"window.app.startHostSession()\">\n                    <div class=\"option-icon\">🖥️</div>\n                    <h3>Share My Screen</h3>\n                    <p>Start a host session and share your screen with others</p>\n                    <button class=\"btn btn-primary\">Start Host Session</button>\n                  </div>\n                  <div class=\"option-card\" onclick=\"window.app.showJoinDialog()\">\n                    <div class=\"option-icon\">👁️</div>\n                    <h3>Join Session</h3>\n                    <p>Connect to a host session using a connection code</p>\n                    <button class=\"btn btn-primary\">Join Session</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ` : ''}\n\n          <!-- Canvas Container -->\n          ${this.state.isConnected ? `\n            <div class=\"canvas-container\">\n              <canvas id=\"remote-canvas\" width=\"1920\" height=\"1080\"></canvas>\n              \n              <!-- Connection Code Display (Host) -->\n              ${this.state.isHost && this.state.connectionCode ? `\n                <div class=\"connection-code-display\">\n                  <div class=\"code-container\">\n                    <span class=\"code-label\">Connection Code:</span>\n                    <span class=\"code-value\">${this.state.connectionCode}</span>\n                    <button class=\"btn btn-secondary\" onclick=\"navigator.clipboard.writeText('${this.state.connectionCode}')\">\n                      📋 Copy\n                    </button>\n                  </div>\n                </div>\n              ` : ''}\n\n              <!-- Control Panel -->\n              <div class=\"control-panel\">\n                <div class=\"control-group\">\n                  <button class=\"btn btn-secondary\" onclick=\"window.app.toggleFileTransfer()\">\n                    📁 File Transfer\n                  </button>\n                  <button class=\"btn btn-secondary\" onclick=\"window.app.toggleDeviceRedirection()\">\n                    🔌 Devices\n                  </button>\n                  <button class=\"btn btn-secondary\" onclick=\"window.app.toggleClipboard()\">\n                    📋 Clipboard\n                  </button>\n                </div>\n                <div class=\"control-group\">\n                  <select class=\"quality-selector\" onchange=\"window.app.changeQuality(this.value)\">\n                    <option value=\"low\" ${this.state.quality === 'low' ? 'selected' : ''}>Low Quality</option>\n                    <option value=\"medium\" ${this.state.quality === 'medium' ? 'selected' : ''}>Medium Quality</option>\n                    <option value=\"high\" ${this.state.quality === 'high' ? 'selected' : ''}>High Quality</option>\n                    <option value=\"ultra\" ${this.state.quality === 'ultra' ? 'selected' : ''}>Ultra Quality</option>\n                  </select>\n                  <button class=\"btn btn-secondary\" onclick=\"window.app.toggleFullscreen()\">\n                    ⛶ Fullscreen\n                  </button>\n                </div>\n              </div>\n            </div>\n          ` : ''}\n        </main>\n\n        <!-- Footer -->\n        <footer class=\"app-footer\">\n          <div class=\"footer-left\">\n            <span class=\"version\">v1.0.0</span>\n          </div>\n          <div class=\"footer-center\">\n            <span class=\"status-text\">\n              ${this.state.isConnected ? \n                `${this.state.isHost ? 'Hosting' : 'Connected to'} remote session` : \n                'Ready to connect'\n              }\n            </span>\n          </div>\n          <div class=\"footer-right\">\n            <button class=\"btn btn-secondary\" onclick=\"window.app.disconnect()\" ${!this.state.isConnected ? 'disabled' : ''}>\n              Disconnect\n            </button>\n          </div>\n        </footer>\n\n        <!-- Modals -->\n        ${this.state.showSettings ? `\n          <div class=\"modal-overlay\" onclick=\"window.app.toggleSettings()\">\n            <div class=\"modal-content\" onclick=\"event.stopPropagation()\">\n              <div class=\"modal-header\">\n                <h3>Settings</h3>\n                <button class=\"modal-close\" onclick=\"window.app.toggleSettings()\">×</button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"settings-section\">\n                  <h4>Connection</h4>\n                  <div class=\"setting-item\">\n                    <label>Enable Audio</label>\n                    <input type=\"checkbox\" ${this.config.get('webrtc').enableAudio ? 'checked' : ''}>\n                  </div>\n                  <div class=\"setting-item\">\n                    <label>Enable Video</label>\n                    <input type=\"checkbox\" ${this.config.get('webrtc').enableVideo ? 'checked' : ''}>\n                  </div>\n                </div>\n                <div class=\"settings-section\">\n                  <h4>Security</h4>\n                  <div class=\"setting-item\">\n                    <label>Enable Clipboard Sync</label>\n                    <input type=\"checkbox\" ${this.config.get('security').enableClipboard ? 'checked' : ''}>\n                  </div>\n                  <div class=\"setting-item\">\n                    <label>Enable File Transfer</label>\n                    <input type=\"checkbox\" ${this.config.get('security').enableFileTransfer ? 'checked' : ''}>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ` : ''}\n\n        ${this.state.showFileTransfer ? `\n          <div class=\"modal-overlay\" onclick=\"window.app.toggleFileTransfer()\">\n            <div class=\"modal-content\" onclick=\"event.stopPropagation()\">\n              <div class=\"modal-header\">\n                <h3>File Transfer</h3>\n                <button class=\"modal-close\" onclick=\"window.app.toggleFileTransfer()\">×</button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"file-transfer-area\">\n                  <div class=\"upload-area\">\n                    <h4>Upload Files</h4>\n                    <input type=\"file\" multiple>\n                    <button class=\"btn btn-primary\">Upload</button>\n                  </div>\n                  <div class=\"download-area\">\n                    <h4>Download Files</h4>\n                    <div class=\"file-list\">\n                      <div class=\"file-item\">\n                        <span class=\"file-name\">example.txt</span>\n                        <button class=\"btn btn-secondary\">Download</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ` : ''}\n\n        ${this.state.showDeviceRedirection ? `\n          <div class=\"modal-overlay\" onclick=\"window.app.toggleDeviceRedirection()\">\n            <div class=\"modal-content\" onclick=\"event.stopPropagation()\">\n              <div class=\"modal-header\">\n                <h3>Device Redirection</h3>\n                <button class=\"modal-close\" onclick=\"window.app.toggleDeviceRedirection()\">×</button>\n              </div>\n              <div class=\"modal-body\">\n                <div class=\"device-list\">\n                  <div class=\"device-item\">\n                    <span class=\"device-name\">USB Device</span>\n                    <button class=\"btn btn-secondary\">Connect</button>\n                  </div>\n                  <div class=\"device-item\">\n                    <span class=\"device-name\">Printer</span>\n                    <button class=\"btn btn-secondary\">Connect</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ` : ''}\n      </div>\n    `;\n\n    this.setupEventHandlers();\n    this.initializeCanvas();\n  }\n\n  private setupEventHandlers(): void {\n    // Make app methods available globally\n    (window as any).app = {\n      startHostSession: () => this.startHostSession(),\n      showJoinDialog: () => this.showJoinDialog(),\n      toggleSettings: () => this.toggleSettings(),\n      toggleFileTransfer: () => this.toggleFileTransfer(),\n      toggleDeviceRedirection: () => this.toggleDeviceRedirection(),\n      togglePerformanceOverlay: () => this.togglePerformanceOverlay(),\n      toggleTheme: () => this.toggleTheme(),\n      toggleFullscreen: () => this.toggleFullscreen(),\n      changeQuality: (quality: string) => this.changeQuality(quality),\n      disconnect: () => this.disconnect()\n    };\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (event) => {\n      this.handleKeyboardShortcut(event);\n    });\n  }\n\n  private initializeCanvas(): void {\n    if (this.state.isConnected) {\n      const canvas = document.getElementById('remote-canvas') as HTMLCanvasElement;\n      if (canvas) {\n        this.canvasRenderer.attachToCanvas(canvas);\n        this.inputHandler.attachToCanvas(canvas);\n      }\n    }\n  }\n\n  private updateUI(): void {\n    this.render();\n  }\n\n  private async startHostSession(): Promise<void> {\n    try {\n      this.state.isConnecting = true;\n      this.updateUI();\n      \n      await this.connectionManager.startHostSession({\n        isHost: true,\n        quality: this.state.quality,\n        enableAudio: (this.config.get('webrtc') as any).enableAudio,\n        enableVideo: (this.config.get('webrtc') as any).enableVideo,\n        enableClipboard: (this.config.get('security') as any).enableClipboard,\n        enableFileTransfer: (this.config.get('security') as any).enableFileTransfer,\n        enableDeviceRedirection: true,\n        enableFolderMounting: true\n      });\n      \n      this.logger.info('Host session started successfully');\n    } catch (error) {\n      this.logger.error('Failed to start host session', error);\n      this.state.isConnecting = false;\n      this.updateUI();\n    }\n  }\n\n  private showJoinDialog(): void {\n    const code = prompt('Enter connection code:');\n    if (code) {\n      this.joinClientSession(code);\n    }\n  }\n\n  private async joinClientSession(connectionCode: string): Promise<void> {\n    try {\n      this.state.isConnecting = true;\n      this.updateUI();\n      \n      await this.connectionManager.joinClientSession(connectionCode, {\n        isHost: false,\n        quality: this.state.quality,\n        enableAudio: (this.config.get('webrtc') as any).enableAudio,\n        enableVideo: (this.config.get('webrtc') as any).enableVideo,\n        enableClipboard: (this.config.get('security') as any).enableClipboard,\n        enableFileTransfer: (this.config.get('security') as any).enableFileTransfer,\n        enableDeviceRedirection: true,\n        enableFolderMounting: true\n      });\n      \n      this.logger.info('Client session joined successfully');\n    } catch (error) {\n      this.logger.error('Failed to join client session', error);\n      this.state.isConnecting = false;\n      this.updateUI();\n    }\n  }\n\n  private toggleSettings(): void {\n    this.state.showSettings = !this.state.showSettings;\n    this.updateUI();\n  }\n\n  private toggleFileTransfer(): void {\n    this.state.showFileTransfer = !this.state.showFileTransfer;\n    this.updateUI();\n  }\n\n  private toggleDeviceRedirection(): void {\n    this.state.showDeviceRedirection = !this.state.showDeviceRedirection;\n    this.updateUI();\n  }\n\n  private togglePerformanceOverlay(): void {\n    this.state.showPerformanceOverlay = !this.state.showPerformanceOverlay;\n    this.updateUI();\n  }\n\n  private toggleTheme(): void {\n    const themes = ['light', 'dark', 'auto'];\n    const currentIndex = themes.indexOf(this.state.theme);\n    this.state.theme = themes[(currentIndex + 1) % themes.length];\n    this.applyTheme();\n    this.updateUI();\n  }\n\n  private toggleFullscreen(): void {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n  }\n\n  private changeQuality(quality: string): void {\n    if (['low', 'medium', 'high', 'ultra'].includes(quality)) {\n      this.state.quality = quality as any;\n      this.connectionManager.updateQuality(quality as any);\n      this.updateUI();\n    }\n  }\n\n  private disconnect(): void {\n    this.connectionManager.disconnect();\n    this.state.isConnected = false;\n    this.state.isConnecting = false;\n    this.state.connectionCode = '';\n    this.state.screenShareActive = false;\n    this.updateUI();\n  }\n\n  private handleKeyboardShortcut(event: KeyboardEvent): void {\n    // Quality shortcuts\n    if (event.ctrlKey && event.key >= '1' && event.key <= '4') {\n      const qualities = ['low', 'medium', 'high', 'ultra'];\n      const quality = qualities[parseInt(event.key) - 1];\n      if (quality) {\n        this.changeQuality(quality);\n      }\n    }\n\n    // Fullscreen\n    if (event.key === 'F11') {\n      event.preventDefault();\n      this.toggleFullscreen();\n    }\n\n    // Performance overlay\n    if (event.key === 'F12') {\n      event.preventDefault();\n      this.togglePerformanceOverlay();\n    }\n\n    // Escape to close modals\n    if (event.key === 'Escape') {\n      this.state.showSettings = false;\n      this.state.showFileTransfer = false;\n      this.state.showDeviceRedirection = false;\n      this.updateUI();\n    }\n  }\n\n  private applyTheme(): void {\n    document.documentElement.setAttribute('data-theme', this.state.theme);\n  }\n} ","import './styles/main.css';\nimport { App } from './components/App';\nimport { ConnectionManager } from './services/websocket/ConnectionManager';\nimport { Logger } from './utils/Logger';\nimport { ErrorHandler } from './utils/ErrorHandler';\nimport { Config } from './utils/Config';\n\n// Initialize global error handling\nErrorHandler.init();\n\n// Initialize logger\nconst logger = new Logger('Main');\n\n// Initialize configuration\nConfig.init();\n\n// Initialize connection manager\nconst connectionManager = new ConnectionManager();\n\n// Initialize the application\nasync function initApp() {\n  try {\n    logger.info('Initializing HTML5 RDP application...');\n    \n    // Check browser compatibility for agentless remote desktop\n    if (!checkBrowserCompatibility()) {\n      throw new Error('Browser not compatible with HTML5 RDP');\n    }\n    \n    // Initialize WebRTC adapter\n    await import('webrtc-adapter');\n    \n    // Create and mount the app\n    const app = new App(connectionManager);\n    app.mount('#app');\n    \n    // Hide loading screen\n    const loadingElement = document.getElementById('loading');\n    if (loadingElement) {\n      loadingElement.style.display = 'none';\n    }\n    \n    logger.info('Application initialized successfully');\n  } catch (error) {\n    logger.error('Failed to initialize application:', error);\n    ErrorHandler.handleError(error);\n  }\n}\n\nfunction checkBrowserCompatibility(): boolean {\n  // Check for basic features\n  if (!('HTMLCanvasElement' in window)) {\n    logger.error('Canvas not supported');\n    return false;\n  }\n  \n  if (!('WebSocket' in window)) {\n    logger.error('WebSocket not supported');\n    return false;\n  }\n  \n  if (!('localStorage' in window)) {\n    logger.error('localStorage not supported');\n    return false;\n  }\n  \n  if (!('crypto' in window)) {\n    logger.error('Crypto not supported');\n    return false;\n  }\n  \n  if (!('fetch' in window)) {\n    logger.error('Fetch not supported');\n    return false;\n  }\n  \n  // Check for WebRTC specific features\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    logger.error('WebRTC media devices not supported');\n    return false;\n  }\n  \n  // Check for RTCPeerConnection\n  if (!('RTCPeerConnection' in window)) {\n    logger.error('RTCPeerConnection not supported');\n    return false;\n  }\n  \n  // Check for screen capture API\n  if (!navigator.mediaDevices.getDisplayMedia) {\n    logger.error('Screen capture not supported');\n    return false;\n  }\n  \n  // Check for File System Access API (optional)\n  if (!('showOpenFilePicker' in window)) {\n    logger.warn('File System Access API not supported - file transfer will be limited');\n  }\n  \n  // Check for Web USB API (optional)\n  if (!('usb' in navigator)) {\n    logger.warn('Web USB API not supported - device redirection will be limited');\n  }\n  \n  return true;\n}\n\n// Start the application when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initApp);\n} else {\n  initApp();\n}\n\n// Handle unload events\nwindow.addEventListener('beforeunload', () => {\n  logger.info('Application shutting down...');\n  connectionManager.disconnect();\n});\n\n// Handle visibility change\ndocument.addEventListener('visibilitychange', () => {\n  if (document.hidden) {\n    logger.info('Page hidden, pausing connection updates');\n    connectionManager.pause();\n  } else {\n    logger.info('Page visible, resuming connection updates');\n    connectionManager.resume();\n  }\n});\n\n// Export for debugging\n(window as any).HTML5RDP = {\n  connectionManager,\n  logger,\n  config: Config\n}; "],"file":"assets/main-8ffbfaeb.js"}